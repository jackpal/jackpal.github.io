<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>GrammerJack</title><description>Jack Palevich's Essays</description><link>https://jackpal.github.io</link><language>en</language><lastBuildDate>Sun, 8 Mar 2020 00:37:13 -0800</lastBuildDate><pubDate>Sun, 8 Mar 2020 00:37:13 -0800</pubDate><ttl>250</ttl><atom:link href="https://jackpal.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://jackpal.github.io/posts/post1</guid><title>Building an image board browser using SwiftUI and Combine</title><description>Building an image board browser using SwiftUI and Combine.</description><link>https://jackpal.github.io/posts/post1</link><pubDate>Sat, 7 Mar 2020 12:03:00 -0800</pubDate><content:encoded><![CDATA[<h1>Building an image board browser using SwiftUI and Combine</h1><p>As a hobby project, I've been writing an imageboard browser app to learn the SwiftUI and Combine libraries.</p><p>SwiftUI and Combine are available on many Apple platforms. So far I've gotten my imageboard browser working well on iPhone and iPad, and this weekend I got it working on Apple TV.</p><p>The iPhone and iPad run the same "Universal" app, which provides a vertical scrolling list and navigation stack UI that works well for both iPhone:</p><img src="KleeneStariPhone.jpg" alt="iPhone Screenshot"/><p>and iPad: <img src="KleeneStariPad.jpg" alt="iPad Screenshot"/></p><p>The AppleTV app looks and acts quite differently:</p><img src="KleeneStarTV.jpg" alt="AppleTV Screenshot"/><p>The AppleTV app has a "lean back" UI. The core feature of the AppleTV app is a slideshow mode. You start the app, use the remote to pick an image board, and then the app plays a slideshow of all the images on that board. There can be thousands of images on some of the more active boards. The slideshow repeats, picking up any updated content each time through.</p><p>I used an elaborate Combine pipeline to fetch the images. This is the heart of the pipeline:</p><pre><code><span class="comment">/// Combine Pipeline for Image Board Slideshow</span>

 <span class="keyword">public extension</span> <span class="type">Publisher</span> {
  
  <span class="comment">/// Perform requests after a delay.</span>
  <span class="keyword">func</span> slowRequest(delay: <span class="type">DispatchQueue</span>.<span class="type">SchedulerTimeType</span>.<span class="type">Stride</span>)
    -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Self</span>.<span class="type">Output</span>, <span class="type">Self</span>.<span class="type">Failure</span>&gt; {
    <span class="keyword">var</span> firstItem = <span class="keyword">true
    let</span> serialQueue = <span class="type">DispatchQueue</span>(label: <span class="string">"slowRequest"</span>)

    <span class="keyword">return self</span>
    .<span class="call">flatMap</span>(maxPublishers: .<span class="call">max</span>(<span class="number">1</span>)) { (item: <span class="type">Self</span>.<span class="type">Output</span>)
      -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Self</span>.<span class="type">Output</span>, <span class="type">Self</span>.<span class="type">Failure</span>&gt; <span class="keyword">in
      if</span> firstItem {
        firstItem = <span class="keyword">false
        return</span> <span class="type">Just</span>(item)
          .<span class="call">setFailureType</span>(to: <span class="type">Self</span>.<span class="type">Failure</span>.<span class="keyword">self</span>).<span class="call">eraseToAnyPublisher</span>()
      }
      <span class="keyword">return</span> <span class="type">Just</span>(item)
        .<span class="call">setFailureType</span>(to: <span class="type">Self</span>.<span class="type">Failure</span>.<span class="keyword">self</span>)
        .<span class="call">delay</span>(for: delay, scheduler:serialQueue).<span class="call">eraseToAnyPublisher</span>()
    }
    .<span class="call">eraseToAnyPublisher</span>()
  }
  
  <span class="comment">/// Repeat the upstream publisher count times.</span>
  <span class="keyword">func</span> repeating(<span class="keyword">_</span> count: <span class="type">Int</span>) -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Self</span>.<span class="type">Output</span>, <span class="type">Self</span>.<span class="type">Failure</span>&gt; {
    <span class="type">Publishers</span>.<span class="type">Sequence</span>(sequence: <span class="number">0</span>..&lt;count)
      .<span class="call">flatMap</span>(maxPublishers: .<span class="call">max</span>(<span class="number">1</span>)) { (_: <span class="type">Int</span>)
        -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Self</span>.<span class="type">Output</span>, <span class="type">Self</span>.<span class="type">Failure</span>&gt; <span class="keyword">in
        return self</span>
      .<span class="call">eraseToAnyPublisher</span>()
    }
    .<span class="call">eraseToAnyPublisher</span>()
  }
  
}

<span class="comment">// Publishes all the images in a board.</span>
  <span class="keyword">func</span> publisher(board:<span class="type">BoardName</span>, targetLength: <span class="type">CGFloat</span>) -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">UIImage</span>?, <span class="type">Never</span>&gt; {
    <span class="type">FourChanService</span>.<span class="property">shared</span>.<span class="call">posts</span>(board:board)
    .<span class="call">filter</span> { post <span class="keyword">in</span>
      <span class="comment">// Filter out posts that don't have renderable images.</span>
      <span class="keyword">guard let</span> size = post.<span class="property">renderableImageSize</span> <span class="keyword">else</span> {
        <span class="keyword">return false</span>
      }
      <span class="comment">// Filter out posts where the renderable image is too small</span>
      <span class="keyword">return</span> <span class="call">min</span>(size.<span class="property">width</span>, size.<span class="property">height</span>) &gt;= targetLength/<span class="number">8</span>
    }
    <span class="comment">// When we get to the end of the stream, repeat.</span>
    .<span class="call">repeating</span>(<span class="type">Int</span>.<span class="property">max</span>)
    <span class="comment">// Slow down requests to the slideshow rate.</span>
    .<span class="call">slowRequest</span>(delay: <span class="number">5</span>)
    .<span class="call">flatMap</span>(maxPublishers: .<span class="call">max</span>(<span class="number">1</span>)) { post <span class="keyword">in</span>
        <span class="type">FourChanService</span>.<span class="property">shared</span>.<span class="call">dataPublisher</span>(endpoint:post.<span class="property">image</span>!)
        .<span class="call">map</span> {
          <span class="type">ImageDataInContext</span>(post:post, imageData:$0)
        }
    }
    .<span class="call">tryMap</span> {
      <span class="keyword">if let</span> image = <span class="call">downsample</span>(imageData:$0.<span class="property">imageData</span>, to: targetLength) {
        <span class="keyword">return</span> image
      }
      <span class="keyword">throw</span> <span class="type">ImageLoaderError</span>.<span class="property">couldNotDecodeImage</span>
    }
    .<span class="call">map</span> { <span class="type">Optional</span>($0) }
    .<span class="call">replaceError</span>(with: <span class="keyword">nil</span>)
    .<span class="call">receive</span>(on: <span class="type">DispatchQueue</span>.<span class="property">main</span>)
    .<span class="call">eraseToAnyPublisher</span>()
  }
}
</code></pre><p>This single animated view displays the slideshow:</p><pre><code><span class="type">A SwiftUI Slideshow View</span>
<span class="keyword">struct</span> TVSlideshowView : <span class="type">View</span> {
  <span class="keyword">let</span> publisher : <span class="type">AnyPublisher</span>&lt;<span class="type">UIImage</span>?, <span class="type">Never</span>&gt;
  
  <span class="keyword">@State private var</span> uiImageA: <span class="type">UIImage</span>? = <span class="keyword">nil
  @State private var</span> uiImageB: <span class="type">UIImage</span>? = <span class="keyword">nil
  @State private var</span> imageAHasPriority: <span class="type">Bool</span> = <span class="keyword">true
  
  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span> {
      <span class="call">decorate</span>(uiImage: uiImageA, isImageA: <span class="keyword">true</span>)
      <span class="call">decorate</span>(uiImage: uiImageB, isImageA: <span class="keyword">false</span>)
    }
    .<span class="call">onAppear</span>() {
      <span class="type">UIApplication</span>.<span class="property">shared</span>.<span class="property">isIdleTimerDisabled</span> = <span class="keyword">true</span>
    }
    .<span class="call">onDisappear</span>() {
      <span class="type">UIApplication</span>.<span class="property">shared</span>.<span class="property">isIdleTimerDisabled</span> = <span class="keyword">false</span>
    }
    .<span class="call">onReceive</span>(publisher) { uiImage <span class="keyword">in
      self</span>.<span class="call">updateImages</span>(uiImage:uiImage)
    }
  }
  
  <span class="keyword">func</span> decorate(uiImage: <span class="type">UIImage</span>?, isImageA: <span class="type">Bool</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Group</span> {
      <span class="keyword">if</span> uiImage != <span class="keyword">nil</span> {
        <span class="call">decorate</span>(uiImage: uiImage!, isImageA: isImageA)
      }
    }
  }
  
  <span class="keyword">func</span> decorate(uiImage: <span class="type">UIImage</span>, isImageA: <span class="type">Bool</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">GeometryReader</span> { proxy <span class="keyword">in</span>
      <span class="type">Image</span>(uiImage:uiImage)
        .<span class="call">renderingMode</span>(.<span class="dotAccess">original</span>)
        .<span class="call">resizable</span>()
        .<span class="call">aspectRatio</span>(contentMode: .<span class="dotAccess">fill</span>)
        .<span class="call">frame</span>(width:proxy.<span class="property">size</span>.<span class="property">width</span>, height:proxy.<span class="property">size</span>.<span class="property">height</span>)
        .<span class="call">animation</span>(<span class="keyword">nil</span>)
        .<span class="call">opacity</span>(<span class="keyword">self</span>.<span class="property">imageAHasPriority</span> == isImageA ? <span class="number">1.0</span> : <span class="number">0.0</span>)
        .<span class="call">animation</span>(.<span class="call">easeOut</span>(duration:<span class="number">0.6</span>))
    }
  }
  
  <span class="keyword">func</span> updateImages(uiImage: <span class="type">UIImage</span>?) {
    <span class="keyword">if</span> uiImage != <span class="keyword">nil</span> {
      imageAHasPriority.<span class="call">toggle</span>()
      <span class="keyword">if</span> imageAHasPriority {
        uiImageA = uiImage
      } <span class="keyword">else</span> {
        uiImageB = uiImage
      }
    }
  }
}
</code></pre><h1>Issues</h1><p>Although the code looks fairly clean now, I ran into some tricky problems while writing this code.</p><h2>Combine request throttling</h2><p>The slideshow makes multiple nested asynchronous requests to collect the image URLs:</p><pre><code>  repeatedly:
   request all the threads <span class="keyword">in</span> the image board:
     <span class="keyword">for</span> each thread, request all the posts <span class="keyword">in</span> the thread:
       <span class="keyword">for</span> each post, if it <span class="keyword">is</span> an image post, request the image data:
         decode the image data into a <span class="type">UIImage</span>
</code></pre><p>I ran into a problem where the earlier steps were not throttled, and so the image data was accumulating at a prodigious rate. I quickly exceeded the 2 GB memory limit for AppleTV apps.</p><p>Interestingly, if I displayed the images as quickly as possible, everything worked fine -- I ran the app for 20 minutes, displaying a new image every quarter of a second. Things only backed up when I changed the pipeline to work like this:</p><pre><code>  repeatedly:
   request all the threads <span class="keyword">in</span> the image board:
     <span class="keyword">for</span> each thread, request all the posts <span class="keyword">in</span> the thread:
       <span class="keyword">for</span> each post, if it <span class="keyword">is</span> an image post:
         request the image data:
           delay <span class="keyword">for</span> <span class="number">5</span> seconds:
             decode the image data into a <span class="type">UIImage</span>
</code></pre><p>In this pipeline, the image data accumulated in RAM, and that ended up killing the app.</p><p>Now Combine has the concept of back-pressure, and it's supposed to be possible to set up Combine pipelines so that this problem can be avoided. But unfortunately I couldn't get the backpressure to work in this pipeline. It might be due to my limited understanding, but it could also be due to a bug in Combine.</p><p>Luckily, I was able to work-around the issue by changing my pipeline to this:</p><pre><code>repeatedly:
  request all the threads <span class="keyword">in</span> the image board:
    <span class="keyword">for</span> each thread, request all the posts <span class="keyword">in</span> the thread:
      <span class="keyword">for</span> each post, if it <span class="keyword">is</span> an image post:
        delay <span class="keyword">for</span> <span class="number">5</span> seconds:
          request the image data:
            decode the image data into a <span class="type">UIImage</span>
</code></pre><p>By moving the "delay for 5 seconds" step before the "request the image data" step, I avoided backing up the pipeline.</p><h2>Image crossfading</h2><p>SwiftUI has an extensive animation system, but it isn't well documented, and it has bugs and limitations. I wasn't able to do exactly what I wanted, but I was at least able to get something working.</p><p>The effect I wanted was: Each time a new image is received, fade it in in front of the previous image. Ideally the opacity of the old image stays at 100%, while the new image's opacity animates from 0% (transparent) to 100% (opaque).</p><p>The effect I was able to achieve was: Each time a new image is received, fade it in in front of the previous image, while simultaneously fading the old image from 100% opacity to 0% opacity.</p><p>This works, but has the drawback that in the middle of the transition, both the old and new images are partially transparent, and so the background color shows through.</p><p>I tried a number of approaches to work around this problem, but I just couldn't get things to work.</p><p>Now that I've got basic crossfading working, I'm tempted to add "Ken Burns" style pan-and-zoom animation, as well as effects like the old AppleTV Photos screensaver.</p><h1>Conclusion</h1><p>For what it's worth, Apple's Instruments tool tells me there's some memory leaks when running the pipeline. These are genuine leaks, rather than retain cycles. The leaked objects appear to be internal to the SwiftUI implementation. Luckily the leaks are on the order of a few kilobytes per second, so it's not too much of a problem in practice.</p><p>I think Combine and SwiftUI are still "beta" quality software. Hopefully things will improve with iOS 14.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20200120_Porting_a_Toy_Path_Tracer_to_Swift</guid><title>Porting a Toy Path Tracer to Swift</title><description></description><link>https://jackpal.github.io/posts/blogger/20200120_Porting_a_Toy_Path_Tracer_to_Swift</link><pubDate>Mon, 20 Jan 2020 20:36:00 -0800</pubDate><content:encoded><![CDATA[<h1>Porting a Toy Path Tracer to Swift</h1><p>I ported a <a href="https://github.com/jackpal/colabraytracing">toy path tracer</a> to Swift.<br><br>Some performance numbers:<br><br><br> <em> Colab, effectively single threaded: 3 Mrays/s </em> iPhone 11 Pro Max: 18 Mrays/s <em> iPad Pro 12.9" 2018: 21 Mrays/s </em> iMac Pro 2017 18-core: 96 Mrays/s</p><p>The hardest part of the port was reducing contention between threads. I had to replicate the tracing object (which contains the scene data) per thread in order to avoid serializing on ARC retain/release code.</p><p>Swift currently has no way to share an immutable object graph across multiple threads without incurring ARC overhead every time any object in that graph is accessed.</p><p>Perhaps when Swift implements some form of the <a href="https://github.com/apple/swift/blob/master/docs/OwnershipManifesto.md">Ownership Manifesto</a> this will be fixed.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20190904_Dropping_a_Dynabook:_A_comic_that_turned_from_Science_Fiction_to_Science_Fact</guid><title>Dropping a Dynabook: A comic that turned from Science Fiction to Science Fact</title><description></description><link>https://jackpal.github.io/posts/blogger/20190904_Dropping_a_Dynabook:_A_comic_that_turned_from_Science_Fiction_to_Science_Fact</link><pubDate>Wed, 4 Sep 2019 03:53:00 -0700</pubDate><content:encoded><![CDATA[<h1>Dropping a Dynabook: A comic that turned from Science Fiction to Science Fact</h1><p>Some time around 1982, I saw an amazing comic on the wall of a <a href="https://en.wikipedia.org/wiki/Xerox_Alto">Xerox Alto</a> computer room at the <a href="https://en.wikipedia.org/wiki/MIT_Computer_Science_and_Artificial_Intelligence_Laboratory">MIT AI Lab</a>. Given the subject matter, I assume the comic was originally created at <a href="https://en.wikipedia.org/wiki/PARC_\(company\">Xerox PARC</a>), possibly as part of the <a href="https://en.wikipedia.org/wiki/Xerox_NoteTaker">NoteTaker</a> project, but can't find any trace of it on the web. I have recreated it from memory, below.</p><p>The comic is explaining the events that happen when a <a href="https://en.wikipedia.org/wiki/Dynabook">Dynabook</a> is accidentally dropped off the top of <a href="https://en.wikipedia.org/wiki/Half_Dome">Half Dome</a> in <a href="https://en.wikipedia.org/wiki/Yosemite_National_Park">Yosemite National Park</a>. Note that a <a href="https://keisan.casio.com/exec/system/1231475371">free-fall calculator</a> claims that it would take over 12 seconds for the Dynabook to hit the Yosemite Valley floor.</p><p>[![](https://1.bp.blogspot.com/-h-v2l19lnw4/XW8nTtT8bGI/AAAAAAAC8cY/E892AHN- cXw89B9-zUC5dgTHIAsxaz8vgCLcBGAs/s640/droppedDynabook.png)](https://1.bp.blogspot.com/-h-v2l19lnw4/XW8nTtT8bGI/AAAAAAAC8cY /E892AHN-cXw89B9-zUC5dgTHIAsxaz8vgCLcBGAs/s1600/droppedDynabook.png)</p><p>T+00.000 Dynabook accidentally dropped from top of Half Dome.<br><br>T+00.016 Dynabook notices that<br><br> <em> It can't sense its user. </em> It is in zero gravity. * There is a 200 MPH wind from below.</p><p>Dynabook concludes that it is falling.<br><br> <em> Turns off the display to save memory. </em> Opens a radio connection to El Capitan radio tower. * Begins backing up the user's recent changes.</p><p>T+05.000 Dynabook hits a glancing blow to the side of Half Dome, breaking 3 of its 6 CPUs. The Dynabook reconfigures itself to continue working with the 3 remaining CPUs.<br><br>T+10.000 User data backup finishes.<br><br>T+11.000 Dynabook orders the user a replacement Dynabook.<br><br>T+12.000 Dynabook turns on an emergency locator beacon.<br><br>T+12.816 Dynabook smashes into the rocks at the bottom of Half Dome.<br><br>--------=====--------<br><br>When I first read this comic, probably a few years after it was created, it was total Science Fiction:<br><br><br> <em> Laptops weighed 25 pounds, contained miniature CRT monitors, and had to be plugged in to operate. </em> Personal computers had single cores and no environmental sensors. <em> Mobile phones weighted multiple pounds and didn't have cellular modems. Yosemite Valley didn't have cell service. </em> Simply connecting to the Internet (then called the ARPANET) took over 30 seconds. <em> Data flowed at a blistering 1440 bytes per second. </em> Nobody in their right mind would take a fragile laptop to the top of Half Dome. * Commercial use of the Internet was prohibited. While hobbyists bought and sold stuff, large companies, even computer makers, were not set up to allow products to be ordered over the Internet.</p><p>Over the years, each time I remembered this comic, I realized that it was becoming more and more science fact. By now, 40 years later, almost all of the events mentioned in this comic could actually happen as described.<br><br>To my mind the only unlikely events are:<br><br><br> <em> In 1979 frame buffers were a significant fraction (more than 75%) of a computer's RAM, so it made sense to turn off the display to save memory. Today we would still turn off the display, but we would do it to save power. </em> In 1979 Moore's Law hadn't been in effect as long. A multi-core CPU had to be made out of separate CPU chips, such that one or more cores could plausibly be damaged without destroying all the chips. Today we <em>do</em> use multiple cores (indeed, typically 6-8), but they are all on one giant chip.</p><p>The only remaining Science Fiction idea is the rescue beacon. [But Apple is rumored to be implementing that this year.](https://9to5mac.com/2019/09/03 /apple-glasses-explained-and-how-iphone-connected-item-trackers-will-work/)</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20190715_Pro_No_Mo_-_I_don't_really_need_a_MacBook_Pro_machine_for_hobby_programming</guid><title>Pro No Mo - I don't really need a MacBook Pro machine for hobby programming.</title><description></description><link>https://jackpal.github.io/posts/blogger/20190715_Pro_No_Mo_-_I_don't_really_need_a_MacBook_Pro_machine_for_hobby_programming</link><pubDate>Mon, 15 Jul 2019 18:32:00 -0700</pubDate><content:encoded><![CDATA[<h1>Pro No Mo - I don't really need a MacBook Pro machine for hobby programming.</h1><p>I've been trying to decide which Apple laptop to buy for hobby programming.<br><br>I'm leaning towards the cheapest laptop Apple sells, the 2019 MacBook Air. As far as I can tell, is fine for my current needs.<br><br>I specced out a more powerful and future-proof laptop, a 2019 MacBook Pro with 2x the RAM and SSD storage, but it was 60% more expensive.<br><br>I think it makes more sense for me to buy the cheaper laptop today, and plan on replacing it sooner. Especially because I have a lot of family members who would be fine with the cheaper laptop as a hand-me-down.<br><br>It does feel a little weird to decide that I don't need a "Pro" machine. When it comes down to it, Xcode, a SSD and a retina display are all the "Pro" I need for hobby programming, and Apple has made those features available in the budget Air line.<br><br><br></p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20190513_The_way_I_solved_my_daughter's__iMessage_Activation__error</guid><title>The way I solved my daughter's "iMessage Activation" error</title><description></description><link>https://jackpal.github.io/posts/blogger/20190513_The_way_I_solved_my_daughter's__iMessage_Activation__error</link><pubDate>Mon, 13 May 2019 03:17:00 -0700</pubDate><content:encoded><![CDATA[<h1>The way I solved my daughter's "iMessage Activation" error</h1><p>Writing these notes in case they help someone.<br><br>My daughter recently tried to add her Apple ID to her iPhone'sApple Messages app. (Settings &gt; Messages &gt; Send &amp; Receive &gt; Add Apple ID)<br><br>When she tried this, she got a dialog box where she could type in her Apple ID and password. After a 15 second delay she got an error dialog box:<br><br>iMessage Activation<br> An error occurred during activation.<br> Try again<br><br>She got a similar error message if she tried to activate FaceTime:<br><br>FaceTime Activation<br> An error occurred during activation.<br> Try again<br><br><br><br>I searched the Internet, and tried the various remedies that Apple and others suggested:<br><br><br> <em> Reboot Phone. </em> Make sure the phone can receive SMS messages. <em> Enable/disable iMessage and FaceTime. </em> Log the iPhone out of iCloud and log back in again. <em> Visit icloud.com and check the iCloud account to see if there's any warnings or errors. </em> Update the phone OS to the latest release version of iOS. <em> Try to register with WiFi enabled but Cell disabled. </em> Wait 24 hours and try again.</p><p>Having exhausted the home remedies, I contacted Apple Support by phone. Apple Support listened sympathetically, and ran me through the same steps, it roughly the same order. They also did a little bit of checking on their own of the Apple ID account to see if there were any issues.</p><p>They couldn't find anything wrong, and they suggested that I contact my carrier.</p><p>I contacted my carrier, T-Mobile, and they ran me through the same steps as Apple. They also had me check out my phone's ability to connect to the Internet for Data and SMS. They had me turn off my phone for a minute, so they could update my phone's SIM. Unfortunately, nothing they tried helped.</p><p>In the end, what worked was to admit defeat. I had my daughter create a new Apple ID. She was able to use the new Apple ID to log into iMessage without any problem.</p><p>So far the drawback of this solution seem to be:</p><ul><li>My daughter lost everything she had stored in iCloud.<ul><li>For many people this would be a serious issue.</li><li>Luckily my daughter does not use iCloud at all.</li><li>She uses Google services, like gmail, Google Docs and Google Photos, that do not depend on iCloud.</li></ul></li><li>My daughter has to re-add all her Contacts to her new Apple ID.<ul><li>My daughter lost some game progress in some of her Game Center aware video games.</li></ul></li></ul><p>My guess is that the problem was on Apple's end. The symptoms and cure seem to indicate that my daughter's old Apple ID account was messed up in some small way, and Apple's diagnostic systems were not detailed enough to detect or correct the issue.</p><p>So, anyway, I wrote this up to offer one more home remedy for people suffering from the "An error occurred during activation" message when trying to log in to iMessage. That message could have one of a number of different causes. If you are seeing it, please try the simpler remedies first, and please contact Apple Support (and your phone carrier's support) for help. But if everything else fails, be aware that for some users such as my daughter, one solution was to switch to a new Apple ID.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20181122_2018_iPad_Pro_129__Report</guid><title>2018 iPad Pro 12.9" Report</title><description></description><link>https://jackpal.github.io/posts/blogger/20181122_2018_iPad_Pro_129__Report</link><pubDate>Thu, 22 Nov 2018 19:27:00 -0800</pubDate><content:encoded><![CDATA[<h1>2018 iPad Pro 12.9" Report</h1><p>After weeks of research and thought, I bought a iPad Pro 12.9" 3rd Generation.</p><p>My impressions, based on a week's use:</p><ul><li>It's too expensive, especially once you include the pencil and keyboard case.<ul><li>It's a significant improvement over the 1st generation iPad Pro 12.9".<ul><li>It's physically much smaller.</li><li>The new keyboard is nicer.</li><li>The new pencil's magnetic charger makes it much more useful than before, because now it's always charged when I want to use it.</li></ul></li><li>Flaws<ul><li>The magnets holding the pencil to the iPad are too weak. It's easy to knock the pencil off the edge of the iPad when picking it up or carrying it.</li><li>When the keyboard case is folded back, your hands touch the keys. This feels weird at first.</li><li>The hardware is held back by iOS 12 and Apple App Store limitations.</li></ul></li></ul></li></ul><p>FWIW I think for most people the ordinary 2018 iPad, with a Logitech Crayon, would be a better purchase.</p><p>But I do enjoy using it!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20181122_Solving_the_anemone_puzzle_in_Botanicula</guid><title>Solving the anemone puzzle in Botanicula</title><description></description><link>https://jackpal.github.io/posts/blogger/20181122_Solving_the_anemone_puzzle_in_Botanicula</link><pubDate>Thu, 22 Nov 2018 18:50:00 -0800</pubDate><content:encoded><![CDATA[<h1>Solving the anemone puzzle in Botanicula</h1><p><a href="https://en.wikipedia.org/wiki/Botanicula">Botanicula</a> is a whimsical graphical adventure game for the iPad and other computers. One of the puzzles near the end of the game requires a bit of thinking to solve. When I came upon it, after a couple of hours of play, I was too tired to think. So I wrote some code to brute-force the solution. I'm unreasonably pleased that it worked the first time. Here's the code, cleaned up and commented:<br><br><br><br></p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20181107_Computer_History_Museum_Oral_Histories</guid><title>Computer History Museum Oral Histories</title><description></description><link>https://jackpal.github.io/posts/blogger/20181107_Computer_History_Museum_Oral_Histories</link><pubDate>Wed, 7 Nov 2018 15:17:00 -0800</pubDate><content:encoded><![CDATA[<h1>Computer History Museum Oral Histories</h1><p>The <a href="http://www.computerhistory.org/collections/oralhistories/">Computer History Museum Oral Histories</a> are a wonderful project. They are deep, long, interviews with many different programmers. Lots of never-before-made-public details about important projects.<br><br>For example, this oral history by Oral History of Kenneth Kocienda and Richard Williamson goes into details of how iOS was designed:<br><br><br><br><br><br><br>Or if you prefer PDFs:<br><br><a href="http://archive.computerhistory.org/resources/access/text/2018/07/102740223-05-01-acc.pdf">Oral History Part 1</a><br><br><a href="http://archive.computerhistory.org/resources/access/text/2018/07/102738582-05-01-acc.pdf">Oral History Part 2</a><br><br>One of the interesting things I found out was that there was an attempt to use HTML/Web APIs to write iPhone apps, and that for the first two or three iOS releases some of the apps, including the Stocks and Weather apps were implemented as HTML/Web apps.<br><br></p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20181107_Trying_to_decide_what_personal_computer_to_buy_in_2018</guid><title>Trying to decide what personal computer to buy in 2018</title><description></description><link>https://jackpal.github.io/posts/blogger/20181107_Trying_to_decide_what_personal_computer_to_buy_in_2018</link><pubDate>Wed, 7 Nov 2018 15:09:00 -0800</pubDate><content:encoded><![CDATA[<h1>Trying to decide what personal computer to buy in 2018</h1><p>I'm thinking of buying a new personal computer. I'm writing this essay to crystalize my thoughts on what to buy.<br><br>Why I don't currently have a personal computer:<br><br>I must have bought twenty personal computers over the years, starting from an <a href="https://en.wikipedia.org/wiki/Exidy_Sorcerer">Exidy Sorcerer</a> in 1978 and ending with a 13" Macbook Pro in 2013.<br><br>But since 2014 I've been without a personal computer of my own. The Macbook Pro's been taken over by my son. I've got accounts on all my family's computers, but when they're all in use I'm reduced to using my work laptop.<br><br>My company has a "don't use company resources for personal projects" policy. Since 2014 I've complied with this mostly by being too busy/lazy/distracted to do any personal projects. :-) But now that I'm helping my kids with their programming projects, it's time to once again consider a personal computer.<br><br>Why not an iPad Pro?<br><br>I bought the original 12.9" iPad Pro and tried using it as a personal computer. It didn't work out, because I like to program apps, and the iPad Pro doesn't let you do much programming. And even if it did, the iPad Pro keyboard is not very good for typing.<br><br>The 2018 model iPad Pros have great hardware, including an improved keyboard, but they still don't allow programming apps.<br><br><br><br>What's my budget?<br><br>To put things in perspective, my first PC cost over $3,500 in current dollars, my first Mac was $7,000 in current dollars and my most expensive personal computer ever was a Macintosh IIfx at $20,000 in current dollars. I didn't actually pay $20,000. I was an Apple employee at the time, and they had a "Loan to Own" program with extremely generous employee discounts. My most recent personal computer cost $1,650 in current dollars.<br><br>So, all things being equal, I'd say my budget is in the $500-$2,500 range. Perhaps more if there's a really big benefit.<br><br>What do I want to do with it?<br><br> <em> iOS programming </em> Unix programming <em> Web surfing </em> Content creation</p><p>I don't need a high end GPU. I'm not planning on using it for PC gaming or local machine learning.</p><p>Laptop or Desktop?<br><br>Over the past few years I've been living the laptop lifestyle at both work and home. I like being able to take my laptop on trips. Recently it's been useful to take my laptop around the house to my different kids as I help them with their programming projects.<br><br>So for me I think the laptop portability outweighs the bigger screen and better price/performance of a desktop.<br><br>One use case: iPhone development. This typically requires the ability to charge, and debug a USB-attached device at the same time.<br><br>The case for an iMac Retina.<br><br>Recently I've been using an iMac Pro at work. I really enjoy:<br><br><br> <em> Speed of compilation. </em> Beautiful 5G screen. <em> Large number of ports. </em> Clean industrial design.</p><p>That makes me think that maybe a iMac 5G might be a reasonable choice.</p><p>Hardware specs:</p><p>+ 16 GB RAM</p><p>+ 512 GB SSD</p><p>New or used?<br><br>I don't mind used, but it needs to be new enough to run the current version of Xcode.<br><br>Upcoming changes:<br><br>+ New macbook and iPad Pro TBA October 30th.<br>+ iMac 5G spec bump October/Nov?<br>+ New mac mini "pro" some time this year.<br>+ New mac pro some time 2019<br><br>Some possible configs<br><br>iMac 5K 32GB/512GB (includes third party RAM upgrade): $2400<br><br>Macbook Pro 15 32/512: $3000<br>Macbook Pro 13 16/512 $2200<br>Macbook Air 13 8/512 $1400 (not retina)<br><br>Hackintosh AMD 16/500: $900 (reuse old monitor.)<br>Hackintosh laptop $600-$900<br><br>Nothing, keep using current hardware. This is a good option during the school year.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20180731_Girls_Who_Code_iPhone_App_Development_Course_Review</guid><title>Girls Who Code iPhone App Development Course Review</title><description></description><link>https://jackpal.github.io/posts/blogger/20180731_Girls_Who_Code_iPhone_App_Development_Course_Review</link><pubDate>Tue, 31 Jul 2018 18:24:00 -0700</pubDate><content:encoded><![CDATA[<h1>Girls Who Code iPhone App Development Course Review</h1><p>One of my daughters recently took the <a href="https://girlswhocode.com/campus-iphone/">Girls Who Code iPhone App Development</a> course.<br><br>This was a two-week summer course, taught 9 am to 4 pm in a high school computer science classroom. The first week the girls were taught the basics of the Swift programming language and iPhone App development. The second week the girls formed into 4-person teams and wrote their own iPhone apps.<br><br>The girls learned how to use modern software development tools like Stack Overflow, GitHub, and Trello.<br><br>Much of the instruction during the first week was by way of working through examples from a private Girls Who Code website.<br><br>What worked well:<br><br> <em> The girls learned the basics of iOS app development, especially the Interface Builder. </em> The girls learned how to work in small teams, how to design apps, how to meet deadlines, etc. <em> The girls were motivated by the assignment of writing an app to improve society/the world. </em> The girls learned how to present their final project to a group.</p><p>What could have been better:</p><ul><li>From watching to the final presentations, it seems like all the teams had trouble merging their changes. Every team reported that they had "lost" files and changes.<ul><li>I think an hour spent explaining how to deal with git merges and conflicts, and more tutor hand-holding during merging would be helpful.</li></ul></li><li>The course instructors were not familiar with advanced iOS programming, and could not help teams that wanted to explore more advanced iOS techniques.</li></ul><p>Overall I think this was a well run course, with good value for money. It would be appropriate for a high school girl who was already comfortable programming in Python or Java, and was looking to learn the basics of iOS programming.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20180520_On-the-cheap_Machine_Learning,_revisited</guid><title>On-the-cheap Machine Learning, revisited</title><description></description><link>https://jackpal.github.io/posts/blogger/20180520_On-the-cheap_Machine_Learning,_revisited</link><pubDate>Sun, 20 May 2018 18:19:00 -0700</pubDate><content:encoded><![CDATA[<h1>On-the-cheap Machine Learning, revisited</h1><p>A short update on my [On the Cheap Machine Learning](https://grammerjack.blogspot.com/2017/06/on-cheap-machine-learning- computer.html) blog post. After almost a year of use, I’m still pretty happy with the setup. The hardware has worked well. I haven’t done as much independent ML research as I had hoped, but I have contributed many hours of night-time GPU cycles to the <a href="https://github.com/gcp/leela-zero">Leela Zero</a> open-source Go-game-AI project. I don’t think I would change anything about the build, and there’s nothing about it I want to upgrade yet.<br><br>However, in the past year a new option has appeared for on-the-cheap machine learning: Google’s <a href="https://colab.research.google.com/notebooks/welcome.ipynb">Colaboratory</a> project. Colaboratory is a free web-based IDE for writing machine learning applications. What’s especially cool about it is that comes with access to a cloud-based GPU. The GPU they provide is the NVIDIA K80, which is not the fastest GPU, but it’s still plenty fast for experimenting with machine learning. [Disclosure: I work for Google, but not in any groups related to Google Colaboratory.]<br><br>Colaboratory puts machine learning within the reach of anyone with a modern web browser, even if that browser is on a device (like a laptop, tablet, or even phone) that doesn’t have a high-end GPU.<br><br>I find myself using Colaboratory instead of my own desktop computer simply because my son’s often using my desktop computer for schoolwork, YouTube and playing games.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20171231_What_I_learned_in_2017</guid><title>What I learned in 2017</title><description></description><link>https://jackpal.github.io/posts/blogger/20171231_What_I_learned_in_2017</link><pubDate>Sun, 31 Dec 2017 00:08:00 -0800</pubDate><content:encoded><![CDATA[<h1>What I learned in 2017</h1><h2>Shipping an Audio Pipeline</h2><p>In 2017 I shipped a new audio rendering pipeline for the iOS version of <a href="https://itunes.apple.com/us/app/google-play-music/id691797987?mt=8">Google Play Music</a>. I use it to render a particular flavor of fragmented MP4 that we use in the Google Play Music streaming music service. It was quite a learning experience to write and ship real-time audio code on iOS.<br><br>If you are looking to write an audio pipeline for iOS, I highly recommend basing it on <a href="https://github.com/TheAmazingAudioEngine/TheAmazingAudioEngine2">The Amazing Audio Engine 2</a>. Core Audio is a powerful library with an peculiar API. TAAE2 provides a much nicer API on top of Core Audio, without adding much overhead.<br><br>I had designed and implemented much of my new audio pipeline in 2016, but 2017 was the year that I deployed the pipeline to production.<br><br>I learned that shipping an audio rendering pipeline comes with a long tail of bugs, most of which have the same symptom: "I was listening to a song when it stopped". I was able to find and fix most of my bugs by using a combination of:</p><ul><li>Great base libraries. (TAAE2 and Core Audio)<ul><li>A clean, well-thought-out design.</li><li>Unit tests.</li><li>Assertions.</li><li>Playback error logging that is aggregated on the server side.</li><li>A/B testing. (Between different versions of my audio renderer code.)</li><li>Excellent bug reports from alpha users.<ul><li>My boss and my boss's boss's boss were the two most prolific bug reporters.</li><li>Several other alpha users went out of their way to help me diagnose bugs that affected them.</li></ul></li></ul></li></ul><p>The error logging and A/B testing together gave me the confidence to roll out the feature, by showing how well it performed compared to the previous renderer stack.</p><h2>Learning a new code base</h2><p>In 2017 I joined the YouTube Music team to work on the iOS version of <a href="https://itunes.apple.com/us/app/youtube-music/id1017492454?mt=8">YouTube Music</a>, which meant that I had to get up to speed on the YouTube Music code base. It's a large complicated app. I found it difficult to get traction.<br>What finally worked for me was giving up my quest for general understanding. I just rolled up my sleeves and got to work fixing small bugs and adding small features. This allowed me to concentrate on small portions of the program at a time, and also provided a welcome sense of progress. My understanding of the overall architecture has grown over time.</p><h2>Learning Swift and UIKit</h2><p>In 2017 I audited both the <a href="https://itunes.apple.com/us/course/developing-ios-10-apps-with-swift/id1198467120">iOS 10</a> and <a href="https://itunes.apple.com/us/course/developing-ios-11-apps-with-swift/id1309275316">iOS 11</a> versions of the Stanford iOS programming class. In past years I've just watched the lectures. This year I actually did the programming assignments. These classes gave me a thorough understanding of Swift and UIKit. I felt they were well worth my time.</p><p>The reason I audited both the iOS 10 and iOS 11 versions of the course is that changes to the Swift language meant that the final programming assignment of the iOS 10 version of the class can't be completed using Xcode 9. I was only able to finish the first half of the iOS 10 version of the course. When the iOS 11 version came out in December, I was able to resume my studies. I've done the first 3 problem sets, and hope to complete more before the end of my Christmas / New Years' Day holiday.</p><h2>Learning Machine Learning</h2><p>I am fascinated by the recent advances in machine learning, especially the <a href="https://deepmind.com/">DeepMind</a> AlphaGo and Alpha Zero programs.</p><p>In 2016 I built a modest home PC capable of doing machine learning, but it sat idle for most of 2017. I haven't been able to do much with machine learning other than read papers and run toy applications. I am contributing computer cycles to the <a href="https://github.com/gcp/leela-zero">Leela Zero</a> crowd-sourced Go player inspired by AlphaGo.</p><p>As a long-time client-side developer, it's frustrating that there's no "UI" to machine learning, and the feedback loop is so long. I'm used to waiting a few minutes at most to see the results of a code change. With machine learning it can take hours or days.</p><p>It is also frustrating that there are so many different toolkits and approaches to machine learning. Even if I concentrate on libraries that are built on top of Google's TensorFlow toolkit, there are so many different APIs and libraries to consider.</p><h2>Learning to let go of personal computing</h2><p>In 2017 I continued to adapt to the decline of the personal computer. I am gradually retiring my local, personal computer based infrastructure, and adopting a cloud-based mobile phone infrastructure.<br><br>I'm surprised how smoothly the transition has gone. I still have laptops and PCs around my house, but the center-of-gravity for computer use in my family is continuing to shift to phones.<br>I'm happy that I'm spending less time on computer maintenance.</p><h2>Looking forward to 2018</h2><p>My engineering learning goals for 2018 are:</p><ul><li>Finish the Stanford iOS 11 programming course.<ul><li>Write a small machine learning app.</li><li>Help my kids improve their programming skills.</li></ul></li></ul><p>Hat tip to <a href="https://twitter.com/patio11/status/946910434887471104">Patrick McKenzie</a> for the writing prompt.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20170903_The_Modern_Family's_Guide_to_Technology_to_take_on_a_European_Vacation</guid><title>The Modern Family's Guide to Technology to take on a European Vacation</title><description></description><link>https://jackpal.github.io/posts/blogger/20170903_The_Modern_Family's_Guide_to_Technology_to_take_on_a_European_Vacation</link><pubDate>Sun, 3 Sep 2017 05:13:00 -0700</pubDate><content:encoded><![CDATA[<h1>The Modern Family's Guide to Technology to take on a European Vacation</h1><p>This summer I took my Seattle-based family of five for a three-week trip to Europe. We had been promising the trip to our kids since they were little, and this year we were finally able to go. We had a wonderful time!<br><br><a href="https://3.bp.blogspot.com/-k_fpgCLofyw/WauhiBklkqI/AAAAAAACGBQ/NytdvgY1jOYsQ4NPFgg5m7or14PDmcXzACLcBGAs/s1600/IMG_4574.JPG"><img src="https://3.bp.blogspot.com/-k_fpgCLofyw/WauhiBklkqI/AAAAAAACGBQ/NytdvgY1jOYsQ4NPFgg5m7or14PDmcXzACLcBGAs/s640/IMG_4574.JPG"/></a><br>---<br>Using our phones at the Eiffel Tower<br><br>Here are my tech-related traveling tips.<br><br><strong>Disclaimer:</strong> I am not being paid to write this, and there are no affiliate links. I'm writing this to help me remember my trip, and in the hope that it will be helpful to other families (and maybe even couples and individuals) planning similar trips.<br><br>## Hardware Tips</p><h3>Take your mobile phones</h3><p>Take one modern mobile phone per person. Android, iPhone, either is fine, but you'll want something with a SIM slot and nice camera.<br><br>### Leave your laptops at home</p><p>I didn't take any laptops with me, and I was able to do everything I needed to do using just my mobile phone. It was a relief to not have to lug around a laptop.</p><p>A few times I had to request the desktop version of a web site, but for the most part, the mobile phone worked fine for both apps and web browsing.</p><p>Obviously I didn't do any long-form writing on my phone.</p><p>I suppose an iPad, Kindle, or Android tablet would be a possible alternative. It might be a compromise between a phone and a laptop. I didn't take any tablets on my trip.<br><br>### Leave your cameras at home</p><p>We didn't take any non-phone cameras with us. Our phone cameras were good enough for most pictures. (Note: if we were going on a wildlife safari to Africa, we'd still take "real" cameras, so we could use telephoto lenses. But for the kinds of pictures we wanted to take in Europe, phone-based cameras worked fine.)<br><br><strong>Tip:</strong> Most museums, and even most churches allowed people to use their phones to take pictures of the art. This is a welcome change from the "No cameras allowed" policy of the past.<br><br>[![](https://1.bp.blogspot.com/-nrM<em>kaFJMF8/WawO7KJMmzI/AAAAAAACGDE/shqYOfxyY- IDJ7Ww3BxZfe0LjTjbloZVgCLcBGAs/s640/IMG</em>4653.JPG)](https://1.bp.blogspot.com/-nrM<em>kaFJMF8/WawO7KJMmzI/AAAAAAACGDE /shqYOfxyY-IDJ7Ww3BxZfe0LjTjbloZVgCLcBGAs/s1600/IMG</em>4653.JPG)<br>---<br>The well-protected Mona Lisa<br><br><br>### International USB Chargers</p><p>Take international-style USB chargers, that have built-in adapters for foreign wall power sockets. Look for chargers that have at least 2 USB ports, and ones that are rated for 2.1 amps, because that sort of charger will charge your phone faster than a lower-power charger. It's also nice to get a "pass through" charger, that lets you plug another electrical device into the charger. This is handy for hotel rooms with no extra outlets.<br><br>I didn't use [this particular model of charger](https://www.amazon.com/World- Travel-Power-Adapter-Charger/dp/B00QQW2O14), but it's the kind of charger I'm talking about.<br><br><strong>Tip:</strong> Many USB chargers have ludicrously bright power lights. Before you leave home, cover the power lights with black electrical tape. Otherwise they'll keep you awake at night in the hotel room.<br><br>When traveling in the US I take a larger 6-port charger, so that I can charge the whole family's devices from one hotel power outlet. (And in my car I use a 4-port cigarette lighter charger.) But in Europe, because we were often on trains with per-seat power outlets, it was more convenient to use multiple 2-port USB chargers.<br><br>### Take extra chargers and USB cables and ear buds</p><p>Take extra USB chargers and charging cables and ear buds. They will get lost and break. It's convenient to have spares. Don't bring a too many, though. If you run out, USB chargers and cables and ear buds are available for low cost in vending machines and stores across Europe.<br><br>### Take battery packs</p><p>Take a cheap [USB Battery Pack](http://thewirecutter.com/reviews/best-usb- battery-packs/) with you. This will ensure you always have at least one working phone, no matter how long you stay out, or how much you use maps / web / photos. In fact, consider taking one pack for every two family members.<br><br>### Phone cases</p><p>Put inexpensive rugged phone cases on your phones, to reduce damage from accidental drops. My family is partial to Otterbox and Incipio cases, but shop around to find something you like.<br><br>### Selfie sticks</p><p>You should swallow your pride and take a selfie stick. It makes it so much easier to take good group photos. Be aware of your surroundings, and don't annoy your fellow tourists.</p><p>I confess that I was too proud to take a selfie stick, and as a result I have very few photos that include everyone in my family. I regret that!<br><br><a href="https://3.bp.blogspot.com/-AfQAZRUx4-g/WawWmCMoZbI/AAAAAAACGFQ/yOtxZKHzsW49aVkW0R8-TJE9zwjI0kKhACLcBGAs/s1600/IMG_3389.JPG"><img src="https://3.bp.blogspot.com/-AfQAZRUx4-g/WawWmCMoZbI/AAAAAAACGFQ/yOtxZKHzsW49aVkW0R8-TJE9zwjI0kKhACLcBGAs/s640/IMG_3389.JPG"/></a><br>---<br>Proof you can take a photo of your whole family without using a selfie stick. But posing options are limited!<br><br><br>### Use a mesh bag to organize your electronics</p><p>As any backpacker knows, small mesh bags are invaluable for keeping track of small items. Buy a mesh bag from a camping store (or a laundry store) and use it to store all your chargers and cables. For my family, something that worked well was for me to carry the whole family's chargers and cables. I'd hand them out at the beginning of a train or plane trip, and collect them at the end of the trip.<br><br>## Phone service</p><p>You don't have to have phone service for your trip. You can get pretty far just using WiFi.</p><p>However, if possible, I recommend that you get mobile phone service for at least one of your family's phones. It is tremendously useful and convenient to have for maps, search, and translation.</p><h4><strong>Free International Roaming</strong></h4><p>If you have T-Mobile, get their <a href="https://www.t-mobile.com/optional-services/roaming.html">international roaming</a> plan added to your account before you go. It gives unlimited data and texts in many countries. Bonus: The plan only promises 2G speeds, but we found in several places we were getting much higher speeds. My guess is that some countries have turned off 2G network access, and in those countries you're getting the higher 3G or 4G speed for free. Presumably this extra speed won't last forever, but it's a nice benefit for now.<br><br>### Expensive International Roaming</p><p>My impression is that other US carriers have fairly expensive international roaming plans. But since I'm not a customer, I don't know the details. Check with your carrier -- maybe they have a plan that fits your needs and budget.</p><h3>Buying a local SIM while in Europe</h3><p>If you don't have T-Mobile, most European countries have relatively inexpensive short-term SIMs available for purchase at kiosks in airports. You'll need to have an unlocked phones to do this.<br><br>#### Potential problems with older Verizon and Sprint phones</p><p>If you have an old, pre-4G, Verizon or Sprint phone, that doesn't have a SIM slot, you will have trouble using European phone networks.</p><h3>Make sure your phone is carrier unlocked</h3><p>If you bought your phone from a mobile carrier, it's probably locked to their network. That makes it difficult to use with another network's SIMs. Before your trip, contact your carrier and ask them to unlock your phone. They will usually be willing to unlock your phone, but it depends upon the carrier and the terms of your contract. You may have to pay an unlocking fee.</p><h3>If all else fails, consider buying a travel phone</h3><p>If you can't unlock your phone, or if your phone doesn't have a SIM slot, consider buying a phone just for the trip. As of the fall of 2017 you could get a used unlocked iPhone 5s 16GB for $125. That model phone would make a good travel phone. There are similar deals available on older high-end Android phones.</p><h3>Receiving text messages while on vacation</h3><p>If you are using a country-specific SIM while you're traveling, you may run into a problem. Any text message sent to your normal phone number won't get to your phone while you are using a different SIM in the phone. This could be a problem for you, because many online services want to send you a text message to verify your identity. You won't receive the text message while you're using a different SIM.</p><p>The simplest way to deal with this problem is to cross your fingers, and hope that you don't need to receive texts while you're on vacation.</p><p>The second-simplest way is to sign up for T-Mobile international roaming, at least if you're already a T-Mobile customer.</p><p>If you're a customer of another phone company, you might consider signing up one of your phones for an international roaming plan, that lets you receive and send texts to/from your US phone number while traveling. Even if it's expensive, it may save you a lot of trouble if you need to receive a text message while you're on vacation.</p><p>If you're an advanced techie, you could consider signing up for a VoIP service (like <a href="https://voice.google.com/">Google Voice</a>), which allows you to send and receive text messages over the web. It can also be set up to forward your voice calls from your main number to your travel SIM number. But using a VoIP service is complicated. It's probably more trouble than it is worth for most people.</p><h2>WiFi, power, and mobile phone coverage</h2><p>Here's what I found in my trip, which covered Spain, Paris, and Frankfurt.</p><p><strong>WiFi</strong></p><p>Most tourist hotels and apartments have some form of WiFi. Usually it's free with your room, although some high-end or business oriented hotels will charge you. Hotel WiFi can be slow and flakey.</p><p>Many tourist restaurants have free WiFi. Ask your server for the password.</p><p>Many museums have free WiFi. A few museums have QR codes on exhibits that you can scan to learn more about the exhibit item.</p><p>Some towns have some form of public WiFi, but I was never able to get it to work.<br><br>Most airports have free WiFi.</p><p>Some high-speed trains have WiFi, either free or paid.</p><p>Unfortunately there is currently no transatlantic plane flight WiFi service. I think it's a technology limitation.</p><p><strong>USB / wall power</strong></p><p>USB and wall power plugs are available at each seat on most planes and high- speed trains. The wall power plugs are European-standard plugs and voltage.<br><br>Just as in the US, many airports have at least a few USB ports and electrical outlets scattered around the waiting area.</p><p>In Madrid I even found USB charge ports installed on one of of the transit buses!</p><h4>Mobile phone coverage</h4><p>Mobile phone service is very good in major cities. Mobile phone service can be spotty in the countryside.<br><br>[![](https://4.bp.blogspot.com/-zlVImmTYVH8/WawTv2MkZ9I/AAAAAAACGE0 /EoFwkZr66EYDK- dq8IdrcggH5r75b1NxQCLcBGAs/s640/IMG<em>0926.jpg)](https://4.bp.blogspot.com/-zlVImmTYVH8/WawTv2MkZ9I/AAAAAAACGE0 /EoFwkZr66EYDK-dq8IdrcggH5r75b1NxQCLcBGAs/s1600/IMG</em>0926.jpg)<br>---<br>Lunch with phones on a Spanish high speed train<br><br><br>## Keeping your phones from being stolen</p><p>Unfortunately, pickpockets and thieves are common in tourist areas of major European cities. Your phone is an easy target. Thieves like to steal phones because:</p><ul><li>They're easy to steal.<ul><li>They're valuable.</li><li>Older phones can usually be unlocked, erased and sold.</li><li>Newer phones, that can't be unlocked, can still be stripped for parts (battery and screen) that can be sold.</li><li>SIMs can be taken out of both old and new phones<ul><li>An unlocked SIM can be used to charge money to your phone bill.</li><li>An unlocked SIM can be used to receive texts sent to the SIM's phone number, useful for identity theft.</li></ul></li></ul></li></ul><p>You can take some steps to minimize the potential problems of theft:</p><h3>Take your older phones</h3><p>If your family has several generations of phones laying around, consider taking the older phones. That way you won't feel as bad if they're broken, lost, or stolen. Of course you have to balance this against the benefits of taking your newest phones, which will have the best cameras.</p><h3>Wear anti-theft clothing</h3><p>Consider buying some <a href="https://www.clothingarts.com/">pickpocket-proof</a> pants. If you cary a purse or small bag, store your phone in a hard-to-get-into zippered internal pocket. Figure out a way of carrying your phone so that it's in front of you, where you can keep an eye on it. Some backpacks have phone pockets on the shoulder straps.<br><br>Don't ever leave your phone on a table in a public place.<br><br>### Turn on "Find my Phone"</p><p>Both Android and iPhone have an optional feature you can turn on to make it easier to find a lost phone. It's called <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.adm&hl=en">Find my Device</a> on Android, and [Find my iPhone](https://support.apple.com/explore/find-my- iphone-ipad-mac-watch) on iOS.</p><p><strong>Tip:</strong> Thieves know to power off stolen phones to prevent them from being tracked. But the feature is still handy for finding phones that are lost or misplaced rather than actually stolen.</p><h3>Put a passcode on your phone lock screen</h3><p>You should have at least a 4 digit passcode on your phone lock screen. In addition to keeping thieves from being able to erase your phone in order to resell it, this will make it harder for thieves to break into your phone to steal your identity.<br><br>### SIM Lock your phone SIM</p><p>Add a PIN to your SIM card. Having a PIN on your SIM is annoying, because you'll have to type the PIN to unlock your SIM every time you reboot your phone. But having a SIM lock can save you a lot of trouble and money if thieves steal your phone. Without a SIM lock, the thief can take the SIM card out of your phone, put it into another phone, and then charge hundreds of dollars to your phone account by calling for-pay telephone numbers.<br><br>Without a SIM lock, thieves can also put your phone's SIM into another phone to receive texts sent to your phone number. An ambitious thief could use your phone's SIM to hijack your online accounts.<br><br>### Know how to report a lost/stolen SIM to your phone carrier</p><p>If your phone is lost or stolen, you should report it to your phone carrier right away. If you've put a lock screen passcode on your phone and added a SIM lock, you probably will be OK. But there is always a chance that the thief has figured out a way to bypass those lock codes.</p><p><strong>Tip:</strong> Print out your phone account information (carrier customer service number, account number, your phone number, and the SIM serial number) and carry it with you on your trip. Keep that paper separate from your phone. (Do the same for your passports!)<br><br>## Keeping your accounts from being stolen</p><p>Be careful when you use public WiFi. Just as in the US, using public WiFi in Europe means it's possible for bad guys to listen in on the data being sent and received by your phone. Bad guys can even set up fake servers, that pretend to be Facebook, or Gmail, or your bank, and try to trick you into revealing your login name and password.</p><p>Just like in the US, there are things you can do to make it less dangerous to use public WiFi in Europe:</p><ul><li>Avoid using "high value" web sites, like your bank, from public WiFi.<ul><li>Avoid visiting "http" web sites from public WiFi. "https" web sites are more secure.</li><li>Use an up-to-date version of your phone's operating system.</li><li>Use up-to-date versions of your apps.</li></ul></li></ul><p><strong>Tip:</strong> Before you leave the US, consider turning on "two factor authentication" for important accounts. Two Factor Authentication will make it harder for identity thieves to impersonate you. However, there is a tradeoff. Most "two factor authentication" systems use text messages. This means you'll have to be able to receive the text messages while you're traveling, which means you'll have to set up international roaming for at least one of your phones.</p><h2>Essential apps</h2><p><strong>Tip:</strong> I work for Google in my day job, so the following list is a little Google-centric. 😇<br><br>### Google Docs</p><p>Use Google Docs [[App Store]](https://itunes.apple.com/us/app/google- docs/id842842640?mt=8) [[Play Store]](https://play.google.com/store/apps/details?id=com.google.android.apps.docs.editors.docs&amp;hl=en) to share a trip itinerary with your family. (You can also share an edited version with parents and neighbors.) An itinerary is a day-by-day list of what you are doing. Put in dates, cities, flight and train times, hotel contact info, and "must see/do" lists. Using a shared document makes it easier to keep the information up to date.</p><p><strong>Tip:</strong> Turn on "offline mode", which stores a copy of your documents locally on the phone, so that you can read and edit them even when you don't have internet access.</p><h3>Google Maps</h3><p>Google Maps [[App Store]](https://itunes.apple.com/us/app/google-maps- navigation-transit/id585027354?mt=8) [[Play Store]](https://play.google.com/store/apps/details?id=com.google.android.apps.maps) is hugely useful when traveling in Europe, not just for maps and navigation and transit directions, but also for local restaurant and attraction reviews. I felt like a local being able to read the auto-translated reviews of all the bakeries and grocery stores near my hotel.</p><p><strong>Tip:</strong> Download the area you're planning on visiting as an offline map. That way you can get around even if you don't have WiFi or phone service.</p><p><strong>Tip</strong> : Double-check opening hours, since Google Maps doesn't always list the correct opening hours, or account for local holidays, or restaurants being closed due to the owner's vacations.</p><p><strong>Tip</strong> : Google Maps lets you mark map locations using various icons. For example I found it helpful to mark my hotel on the map, as well as any sites I was interested in seeing in that city. That made it easier to plan my day, and to plan what to do next. I could quickly look at the map and see if there was anything within walking distance.<br><br>[![](https://1.bp.blogspot.com/-V2jafXc4vlY/WawQ1d2dRyI/AAAAAAACGEQ /O3gBZvTsox4YN-dNXa7U- UUxl<em>zBc7SqgCEwYBhgL/s640/IMG</em>4050.JPG)](https://1.bp.blogspot.com/-V2jafXc4vlY/WawQ1d2dRyI/AAAAAAACGEQ /O3gBZvTsox4YN-dNXa7U-UUxl<em>zBc7SqgCEwYBhgL/s1600/IMG</em>4050.JPG)<br>---<br>Vietnamese food was a welcome treat. Tastes just like back home! Restaurant found with Google Maps<br><br><br>### Google Photos</p><p>Google Photos [[App Store]](https://itunes.apple.com/us/app/google-photos- unlimited-photo-and-video-storage/id962194608?mt=8) [[Play Store]](https://play.google.com/store/apps/details?id=com.google.android.apps.photos&amp;hl=en) provides free unlimited photo and video storage. It also provides an excellent photo search feature.</p><p>The way my family used Google Photos during our trip was that we would take pictures and videos during the day. Then, each evening, when we returned to our hotel, we would bring the Google Photos app to the foreground, and keep it there while it uploaded the day's pictures and videos.</p><p>Some hotels had very slow WiFi, so sometimes we had to wait until we got to a better hotel to do this.</p><p>Once the upload had finished, we used the "Free up space" menu item to delete all the locally stored photos, which freed up phone storage for the next day's photos and videos.</p><p><strong>Tip:</strong> Whenever you pass a restaurant or store or attraction you're interested in visiting, take a picture of it. That can be helpful when you're trying to remember the name of the restaurant the next day.</p><h3>Google Translate</h3><p>Google Translate [[App Store]](https://itunes.apple.com/us/app/google- translate/id414706506?mt=8) [[Play Store]](https://play.google.com/store/apps/details?id=com.google.android.apps.translate&amp;hl=en) is able to translate many signs and menus. And while many people in Europe speak English, it is sometimes useful to be able to translate an English phrase into the local language.</p><p><strong>Tip:</strong> Use Google Translate to translate text on menus and sign. Tap on the camera icon in the app.</p><p><strong>Tip:</strong> Download a language pack for each country your visit. This enables Google Translate to work even when you don't have WiFi or phone service.</p><h3>Google Hangouts</h3><p>Google Hangouts [[App Store]](https://itunes.apple.com/us/app/hangouts/id643496868?mt=8) [[Play Store] ](https://play.google.com/store/apps/details?id=com.google.android.talk&amp;hl=en)is a free group messaging app.</p><p>My family used Google Hangouts group messaging to stay in touch, not only with each other, but also with grandparents back home. We got into the habit of sending a few highlight pictures and a short description of our day's events to the grandparents each day. It was easy to do, and afterwards we saved the conversation as a nice record of our trip.</p><p><strong>Tip:</strong> There are many other group messaging apps, use whatever one your family is comfortable with.</p><p><strong>Tip:</strong> Include grandparents in the group chat, it makes it more fun to have an audience to share your stories with.</p><p><strong>Tip:</strong> If you're staying at apartments rather than hotels, you may need to download a country-specific chat application to stay in touch with the apartment landlord. For example, WhatsApp is popular in some European countries.<br><br><a href="https://4.bp.blogspot.com/-fpQr6yUV30c/WawVWz36JFI/AAAAAAACGFA/1XY1r9M_tJEIR4whAL3E6qGTwGOOLhQZwCLcBGAs/s1600/IMG_4061.JPG"><img src="https://4.bp.blogspot.com/-fpQr6yUV30c/WawVWz36JFI/AAAAAAACGFA/1XY1r9M_tJEIR4whAL3E6qGTwGOOLhQZwCLcBGAs/s640/IMG_4061.JPG"/></a><br>---<br>We watched the Bastille Day fireworks on cable TV in our rental apartment in Paris, while in a group Hangout chat with my mom back in America, (She was watching on a live-stream.)<br><br><br>### Google Keep</p><p>Google Keep [[App Store]](https://itunes.apple.com/us/app/google-keep-notes- and-lists/id1029207872?mt=8) [[Play Store]](https://play.google.com/store/apps/details?id=com.google.android.keep&amp;hl=en) is a handy To Do list app. I used it to keep track of snippets of information about places I wanted to visit, as well as tasks to do when returning to the US.<br><br>### Google Trusted Contacts</p><p>Google Trusted Contacts [[App Store]](https://itunes.apple.com/app/trusted- contacts/id1225684042) [[Play Store]](https://play.google.com/store/apps/details?id=com.google.android.apps.emergencyassist&amp;hl=en) is a cross-platform app that lets you see where your family's phones are in real time. Handy for meeting up in a large museum, at least as long as GPS reception is good.</p><p><strong>Tip:</strong> If your family is 100% iPhone, Apple has a similar, iPhone-only "[Find my friends](https://itunes.apple.com/us/app/find-my- friends/id466122094?mt=8)" app.</p><h3>TripIt</h3><p>I had a <a href="https://www.tripit.com/pro">TripIt Pro</a> account through my workplace. It was helpful because it kept me up-to-date on the status of my airplane trips. Things like telling me when the plane had arrived, which gate it was at, and when the flight was delayed.</p><h3>TripAdvisor</h3><p><a href="https://www.tripadvisor.com/">TripAdvisor</a> is a good source of information on attractions and restaurants. Its UI is a little slow, and it tries hard to up- sell travel packages. But if you can get past all the advertising, it's a good resource for finding out what to see and do in a new city.</p><h2>Inessential, but fun, apps</h2><p>Consider using a diary app to keep track of you trip.</p><p>The text adventure game 80 Days [[App Store]](https://itunes.apple.com/us/app/80-days/id892812659?mt=8) [[Play Store]](https://play.google.com/store/apps/details?id=com.inkle.eightydays&amp;hl=en) is fun to play while traveling.</p><p>Similarly, Old Man's Journey [[App Store]](https://itunes.apple.com/us/app /old-mans-journey/id1204902987?mt=8) [[Play Store]](https://play.google.com/store/apps/details?id=es.brokenrul.oldmansjourney&amp;hl=en) and Burly Men at Sea[ [App Store]](https://itunes.apple.com/us/app/burly-men- at-sea/id962084488?mt=8) [[Play Store]](https://play.google.com/store/apps/details?id=com.brainandbrain.burlymenatsea&amp;hl=en) are fun quick travel-themed adventure games.</p><p>You can use your standard social and media apps while traveling. Instagram, YouTube, Google Books, Google Play Music, and so on. For media apps be sure to download media ahead of time, to be able to use the app while you don't have network connectivity.</p><h2>Buying attraction tickets online</h2><p>Most of the large museums and attractions in Europe have online ticket sales. The museum web site usually has an English-language page. You pay by credit card, and you receive the ticket as an email containing a PDF file. You are instructed to print out the PDF and bring it with you to the museum.</p><p>You don't need to print out the ticket, though. It is also possible to show the PDF on your phone screen. The ticket PDF usually has a bar code (or QR code), and the ticket-taker's bar code scanner will usually work with the phone screen just as well as on paper.<br><br><strong>Tip:</strong> Be sure to zoom in far enough that the individual stripes of the bar code are visible.<br><br><strong>Tip:</strong> Sometimes it's helpful to use your phone's web browser's "Request Desktop Site" mode, to request the desktop version of the web site. Sometimes the desktop web site has more information and/or features than the mobile version.</p><p><strong>Tip:</strong> Take cropped screen shots of your family's tickets' QR codes, and arrange them all together in your phone's photo gallery. This makes it easier at the ticket gate, since you can quickly swipe from ticket to ticket, to quickly present all your family's tickets to the ticket taker.</p><p>If you don't know how to take a screen shot on your phone, ask your kids. 😁</p><p><strong>Tip:</strong> Contact your credit card company before you travel, and let them know that you will be traveling to Europe. Doing this can help you avoid having your credit card declined due to unusual account activity.</p><h2>Conclusion</h2><p>Mobile phones are essential for modern traveling. The last time I went to Europe, over 20 years ago, I had to use paper guide books and pay phones and post cards and a film camera. Revisiting Europe today, with mobile phones, it was so much easier to get around, and I think I saw more things. I certainly took more pictures!</p><p>If you read this far, I assume you're planning your own trip to Europe. I hope that this article gave you some good information to help you have a good trip. I hope you and your traveling companions have a great time!</p><p><a href="https://1.bp.blogspot.com/-RDrRsczdtHQ/WaujLl00mlI/AAAAAAACGB0/-9DVGqaM3CkJua_ECZ5X_TfLBde_3RTCQCLcBGAs/s1600/IMG_2494.jpg"><img src="https://1.bp.blogspot.com/-RDrRsczdtHQ/WaujLl00mlI/AAAAAAACGB0/-9DVGqaM3CkJua_ECZ5X_TfLBde_3RTCQCLcBGAs/s640/IMG_2494.jpg"/></a><br>---<br>A family we met in Madrid<br><br><br><br></p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20170901_Family_Computers,_2017_Edition</guid><title>Family Computers, 2017 Edition</title><description></description><link>https://jackpal.github.io/posts/blogger/20170901_Family_Computers,_2017_Edition</link><pubDate>Fri, 1 Sep 2017 22:51:00 -0700</pubDate><content:encoded><![CDATA[<h1>Family Computers, 2017 Edition</h1><p>A quick update on my family's computers, as we start the 2017-2018 school year<br><br>## My family's current setup</p><ul><li>Google WiFi<ul><li>iPhones</li><li>Macbooks</li><li>Windows Gaming PC</li><li>School-provided Windows convertible tablets</li><li>iPads</li><li>AppleTV</li><li>Wii</li><li><a href="https://www.google.com/chromecast/speakers/">Chromecast Audio</a></li><li>Laserprinter All-in-One.</li><li>High speed document scanner</li><li>Nest thermostats</li><li>Google Home</li></ul></li></ul><h2>Changes since last year</h2><h3>Home Network</h3><p>I bought a set of Google WiFi routers. I love them. They have worked flawlessly since the day I plugged them in. Best Google hardware product ever!<br><br>### Phones</p><p>I upgraded my kids to refurbished iPhone 6s+s in Incipio cases. They are happy campers. We kept their old iPhone 5s's as backup phones for science projects and vacation trips.<br><br>### No more Beats headphones</p><p>I've been having problems with my kids' Beats headphones. I had two sets of headphones, and they both needed to be repaired twice while under warrantee. When they broke again after the warrantee had expired, I just threw them away.</p><p>I now buy my kids $15 Panasonic earbuds. They don't necessarily last much longer than the Beats did, but they are much cheaper to replace.</p><h3>Return of Windows</h3><p>After a 10 year absence, Windows-based computers have returned to my home. My kids' school district provides Windows convertible laptops to every middle school and high school student. The laptops are locked down, but have WiFi Internet access. I think Chromebooks would be better, but given that so many students' parents work for Microsoft, I'm sure the school district felt they had to go with Windows.<br><br>Besides the school laptops, I have a teenage son who is a huge game player. Last year I helped him build a low-end gaming PC. He loves it. It's also useful for his schoolwork, especially for Computer Science. Interestingly enough, it is not possible to install Eclipse on his locked-down school laptop. As a result, computer science students are required to supply their own home computers.</p><h3><strong>Other gadgets</strong></h3><p>I bought two Nest thermostats. They work fine, and look great, but I'm not sure I'm getting much benefit over a traditional thermostat.</p><p>Google Home. It was fun for a few weeks, but then we forgot about it. I guess for us it's more natural to search using our phones or laptops.</p><p><strong><br></strong><strong>No more Apple Time Capsule</strong><br><br>I noticed that I wasn't using my Apple Time Capsule, so I sold it. I'm now using Google Drive and Google Photos for backup.<br><br>#### No more Scooter Computer</p><p>I had a fanless mini-PC for experimenting, but I noticed I wasn't using it. (And unfortunately it was not powerful enough to be useful to my son as a gaming PC.) I gave it away.<br><br>## Possible future purchases</p><p>Depending on how things go, in the next year I'm thinking of getting</p><ul><li>New high-end iPhone<ul><li>Homepod speaker</li><li>Nintendo Switch</li><li>Bluetooth door lock.</li></ul></li></ul><p>And that's about it. At the moment I'm pretty happy with my family's tech stack.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20170806_Team_Blue_Iris_ICFP_2017_Programming_Contest_Postmortem</guid><title>Team Blue Iris ICFP 2017 Programming Contest Postmortem</title><description></description><link>https://jackpal.github.io/posts/blogger/20170806_Team_Blue_Iris_ICFP_2017_Programming_Contest_Postmortem</link><pubDate>Sun, 6 Aug 2017 03:16:00 -0700</pubDate><content:encoded><![CDATA[<h1>Team Blue Iris ICFP 2017 Programming Contest Postmortem</h1><h2>Team Blue Iris ICFP 2017 Programming Contest Postmortem</h2><p>My son and I competed as team "Blue Iris" in the <a href="https://icfpcontest2017.github.io/">ICFP 2017 programming contest</a>.<br><br><a href="https://en.wikipedia.org/wiki/ICFP_Programming_Contest">The ICFP programming contest</a> is an annual 3-day programming contest sponsored by the <a href="http://www.icfpconference.org/">International Conference on Functional Programming</a>. <a href="https://en.wikipedia.org/wiki/Functional_programming">Functional programming</a> is an approach to writing programs that stresses writing as much of the program as possible in terms of functions. That's as opposed to the more commonly used <a href="https://en.wikipedia.org/wiki/Imperative_programming">imperative programming</a>.<br><br>In the contest, people form teams to compete for three days to solve a problem, using any combination of programming languages. People compete for the joy of problem solving in the language of their choice. It's common for people to use outlandish or obscure programming languages. It's sort of like the <a href="https://en.wikipedia.org/wiki/Wacky_Races">Wacky Races</a> of programming contests.<br><br><br><a href="https://2.bp.blogspot.com/-J6nsUDN_jEU/WYZxfPnN2bI/AAAAAAAB890/PskQvh7geJQ3hikJKFtDNaoriInamLKzQCLcBGAs/s1600/wackyracers.jpg"><img src="https://2.bp.blogspot.com/-J6nsUDN_jEU/WYZxfPnN2bI/AAAAAAAB890/PskQvh7geJQ3hikJKFtDNaoriInamLKzQCLcBGAs/s320/wackyracers.jpg"/></a></p><p>I've competed in this contest about six times over the past 10 years. This year was the first year my son joined me. My son's got about a year's worth of programming experience, mostly in Java. He was eager to compete in the contest with me this year.<br><br>This year we happened to be on vacation in Taiwan during the contest. It's hot and humid in Taiwan, but the internet infrastructure is great, so we expected to not have any problem competing.<br><br>The contest started at 8pm Friday night Taiwan time. I prepared by buying a 2 liter bottle of Coke Zero at the local Wellcome market, and we eagerly waited for the contest to begin.<br><br>Each year the problem to be solved is revealed as the contest begins. The type of problem varies by year. This year's problem was to write a program that claimed edges on a graph. The goal was to construct a path from a "mine" node to a set of "customer" nodes. Scoring was based on the number of customers served.<br><br>After reading the problem description, we had to decide what programming language to use. We were originally considering Python. But because the problem had strict execution time limits, we decided that it would be better to use a faster running language.<br><br>I decided to go with <a href="https://golang.org/">Go</a>, for the following reasons:<br><br> <em> I knew Go and its libraries well. </em> Go runs well both on MacOS (where we were programming) and on Linux (where the contest organizers would be judging the program.) <em> Go has easy-to-use networking libraries. </em> Go has easy-to-use type-safe JSON marshalling and unmarshalling code. * There was the potential to use Go's goroutines for extra performance.</p><p>We got to work, reading the problem specification and starting to write the basic program.</p><p>I had hoped to do pair programming, but that didn't work out. The time scale wasn't right. I'd say "OK, now I'm going to write the structs we're going to use to read in the JSON", and then I wouldn't say anything else for an hour, while I was doing that. Imagine how boring that was for my son!</p><p>I also regret that the time pressure meant that I couldn't answer my son's tangential questions -- "What's a graph?", "What's functional programming?", "What's JSON stand for?". I should probably have given up on trying to compete, and instead used the time to educate my son. D'Oh!</p><p>Friday night we got as far as communicating with the contest's servers and reading in the problem's JSON configuration file. My son was helpful in monitoring the contest web site and twitter for announcements. He also helped read the spec and serve as a foil for debugging.</p><p>Saturday morning we got up early, had a quick breakfast, and got to work. We made steady progress, although as is typical we lost a few hours to dumb mistakes. The worst one was a stray printf that broke the offline mode of the app.</p><p>My son installed an IRC client (his first time using IRC) and he enjoyed monitoring the contest IRC channel. He helped other contestants overcome issues that we had already encountered.</p><p>By lunchtime we had our first working program, that simply picked the first unclaimed edge on the map. It did surprisingly well against some opponents on some maps.</p><p><a href="https://2.bp.blogspot.com/-DYssCdq7KYU/WYaHbNjZyhI/AAAAAAAB9h0/PG4Aj1-Hcc0lYp94S3TefLTviTZImA9_wCLcBGAs/s1600/pizza.jpg"><img src="https://2.bp.blogspot.com/-DYssCdq7KYU/WYaHbNjZyhI/AAAAAAAB9h0/PG4Aj1-Hcc0lYp94S3TefLTviTZImA9_wCLcBGAs/s400/pizza.jpg"/></a></p><p>We ate delicious pizzas from the local <a href="http://www.maryjanepizza.com/">Maryjane Pizza</a> restaurant, and then went back to work.</p><p>By 6 PM we had our final lightning round, which tried to create paths from mines to consumers. It worked, but not very well. Still, good enough for the lightning round.<br><br>We spent a few hours decompressing and researching graph algorithms to use in the main contest, and then went to bed.<br><br>On Sunday morning (day 2 of the contest) we decided not to continue with the main contest. Our reason for quitting was a combination of burnout and disinterest, combined with the sense that some teams were doing much better at solving the problem.<br><br>### What went right</p><ul><li>We blocked off a whole weekend to compete in the contest.<ul><li>We had the contest VM installed and running before the contest began.</li><li>The Go programming language worked well.<ul><li>The JSON, networking, and IO libraries were great.</li><li>Very few platform-specific issues between MacOS and Linux</li><li>Go made it easy to call an OS API on Linux to fix the lamduct EAGAIN issue that caused much heartburn to teams using languages like Java.</li><li>Super fast compile time.</li><li>Makefile-less build. The entire build script was: go build</li></ul></li><li>My son was an eager, supportive teammate.</li><li>Our Internet and computer hardware worked flawlessly.</li></ul></li></ul><h3>What went wrong</h3><ul><li>Go is not quite the right language for graph traversal contests.<ul><li>Too difficult to develop abstractions for graphs.</li><li>Temptation to use slices and maps for everything, which works, and is fast, but is too low level. Going up a level of abstraction introduces a lot of boilerplate.</li><li>Go's manual error checking adds a lot of overhead to writing code on "contest time".</li></ul></li><li>The Sublime Go IDE experience has regressed since I've used Go seriously. The GoSublime plugin seems to have rotted away in the past few years.<ul><li>Using Go disenfranchised my son, who currently only knows Python and Java.</li><li>Our small team couldn't afford to invest time in writing tools (visualizers and contest servers) that would have helped us.</li><li>My wife, who is a puzzle solving expert, was away during the contest. I'm sure she would have been a huge help in algorithm development.</li></ul></li></ul><p>Also, as my son diplomatically put it, "the problem was not the most interesting". I think we would have had more fun with a more competitive or physics oriented problem. To be fair, this year's problem as roughly in the middle of all the problems that have been presented. It's certainly more interesting than 2010's or 2013's abstract math problems.</p><h3>Conclusion</h3><p>Despite giving up on the main contest, we had fun during the lightning contest. We look forward to reading the results of the competition and reading the other teams' postmortems. And we look forward to competing again in 2018!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20170603_On-the-cheap_Machine_Learning_computer</guid><title>On-the-cheap Machine Learning computer</title><description></description><link>https://jackpal.github.io/posts/blogger/20170603_On-the-cheap_Machine_Learning_computer</link><pubDate>Sat, 3 Jun 2017 05:16:00 -0700</pubDate><content:encoded><![CDATA[<h1>On-the-cheap Machine Learning computer</h1><p>I recently put together a cheap-and-cheerful machine-learning-capable PC.<br><br><https://pcpartpicker.com/list/wwyQ2R>  
  
Highlights are:  

  * Pentium G4560 CPU
  * NVIDIA 1060 6GB GPU
  * 16 GB RAM
  * 512 GB SSD

The main difference from a budget gaming rig is that I chose a relatively
overpowered GPU. This is because for machine learning I think the main
bottleneck will be GPU RAM size. This particular GPU model has a lot of RAM
(6GB) for a relatively low price.

  

The other extravagance is the 512 GB SSD. It would have been cheaper to use a
smaller SSD coupled with a traditional hard drive. I went with a single SSD
because I don't want to deal with the hard drive.

  

So far my son's done far more gaming than I've done machine learning. He likes
the system a lot. It's >10x the graphics performance of his previous machine,
a 2012 Mac Mini running Windows 10 in Bootcamp.

  

  

</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20161221_Overheating_fanless_Scooter_Computer</guid><title>Overheating fanless Scooter Computer</title><description></description><link>https://jackpal.github.io/posts/blogger/20161221_Overheating_fanless_Scooter_Computer</link><pubDate>Wed, 21 Dec 2016 17:43:00 -0800</pubDate><content:encoded><![CDATA[<h1>Overheating fanless Scooter Computer</h1><p>A few months ago, inspired by <a href="https://blog.codinghorror.com/the-scooter-computer/">The Scooter Computer</a>, I bought [a fanless Intel Broadwell 5257u](https://www.aliexpress.com/item/Cheap-Fanless- Barebone-i5-i3-Mini-PC-Haswell-PC-Intel-Core-i5-4258U-i3-4158U- 4K/32707085233.html?ws<em>ab</em>test=searchweb0<em>0,searchweb201602</em>1<em>116</em>10065<em>117</em>10068<em>114</em>115<em>113</em>10084<em>10083</em>10080<em>10082</em>10081<em>10060</em>10061<em>10062</em>10056<em>10055</em>10054<em>10059</em>10099<em>10078</em>10079<em>427</em>10103<em>10073</em>10102<em>10096</em>10052<em>10050</em>10051,searchweb201603<em>4,afswitch</em>5&amp;btsid =91bf00dd-e88c-4a8f-b48e-e0fe679919c7) computer. I set it up as a Core OS Docker host, but quickly discovered that I didn't actually have much use for Docker or Core OS. Recently I tried to repurpose it as a low-end Windows 10 game box. That unfortunately ran into heat-related stability issues. Windows 10 worked fine as long as I didn't try playing 3D games. Playing 3D games like Counterstrike GO would crash after 10 to 15 minutes, with a very hot heat sink. Fiddling with BIOS settings and drivers didn't make a difference.<br><br>I guess the lesson to learn from this is, when buying a fanless computer, not to get the highest powered available CPU. Safer to get the lowest power CPU that meets your performance needs. Or just get a fan. :-P<br><br></p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20160807_Family_Computers,_2016_edition</guid><title>Family Computers, 2016 edition</title><description></description><link>https://jackpal.github.io/posts/blogger/20160807_Family_Computers,_2016_edition</link><pubDate>Sun, 7 Aug 2016 18:47:00 -0700</pubDate><content:encoded><![CDATA[<h1>Family Computers, 2016 edition</h1><p>As the summer of 2016 draws to an end, it's time to plan my family's IT setup for the 2016-2017 school year.<br><br>## My current setup</p><ul><li>iPhones<ul><li>Macbooks</li><li>iPads</li><li>Apple TV</li><li><a href="https://www.google.com/chromecast/speakers/">Chromecast Audio</a></li><li>Printer/scanner.</li><li>Apple Time Capsule</li><li>No-name "<a href="https://blog.codinghorror.com/the-scooter-computer/">scooter computer</a>" for playing with docker.</li></ul></li></ul><h2>Phones for kids</h2><p>The big change this year was that my youngest kids got their own phones. The process went well. I'm glad I spent the extra money to buy refurbished iPhone 5s's instead of cheaper phones. The iPhone 5s's have been reliable and easy to administer. The 16 GB of storage has occasionally been a problem.</p><p>I restrict my youngest kids' phones so that they can't install apps. It's tedious to have to unlock and then relock the phones to install apps for them, but I like being able to have a say on which apps they have on their phones.</p><p>I bought Otterbox cases, which worked well at protecting the phones. So far all the phones have survived. One phone did get dropped in the water briefly, but it worked OK after it dried out.</p><p>The T-Mobile Simple Choice plan has worked well for us. It has a 1 GB/month data cap per line. When you exceed the cap you still get data, but at a low speed.</p><p>A nice bonus: T-Mobile gave everyone unlimited high-speed data for 3 months last year. I believe the kids used an average of 2.4 GB per month while that was available. But they seem mostly happy with the 1GB / month limit.</p><h2>Laptops work great</h2><p>The Macbooks have been great. They're used for web access and light content creation.</p><h2>Declining desktop usage</h2><p>Our computer usage has shifted to laptops. Our desktop Mac mini computer goes weeks between uses, and I notice that I seem to be the only one logging into it these days.</p><h2>Modest tablet usage</h2><p>Our two tablets get relatively little usage. The mini is used for puzzle games, the Pro is used for comic book reading, video watching, and drawing/animation programs.</p><p>This is partially a "personal vs. shared" issue. People prefer their personal phone and/or laptop to shared tablet.</p><p>It's also a "tool at hand" issue. I find myself using a laptop or phone rather than a tablet just because the laptop or phone is always closer to hand.</p><h2>Minimal Apple TV usage</h2><p>Our Apple TV gets almost no usage. Its controller sucks for games, and family members prefer to watch video on their personal laptop or phone.</p><p>Our family TV is used mostly by my wife who still likes watching broadcast TV in the evenings.</p><h2>What didn't go according to plan</h2><p>Apple's hardware releases modified last year's plan:</p><ul><li>I dropped the Android TV in favor of the latest Apple TV. The Apple TV works great, but it turns out that we don't use it much.<ul><li>I exchanged my iPad Air 2 for an iPad Pro. Love the keyboard and stylus.</li></ul></li></ul><h3>Beats headphones are low quality</h3><p>I spent a lot of time this year dealing with broken headphones. My daughter's Beats wired headphones failed twice while under warranty. Apple was nice enough to replace them (with refurbished headphones) each time, but it required two trips to the Apple Store for each incident.</p><h3>Getting rid of old electronics</h3><p>For what it's worth, Amazon has a good trade-in service that buys old electronics for a fair price. Not as good a price as you'd get on Swappa or craigslist, but zero hassle. I used it to get rid of a bunch of old consumer electronics gear that I'd accumulated over the years.</p><h2>Best hardware purchases</h2><ul><li>Phone holders for the cars.<ul><li>Multi-port USB chargers for car.</li><li>Multi-port USB chargers for bedside.</li><li>Short (4 inch) USB cables for bedside charging.</li><li>Long (10 foot) USB cables for car and couch.</li><li>External battery packs for recharging phones.</li></ul></li></ul><h2>Plans for 2016-2017</h2><ul><li>Keep current phones &amp; laptops.<ul><li>I will upgrade to the latest iPhone just because I need it for my work.</li></ul></li><li>A Sony Playstation 4 NEO.<ul><li>My son is desperate to play the latest video games.</li></ul></li><li>Support school-issued Windows laptops.</li></ul><h3>Keeping current hardware</h3><p>I'm happy with my current hardware. The equipment is reliable and easy to administer. There doesn't seem to be anything significantly better on the market or on the horizon.</p><p>My kids report that the iPhone 5s is the current "standard" phone model among their classmates. (6th grade and 8th grade). So at the moment there isn't any social pressure to upgrade. My son would like a larger screen and a bigger battery. I got him an external battery pack, we'll see if that helps.</p><p>Apple is rumored to be introducing new Mac hardware this year, but based on rumors it doesn't seem to be significantly better for our budget and use cases than our current hardware.</p><h2>Consoles vs PC gaming</h2><p>My son's grown out of Minecraft, and now wants to play teen games.</p><p>In the past few years Macs have stopped being able to run modern games. mostly due to Apple not supporting recent 3D graphics APIs.</p><p>High-end gaming PCs work well for games, but they're expensive to buy and maintain.</p><p>A console seems like the best choice for us. Based on performance and exclusives I'm leaning towards the Sony Playstation 4. A new version of the PS4 is rumored to be coming out in October. I'll probably get that.</p><h2>Return of Windows devices</h2><p>The big change to my home network this year will be dealing with school-issued Windows laptops. I want to keep the Windows devices off my home network, but I also want to give them access to the Internet and to a local printer. I think the simplest way to do this is to buy a new Wi-Fi printer, and put the laptops and printer on a guest network.</p><p>I could get a fancy router and set up multiple virtual networks, but buying a second printer seems simpler. Perhaps if the second printer supports cloud printing I can use it from all my devices, and then retire my current printer.</p><p>I think the whole idea of a local network is becoming obsolete. In many cases it's simpler to assume that every device is always on the public internet, and just configure the device to survive in that environment. The only devices in my house that really need to be behind a firewall are the printer and the NAS.</p><h3>Slimming down</h3><p>If anything, I might simplify my home network by retiring the desktop computer and the NAS.</p><p>In the past I used the NAS for storing backups and downloaded videos. But these days I use cloud services for both backups and videos. I rarely use the NAS.</p><p>I rarely use my scooter computer. It was educational to set it up, but I don't really use it.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20160807_Two_thumbs_up_for_DigiPen_ProjectFun</guid><title>Two thumbs up for DigiPen ProjectFun</title><description></description><link>https://jackpal.github.io/posts/blogger/20160807_Two_thumbs_up_for_DigiPen_ProjectFun</link><pubDate>Sun, 7 Aug 2016 15:34:00 -0700</pubDate><content:encoded><![CDATA[<h1>Two thumbs up for DigiPen ProjectFun</h1><p>I sent my kids to the <a href="https://projectfun.digipen.edu/">DigiPen ProjectFun</a> summer camp this year.<br><br><br>It's expensive ($1400 for 10 days). It is very well run. My kids loved the experience, and they learned a lot about the topics (animation and game programming) they took.</p><p>The classes were structured as 7 days of instruction, 2-and-one-half days of final project, and then a demonstration on the afternoon of the last day.</p><p>FWIW I am well versed in both animation and game programming. I've tried to teach my kids these subject. They learned more from these courses than when I tried to teach them at home.</p><p>The instructors emailed me a detailed "what we did in class today" letter every day. I found it helpful to read the letter and use it to prompt discussion with my kids.</p><p>A nice side benefit is that my kids were exposed to relatable role models in the game industry, through the many DigiPen students who are helping run the camp. "Dad, everybody has nose rings."</p><p>Only drawback: my kids now think less of my old games: "Dad, no offense, but your [1980's vintage 8-bit era] game is kind of lame."</p><p>I think this camp would be best for 5th-thru-10th graders. For a self- motivated older child it might be better to spend the money on <a href="https://www.htcvive.com/us/">computer hardware</a>, <a href="https://pixologic.com/">software</a> and <a href="http://gameprogrammingpatterns.com/">books</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20160514_Scanning_old_documents</guid><title>Scanning old documents</title><description></description><link>https://jackpal.github.io/posts/blogger/20160514_Scanning_old_documents</link><pubDate>Sat, 14 May 2016 15:38:00 -0700</pubDate><content:encoded><![CDATA[<h1>Scanning old documents</h1><blockquote><p><em>That which is resisted, persists.</em></p></blockquote><p>I'm going paperless in my home office. Over my 30+ years of adulthood I have accumulated 20+ filing cabinet drawers of paper records. Plus there's a ton of unsorted bills and junk mail piled up.</p><p>My strategy is to tackle the filing cabinets first, then work on the unsorted bills and junk mail. My reasoning is that doing the filing cabinets first will help me set up my taxonomy on Google Docs, making it easier to file the new documents later.</p><p>My strategy for scanning my filing cabinets is:</p><ul><li>Go through each file cabinet drawer and storage box, one at a time.<ul><li>Sort docs into 3 categories: scan &amp; keep, scan &amp; shred, shred.</li><li>Scan documents to PDF files with a Fuji ScanSnap ix500.</li><li>Store the scanned documents in folders (with the same name as the original folders) on Google Docs.</li><li>Put the "keep" documents back into the same folder and cabinet drawer that they came from.</li><li>Make a backup copy of the scanned documents to a USB stick.</li></ul></li></ul><p>My strategy for deciding what physical items to keep is:</p><ul><li>Keep official government documents like tax returns forever.<ul><li>Keep items related to tax returns for 15 years.</li></ul></li></ul><p>I've scanned one half drawer so far. It takes a while to scan old documents. Lots of staples to remove.</p><p>At this rate it's going to take about six months to scan everything. Yow!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20151224_2015_Year_in_Review</guid><title>2015 Year in Review</title><description></description><link>https://jackpal.github.io/posts/blogger/20151224_2015_Year_in_Review</link><pubDate>Thu, 24 Dec 2015 23:39:00 -0800</pubDate><content:encoded><![CDATA[<h1>2015 Year in Review</h1><p>Here's my take on tech trends in 2015 and predictions for 2016.<br><br><br><br>Personal trends in 2015.</p><ul><li>I started using Twitter, following a mix of optimistic tech bloggers, economists and comic-book artists. Always something interesting to read. I don't tweet much. (Nothing to say :-P)<ul><li>Podcasts. I'm following a bunch of tech, gamer, and comedy podcasts. I especially like <a href="https://thevoicemail.wordpress.com/">The Voicemail</a>, <a href="http://atp.fm/">Accidental Tech Podcast</a>, Melton, and Guys we F*cked (NSFW) .</li><li>I switched to a large-sized iPhone 6s+. The big screen is great.</li><li>I stopped maintaining my "Terminal Emulator for Android" program, because I lost interest in the idea of an on-device terminal emulator for Android. (And I lost interest in maintaining the project in the face of frequent Android UX and build system churn.)</li></ul></li></ul><h2>Open Source</h2><p>I've been doing less open-source software work than in previous years. My OSS work has been driven by emotion and "hack value". This year I haven't come up with any ideas that were exciting enough to work on. Partly this is because we're in the midst of a change from PCs to mobile, and it's not clear to me what needs to be done in the new mobile-first world. And partly it's because things are working pretty well. I feel that I have my basic computing needs taken care of by existing apps.</p><p>More than once this year, I came up with an idea for a project, only to find a perfectly serviceable implementation already available for free or only a few dollars. Each time I installed the existing app rather than writing my own version.</p><h2>Video Games</h2><p>I found myself playing fewer video games. I bought lots of mobile games, but mostly for my family rather than for myself. My wife briefly held the world record high score for the puzzle game Spl-t.</p><p>I'm still waiting for <a href="http://the-witness.net/news/">The Witness</a> and <a href="https://en.wikipedia.org/wiki/The_Last_Guardian">The Last Guardian</a> to ship. I may buy a PS4 to play TLG. Or I may just watch the inevitable "Let's Play" walkthroughs. It seems like the kind of game that would be almost as much fun to watch someone else play as to play myself.</p><h2>Hardware</h2><p>I bought an Apple TV 4th Gen and an Apple iPad Pro. I'm using both primarily for media consumption, although once I obtain an Apple Pencil I hope to use the iPad Pro for some sketching.</p><p>I had hoped to write games for the Apple TV, but the bundled controller is too limited to support interesting games. And the development model is clunky, requiring either two Apple TV units, or a long cable. I think it makes more sense to concentrate on iPhone/iPad apps than Apple TV apps.</p><h2>Computer Languages</h2><p>I'm studying Swift, trying to decide if it's good or not. It's a positive sign that Apple open sourced it. I like the "Playground" feature.</p><p>I wish I could use <a href="https://golang.org/">Go</a> more, but I don't currently have a project for which Go is suitable.</p><p>Similarly, I'm impressed by recent developments in Clojurescript. I wish I had a project idea for which Clojurescript was suitable.</p><h2>2016 Trends</h2><ul><li>Mobile<ul><li>VR</li><li>Machine Learning</li></ul></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20151224_Family_IT_Information,_end-of-year_edition</guid><title>Family IT Information, end-of-year edition</title><description></description><link>https://jackpal.github.io/posts/blogger/20151224_Family_IT_Information,_end-of-year_edition</link><pubDate>Thu, 24 Dec 2015 21:52:00 -0800</pubDate><content:encoded><![CDATA[<h1>Family IT Information, end-of-year edition</h1><p>Just an update on my family IT use.<br><br><br><br>The T-Mobile family plan has worked great for us. T-Mobile's plans are nice for us because:</p><ul><li>The third, fourth, and fifth lines are only $10 / month.<ul><li>When the paid-for data is exhausted, the plans automatically switch over to unlimited free low-speed data for the rest of the month.</li><li>Streaming music doesn't count against the data caps.</li><li>Free phone calls, texts, and low-speed data in Canada and Taiwan. (It was great using Google Maps to get around Vancouver. I was using many short cuts that I didn't know about when I was navigating using paper maps.)</li><li>For the last 3 months of 2015 T-Mobile had a special where they gave everyone unlimited high-speed data for free.</li></ul></li></ul><p>I ended up getting used [iPhone 5s](http://www.apple.com/shop/buy- iphone/iphone5s)'s for all my kids. I had the kids pick their own <a href="http://www.otterbox.com/en-us/commuter-series">otterbox commuter</a> cases.</p><p>My son was initially frustrated at having to give up his rooted and customized Android phone for the smaller, less customizable iPhone. He's grown used to it, and likes it now. Everyone loves the fingerprint unlocking feature of the 5s.</p><p>I have the phones set up with restrictions, so that the kids can't install their own apps. I also confiscate-and-recharge their phones and laptops each night. This is fairly foolproof, and gives the kids 8 hours a day to sleep without electronic distractions.</p><p>I bought an Anker 6-port USB charger for my bedside table. I use it to recharge everyone's phones while keeping an eye on them. I have the phones on "Do Not Disturb" mode, so they don't bother me over night.</p><p>The "Find my Friends" app has proved helpful for keeping track of where everyone is, especially for things like picking kids up at school and at bus stops.</p><p>We now have 5 laptops: four 13" Macbook Airs and one 13" Macbook Pro. They work great and last a long time. They are mostly used for web surfing, YouTube and Minecraft.</p><p>We have had problems with headphones -- the kids are rough on headphone cables. They've already gone through one set of headphones each. Currently we're using Beats headphones due to them being relatively cheap on sale and/or included in Apple Educational bundles. They look stylish and work OK. Apple has a fairly good warranty repair process for their Beats headphones.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20150726_Happiest_recent_purchases</guid><title>Happiest recent purchases</title><description></description><link>https://jackpal.github.io/posts/blogger/20150726_Happiest_recent_purchases</link><pubDate>Sun, 26 Jul 2015 18:14:00 -0700</pubDate><content:encoded><![CDATA[<h1>Happiest recent purchases</h1><p>A few products that made my summer family travels happier:</p><p><a href="https://www.youtube.com/watch?v=9orpvnu_GVE">Photive 6 port Desktop USB Charger</a>.</p><p>Anker 4-port USB car cigaret lighter charger.</p><p>Car vent phone holder (don't remember the brand.)</p><p>Short stereo audio cable. It's ghetto compared to bluetooth, but more reliable.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20150726_Family_Computers,_2015_edition</guid><title>Family Computers, 2015 edition</title><description></description><link>https://jackpal.github.io/posts/blogger/20150726_Family_Computers,_2015_edition</link><pubDate>Sun, 26 Jul 2015 17:38:00 -0700</pubDate><content:encoded><![CDATA[<h1>Family Computers, 2015 edition</h1><p>As summer draws to a close, I am planning my family's computer use for the 2015-2016 school year.<br><br>My plans for this year are:<br><br> <em> Each family member gets their own mobile phone and laptop. </em> We also have a shared desktop and a few shared tablets. <em> Shared network scanner/laser printer. </em> We print color documents and pictures at the library or at the drugstore. <em> Android TV for shared movie watching. </em> Chromecast for audio sharing. <em> Comcast Business Internet </em> Apple Time Capsule for backup / WiFi / NAT</p><p>Note the lack of a dedicated game console. The kids play games on mobile, tablets, and laptops (for Minecraft specifically!).</p><p>My two youngest kids are getting their first phones this year. I'm worried about their phones getting lost, broken, or stolen. So for the first six months my kids will use hand-me-down phones. After they've learned to take care of phones, I'm going to give them better phones. (Still used, though!)</p><p>To achieve my plan I need to buy one laptop and three mobile phones. For the laptop I'm leaning towards a 13" Retina Macbook Pro. For the phones I'm leaning towards used iPhone 5Ss.<br><br>Why a Macbook and not a Chromebook? Build quality and applications. I have a low-end ARM Chromebook, and I noticed that nobody in the family uses it by choice, due to its low speed and poor quality screen. I <em>could</em> get a Chromebook Pixel, but for my family, at that price level a Macbook is a better deal.<br><br>Why iOS and not Android? It comes down to ease-of-administration. I want to lock down my kids' phones, and unfortunately experience with my oldest child using Android is that it's all-too-easy for him to defeat the aftermarket Android parental control apps.<br><br>For phone service I'm probably going to go with the BYOD T-Mobile Family Plan, because:<br><br> <em> It is cheap. </em> Unmetered music streaming. <em> When you hit your data cap it switches to low speed data for the rest of the month, rather than charging more. </em> It has free 2G international roaming.</p><h4>Thoughts on laptops and other legacy hardware</h4><p>If I were on a tighter budget, or starting from scratch, I'd consider dropping the laptops, the Comcast Internet, and the home WiFi, and going pure mobile. I would get bluetooth keyboards to make typing school assignments easier.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20150726_There's_(Already)_an_App_for_That</guid><title>There's (Already) an App for That</title><description></description><link>https://jackpal.github.io/posts/blogger/20150726_There's_(Already)_an_App_for_That</link><pubDate>Sun, 26 Jul 2015 16:31:00 -0700</pubDate><content:encoded><![CDATA[<h1>There's (Already) an App for That</h1><p>Story of my hobby hacking life these days:<br><br><br> 1. Think of an idea for a small application to write to learn a new technology and incidentally make my life better. 2. Prototype the app. 3. Plan a MVP, estimate costs in time and money to develop. 4. Search Play Market and/or IOS App Store, find that reasonable equivalent already exists, and is only $2. 5. Buy the existing app, get on with life.</p><p>This happened to me last week with the concept of a "comic book reader". I wrote a prototype that let me browse my collection. I was starting to list out all the features I needed to add (zooming, panning, sorting,RAR archive support...). And then I did a web search for comic book reader, spent a couple of minutes reading reviews, and bought one of the popular ones for $2. Sure it's got UI issues, and bugs, and doesn't quite work like it should, but I saved myself weeks of development time.</p><p>I need to think through how best to spend my hacking time in today's world of super abundance. What's my <a href="https://en.wikipedia.org/wiki/Comparative_advantage">comparative advantage</a> in this new world? What's my <a href="http://www.joelonsoftware.com/articles/StrategyLetterV.html">compliment</a>? What am I trying to learn, trying to achieve? What is worth working on? Existential questions on a Sunday morning. :-)</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20150726_Pixar_Non-Commercial_Renderman_for_OS_X</guid><title>Pixar Non-Commercial Renderman for OS X</title><description></description><link>https://jackpal.github.io/posts/blogger/20150726_Pixar_Non-Commercial_Renderman_for_OS_X</link><pubDate>Sun, 26 Jul 2015 15:58:00 -0700</pubDate><content:encoded><![CDATA[<h1>Pixar Non-Commercial Renderman for OS X</h1><p>Pixar released their Non Commercial version of Renderman. Woo! Hurray for patent expiration dates!<br><br>If you don't have Maya and you do have Mac and you just want to play with the command-line version, you have to jump through several hoops:<br><br><br>You need to install <a href="http://xquartz.macosforge.org/">XQuartz</a> before trying to install Renderman. (Otherwise the Renderman installer will fail.)<br><br><br>You need to copy /Applications/Pixar/RenderManProServer-19.0/etc/rendermn.ini to ~/.rendermn.ini (Note the added "." in the front.)</p><p>You need to edit .rendermn.ini to add the line<br><br> /licenseserver ${RMANTREE}/../pixar.license<br><br>You need to add these lines to your bashrc (or equivalent, depending on your shell.)</p><p>(Found on <https://www.fxphd.com/kbslug/renderman/>)<br><br><br><br>export RMANTREE=/Applications/Pixar/RenderManProServer-19.0/</p><p>export DYLD<em>LIBRARY</em>PATH=/Applications/Pixar/RenderManProServer-19.0/lib/</p><p>export RMANFB=it</p><p>export export</p><p>PATH=$PATH:$RMANTREE/bin:$RMSTREE/bin/it.app/Contents/MacOS:$RMSTREE/bin/slim.app/Contents/MacOS</p><p>Once you've done that, you can use the "prman" command line tool to render rib files.</p><p><a href="http://2.bp.blogspot.com/-BdRU1qlsPTc/VRgjC2XPaKI/AAAAAAAA1sw/zgEFdgRdxSw/s1600/elephant.jpg"><img src="http://2.bp.blogspot.com/-BdRU1qlsPTc/VRgjC2XPaKI/AAAAAAAA1sw/zgEFdgRdxSw/s1600/elephant.jpg"/></a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20150415_An_Update_on__Terminal_Emulator_for_Android__development</guid><title>An Update on "Terminal Emulator for Android" development</title><description></description><link>https://jackpal.github.io/posts/blogger/20150415_An_Update_on__Terminal_Emulator_for_Android__development</link><pubDate>Wed, 15 Apr 2015 14:46:00 -0700</pubDate><content:encoded><![CDATA[<h1>An Update on "Terminal Emulator for Android" development</h1><p>I am shutting down "<a href="https://play.google.com/store/apps/details?id=jackpal.androidterm&hl=en">Terminal Emulator for Android</a>" <a href="https://github.com/jackpal/Android-Terminal-Emulator">development</a> again.<br><br>Why am I doing this?<br><br><br> <em> I have lost interest in the core idea of an on-device terminal emulator. </em> Maintaining project, even in its mostly stable state, is taking up too much of my time. * I do not want to give control of the app to other developers, for fear that they will ruin the app by adding bugs, ads, in-app purchases, or malware.</p><p>What this means:<br><br><br> <em> I will make one or two more releases based on the current source tree. (Which has a few small bug fixes.) </em> I will be closing all open bugs as "won't fix". * I will be rejecting all future pull requests.</p><p>What you should do:<br><br><br> <em> If you're a user, the app will continue to be available in its current state. </em> If you're a developer, you are welcome to fork the app to start your own version. Maybe get together with other developers and make something great!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20150327_Crash_Bandicoot_Dev_on_rendering_techniques</guid><title>Crash Bandicoot Dev on rendering techniques</title><description></description><link>https://jackpal.github.io/posts/blogger/20150327_Crash_Bandicoot_Dev_on_rendering_techniques</link><pubDate>Fri, 27 Mar 2015 18:48:00 -0700</pubDate><content:encoded><![CDATA[<h1>Crash Bandicoot Dev on rendering techniques</h1><p>As seen on Hacker News:<br><br>| <img src="https://news.ycombinator.com/s.gif"/>| <a href="https://news.ycombinator.com/vote?for=9277704&dir=up&auth=a47519381c1a3803727d3840959b621e92d32754&goto=item%3Fid%3D9276605"> </a> |</p><p><a href="https://news.ycombinator.com/user?id=dmbaggett">dmbaggett</a> <a href="https://news.ycombinator.com/item?id=9277704">1 hour ago</a></p><p>Maybe Andy forgot to mention it; it's been a while since I've read the whole series.</p><p>The code was C and lisp so it didn't really require any effort to port other than replacing the rendering pipeline. And we used the SGIs to pre-render every frame anyway, to precompute the polygon sort order. (The PS1 had no Z-buffer, so you were stuck sorting polygons at run-time if you didn't do something clever.)</p><p>So we already had the rendering pipeline ported. Obviously you couldn't save your game to the memory card, etc. -- some stuff didn't work. But the game was playable (albeit very frustrating with keyboard controls).</p><p><em><a href="https://news.ycombinator.com/reply?id=9277704&goto=item%3Fid%3D9276605">reply</a></em><br><br>---|---|---<br>| <img src="https://news.ycombinator.com/s.gif"/>| <a href="https://news.ycombinator.com/vote?for=9277908&dir=up&auth=7291cc239d865a96652e53597868eea34954cb77&goto=item%3Fid%3D9276605"> </a> |</p><p><a href="https://news.ycombinator.com/user?id=marktangotango">marktangotango</a> <a href="https://news.ycombinator.com/item?id=9277908">49 minutes ago</a></p><p>That blows my mind, I always assumed it did have a z buffer. So what did you guys do to remedy 'z fighting' triangles? My interest is; I wrote a 3d renderer in Java using fillPolygon() many years ago, and used polygon sorting in place of a z buffer. Z fighting was of course a problem.</p><p><em><a href="https://news.ycombinator.com/reply?id=9277908&goto=item%3Fid%3D9276605">reply</a></em><br><br>---|---|---<br>| <img src="https://news.ycombinator.com/s.gif"/>| <a href="https://news.ycombinator.com/vote?for=9278082&dir=up&auth=8137124b2fd3f52a6dc17deafe4d22aa52135374&goto=item%3Fid%3D9276605"> </a> |</p><p><a href="https://news.ycombinator.com/user?id=dmbaggett">dmbaggett</a> <a href="https://news.ycombinator.com/item?id=9278082">26 minutes ago</a></p><p>Some day I will write this up for real, but without going into detail, here's a summary.</p><p>The camera in Crash was on a rail. It could rotate left, right, up, and down (in Crash 2 and beyond, at least), but could not translate except by moving forward/backward on the rail. This motivates a key insight: if you're only rotating the camera, the sort order of the polygons in the scene cannot change.</p><p>This allowed us to sample points on the rail and render the frame at each sample point ahead of time, as a batch job, on the SGI using a Z-buffer. (We may have done the Z-buffer with software; I don't remember.) Then we could recover the polygon order of each frame by looking at the Z-buffer. And, even better, at run-time we could simply <em>not render at all</em> those polygons that weren't ultimately visible in the pre-rendered scene. This solved both the sorting and clipping problem nicely, and made the look of the game closer to 3K polygons/frame vs. the 1K polygons we were actually rendering in real time. (Many polygons were occluded by other polygons.)</p><p>The trick, though, was what exactly to do with this sort/occlusion information. In a nutshell, what I did was write a custom delta-compression algorithm tailored to the purpose of maintaining the sorted polygon list from frame to frame, in R3000 assembly language. Miraculously, this ended up being quite feasible because the delta between frames was in practice very small -- a hundred bytes or so was typical. And if a transition was too heavyweight (i.e., the delta was too big) we'd either sample more finely in that area or tell the artists to take stuff out. :)</p><p>One thing nobody talks about but which is obvious in retrospect is that without a Z-buffer you're pretty screwed: sorting polygons is <em>not</em> O(N lg N) -- it's O(N^2). This is because polygons don't obey the transitivity property, because you can have cyclic overlap. (I.e., A &gt; B and B &gt; C does <em>not</em> imply A &gt; C). This is why virtually every game from that era has flickery polygons -- they were using bucket sorting, which has the advantage of being linear time complexity, but the disadvantage of being wrong, and producing this flickery effect as polygons jump from bucket to bucket between frames.</p><p>I'll leave the matter of weaving the foreground characters -- Crash himself and the other creatures -- into the pre-sorted background for another day.</p><p><em><a href="https://news.ycombinator.com/reply?id=9278082&goto=item%3Fid%3D9276605">reply</a></em><br><br>---|---|---</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20150213_Run_a_Minecraft_Server_on_OSX_Boot2Docker</guid><title>Run a Minecraft Server on OSX Boot2Docker</title><description></description><link>https://jackpal.github.io/posts/blogger/20150213_Run_a_Minecraft_Server_on_OSX_Boot2Docker</link><pubDate>Fri, 13 Feb 2015 04:20:00 -0800</pubDate><content:encoded><![CDATA[<h1>Run a Minecraft Server on OSX Boot2Docker</h1><h2>Run a Minecraft Server on OSX Boot2Docker</h2><p>Here's how I did it. I hope you find it useful!</p><h2>One-time Setup</h2><p>Do these steps once, to initialize Boot2Docker:</p><p>Step 1: Install <a href="https://docs.docker.com/installation/mac/">Docker for OS X</a><br><br>Step 2: Create a directory to hold your Minecraft files. This needs to be under the /Users part of your file system because boot2docker automatically mounts /Users to the boot2docker-vm.<br><br> mkdir /Users/yourname/minecraft/data<br><br>Step 3: Initialize boot2docker<br><br> boot2docker init<br><br>Step 4: Forward the TCP port Minecraft uses from the Mac to the boot2docker- vm.<br><br><br><br> VBoxManage modifyvm "boot2docker-vm" --natpf1 "tcp- port25565,tcp,,25565,,25565";</p><h2>Start Minecraft</h2><p>Do these steps every time you want to start your Minecraft server.</p><p>Step 1: Start boot2docker.</p><p>boot2docker start<br><br>Step 2: Set up the shell variables so you can use the docker command.<br><br><br> $(boot2docker shellinit)</p><p>Step 3: Run the minecraft container.</p><p>CONTAINER=$(docker run -v /Users/yourname/minecraft/data:/data -d -e EULA=TRUE -e VERSION=LATEST -p 25565:25565 itzg/minecraft-server)</p><p>The first time your run this it will take a few minutes to download and install minecraft. After that it should be much faster</p><h2>View the Minecraft Server Log</h2><p>docker logs $CONTAINER</p><p>This prints out the logs from the container (you set the CONTAINER variable as part of the docker run command above.)</p><p>If you've lost track of your container, you can list all currently running containers.</p><p>docker ps</p><p>If you don't see any containers, you container may have already exited. The Minecraft server will exit if it encounters an error while running.</p><h2>Shut Down</h2><p>You can shut down all running containers and quit boot2Docker by using the stop command:</p><p>boot2docker stop</p><p>Note that the Minecraft Server files will be stored in /Users/yourname/minecraft/data, and when you've stopped the server you can edit the files using your mac. (You might want to edit the files in order to modify the server settings.)</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20150209__Masters_of_Doom_</guid><title>"Masters of Doom"</title><description></description><link>https://jackpal.github.io/posts/blogger/20150209__Masters_of_Doom_</link><pubDate>Mon, 9 Feb 2015 03:52:00 -0800</pubDate><content:encoded><![CDATA[<h1>"Masters of Doom"</h1><p>I've been reading the book <a href="http://books.google.com/books/about/Masters_of_Doom.html?id=yyaxyKjyp2YC">Masters of Doom</a> about the careers of John Carmack and John Romero. I have ported their games Doom and Quake to <a href="http://en.wikipedia.org/wiki/MSN_TV">many</a> <a href="http://dxquake.sourceforge.net/">different</a> <a href="https://github.com/jackpal/glesquake">platforms</a>. It was interesting to read about their lives and game business.<br><br>The book brought back memories of development in the '80's, and '90s. Things were simpler (and worse) then.<br><br>Some other John &amp; John links:<br><br><a href="http://www.salon.com/2002/01/02/ion_storm/">The Rise and Fall of Ion Storm</a><br>[Stormy Weather](http://www.dallasobserver.com/1999-01-14/news/stormy- weather/)<br><br>[Carmack QuakeCon Keynotes](https://www.google.com/webhp?sourceid=chrome- instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#safe=off&amp;tbm=vid&amp;q=carmack+quakecon+keynote)<br><br><br></p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20150208_The_pointlessness_o</guid><title>The pointlessness o</title><description></description><link>https://jackpal.github.io/posts/blogger/20150208_The_pointlessness_o</link><pubDate>Sun, 8 Feb 2015 16:15:00 -0800</pubDate><content:encoded><![CDATA[<h1>The pointlessness o</h1><p>I am frustrated by "makers" who are excited by hooking up LEDs and stepper motors to small processors.<br></p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20150112_Reverse_engineering_my_own_game</guid><title>Reverse engineering my own game</title><description></description><link>https://jackpal.github.io/posts/blogger/20150112_Reverse_engineering_my_own_game</link><pubDate>Mon, 12 Jan 2015 05:55:00 -0800</pubDate><content:encoded><![CDATA[<h1>Reverse engineering my own game</h1><p>I've long-since misplaced the source code to my Atari 800 game Dandy Dungeon. But thanks to the <a href="http://www.atarimac.com/atari800macx.php">Atari800MacX</a> emulator and the emulation scene, I've been able to play an emulated version of my original game. That's been helpful for remembering all the little details of gameplay.<br><br>![](https://lh6.googleusercontent.com /fRH1lKI971XJALR6WCwkYgIOiRA39oGxN94d718SOkzIn2fgudVoliwa5XqJu_oWKEd0zI9hqBMPc0xo- yFZLRpsSmgqjlu-EE7u9osJvjxUVCFUWSsXquPnSu4RGHrNAQ)<br><br><br>For example, I was able to determine that the original game animated the arrows at 15 Hz and the players and monsters at 7.5 Hz.<br><br>FWIW I think the emulator may be slightly incorrect about the HBLANK processing emulation. I'm pretty sure that the color background for the 4th line of text should be a different color from the color background of the 3rd line of text.<br><br>The iOS version of the game is progressing -- the dual thumbstick virtual controls work well.<br><br>The next step (and it's a big one) is going to be multiplayer support. GameKit here I come.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20150105_Fun_with_shaders</guid><title>Fun with shaders</title><description></description><link>https://jackpal.github.io/posts/blogger/20150105_Fun_with_shaders</link><pubDate>Mon, 5 Jan 2015 06:08:00 -0800</pubDate><content:encoded><![CDATA[<h1>Fun with shaders</h1><p>There are a total of 3 draw calls and 2 textures in this scene:</p><p>[![](http://3.bp.blogspot.com/-2jZbK6yX-fc/VKomC1Qq- 5I/AAAAAAAA0bk/toY2T1scluc/s1600/Screen%2BShot%2B2015-01-04%2Bat%2B9.48.19%2BPM.png)](http://3.bp.blogspot.com /-2jZbK6yX-fc/VKomC1Qq- 5I/AAAAAAAA0bk/toY2T1scluc/s1600/Screen%2BShot%2B2015-01-04%2Bat%2B9.48.19%2BPM.png)</p><p>The whole tile map is rendered as a single draw call: a single 2-triangle tile that's instanced Row x Column times, using a 3D texture as a texture atlas. I originally used point sprites, but switched to instanced triangles because I wanted to use non-square tiles.<br><br>The virtual joystick is rendered as two coarse triangle strip rings, using a 1D radial texture. Note the anti aliasing. (I could have used quads, but wanted to minimize overdraw.)<br><br>So far Metal has been fairly straightforward to use, at least for someone like me coming from a DirectX 9 / Xbox 360 / Android OpenGL ES 2.0 background.<br><br></p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20150102_3*(N+1)_Devices_for_N_People</guid><title>3(N+1) Devices for N People</title><description></description><link>https://jackpal.github.io/posts/blogger/20150102_3*(N+1)_Devices_for_N_People</link><pubDate>Fri, 2 Jan 2015 23:03:00 -0800</pubDate><content:encoded><![CDATA[<h1>3*(N+1) Devices for N People</h1><p>At my house we are trending towards having N+1 laptops for N people, because (a) I need to keep my work laptop separate from my home laptop, and (b) frequently everyone in the family wants to use their laptops <em>at the same time</em>.</p><p>The same goes for tablets, and when the kids are old enough to have phones I expect it will be the same for phones.</p><p>I tried using multi-user accounts on shared family tablets and laptops, but ended up assigning each kid their own devices. It was simpler from an account management point of view, and the kids like personalizing their devices with stickers and cases.</p><p>Having assigned devices also makes it easier to give different Internet and gaming privileges to different kids, depending on age and maturity.</p><p>A downside of assigned devices is that not all the devices have the same features. People complain about hand-me-down devices, as well as the perverse incentive created when an accidentally broken device is replaced by a brand new, better device.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20150102_Letting_go_of_the_Web_and_Embracing_Mobile</guid><title>Letting go of the Web and Embracing Mobile</title><description></description><link>https://jackpal.github.io/posts/blogger/20150102_Letting_go_of_the_Web_and_Embracing_Mobile</link><pubDate>Fri, 2 Jan 2015 22:27:00 -0800</pubDate><content:encoded><![CDATA[<h1>Letting go of the Web and Embracing Mobile</h1><p>When I started working on Android in 2007, I had never owned a mobile phone. When Andy Rubin heard this, he looked at me, grinned, and said "man, you're on the wrong project!"<br><br>But actually, being late to mobile worked out well. In the early days of Android the daily build was rough. Our <a href="http://en.wikipedia.org/wiki/HTC_Dream">Sooner and G1</a> prototypes often wouldn't work reliably as phones, and that drove the other Android developers crazy. But since I was not yet relying on a mobile phone, it didn't bother me much.<br><br>Seven years later, [mobile's eaten the world](http://ben- evans.com/benedictevans/2014/10/28/presentation-mobile-is-eating-the-world). But I still haven't internalized what that means. I think I'm still too personal-computer-centric in my thinking and my planning.<br><br>Here's some recent changes that I'm still trying to come to grips with:<br><br><br> <em> Android and iOS are the important client operating systems. The web is now a legacy system. </em> Containerized Linux is the important server operating system. Everything else is legacy. <em> OS X is the important programmer's desktop OS (because it's required for iOS development, and adequate for Android and containerized Linux development.) </em> The phone is the most important form factor, with tablet in second place. <em> Media has moved from local storage to streaming. </em> Programming cultural discussion has moved from blogs &amp; mailing lists to Hacker News, Reddit &amp; Twitter. (To be fair, these new forums mostly link back to blog posts for the actual content.)</p><p>In reaction, I've stopped working on the following projects:<br><br><br> <em> <a href="https://play.google.com/store/apps/details?id=jackpal.androidterm&hl=en">Terminal Emulator for Android</a>. When I started this project, all Android devices had hardware keyboards. But those days are long gone. And unfortunately for most people there isn't a compelling use case for an on-the-device terminal emulator. The compelling command-line use cases for mobile are SSH-ing from the mobile device to another machine, and adb-ing into the Android device from a desktop. </em> <a href="https://github.com/jackpal/Taipei-Torrent">BitTorrent clients</a>. My clients were written just for fun, to learn how to use the Golang and node.js networking libraries. With the fun/learning task accomplished, and with BitTorrent usage in decline, there isn't much point in working on these clients. (Plus I didn't like dealing with bug reports related to sketchy torrent sites.) <em> New languages. For the platforms I'm interested in, the practical languages are C/C++, Java, Objective C, and Swift. (And Golang for server-side work.) </em> I spent much of the past seven years experimenting with dynamic languages, but a year of using Python and JavaScript in production was discouraging. The brevity was great, but the loss of control was not.</p><p>Personal Projects for 2015</p><p>First, I'm going to port my ancient game Dandy to mobile. It needs a lot of work to "work" on mobile, but it's a simple enough game that the port should be possible to do on a hobby time budget. I'm probably going to go closed- source on this project, but I may blog the progress, because the process of writing down my thoughts should be helpful.</p><p>After that, we'll see how it goes!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20150102_Game_Programming_Patterns_Book</guid><title>Game Programming Patterns Book</title><description></description><link>https://jackpal.github.io/posts/blogger/20150102_Game_Programming_Patterns_Book</link><pubDate>Fri, 2 Jan 2015 20:39:00 -0800</pubDate><content:encoded><![CDATA[<h1>Game Programming Patterns Book</h1><p>I've been reading <a href="http://gameprogrammingpatterns.com/">Game Programming Patterns</a> by Bob Nystrom.<br><br>It's available to <a href="http://gameprogrammingpatterns.com/contents.html">read online for free</a>, as well as for purchase in a variety of formats.<br><br>A good book for people who are writing a video game engine. I found myself agreeing with pretty much everything in this book.<br><br>Note - this book is about internal software design. It's not about game design, or graphics, physics, audio, input, monetization strategies, etc. So you won't be able to write a hit video game after reading this book. But if you happen to be writing an engine for a video game, this book will help you write a better one.<br><br>Edit -- and I've finished reading it. It was a quick read, but a good one. I consider myself an intermediate level game developer. I've written a few simple games and I've worked on several other games. (For example, I've ported Quake to many different computers over the years.)<br><br>For me the most educational chapters were <a href="http://gameprogrammingpatterns.com/game-loop.html">Game Loop</a> and <a href="http://gameprogrammingpatterns.com/component.html">Component</a>, although <a href="http://gameprogrammingpatterns.com/bytecode.html">Bytecode</a> and <a href="http://gameprogrammingpatterns.com/data-locality.html">Data Locality</a> were also quite interesting.<br><br>I like that the chapters have links to relevant external documents for further research.<br><br>I felt smarter after reading this book.<br><br></p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20150102_What_I_was_up_to_2012-2014</guid><title>What I was up to 2012-2014</title><description></description><link>https://jackpal.github.io/posts/blogger/20150102_What_I_was_up_to_2012-2014</link><pubDate>Fri, 2 Jan 2015 20:29:00 -0800</pubDate><content:encoded><![CDATA[<h1>What I was up to 2012-2014</h1><p>It's been a while since my last post -- I've been posting inside the Google internal ecosystem, but haven't posted much publicly.<br><br>What have I been up to in the past 3 years?<br><br><strong>Work</strong><br><br>Prototyped a <a href="https://code.google.com/p/dart/wiki/Android">Dart runtime for Android</a>. Amusingly enough, this involved almost no Dart code. It was 90% Python coding (wrangling Gyp build system scripts) and 10% C++ coding (calling the Dart VM).<br><br>Extended the Audio players for <a href="https://play.google.com/store/music">Google Play Music</a>'s Web client. I learned ActionScript, the Closure dialect of JavaScript, and HTML5 Audio APIs (Web Audio and EME.)<br><br>Started working on the <a href="https://itunes.apple.com/us/app/google-play-music/id691797987?mt=8">Google Play Music iOS client</a>. I learned Objective C, Swift, iOS and Sqlite.<br><br><strong>Personal Projects</strong><br><br>Prototyped a Go language runtime for Android. Unpublished, but luckily the <a href="https://docs.google.com/document/d/1N3XyVkAP8nmWjASz8L_OjjnjVKxgeVBjIsTr5qIUcA4/edit">Go team is picking up the slack</a>.<br><br>Finished working on <a href="https://play.google.com/store/apps/details?id=jackpal.androidterm">Terminal Emulator for Android</a>. I'm keeping it on life support, but no new features.<br><br><br><br><strong>Personal Life</strong><br><br>Started exercising again after a 10 year hiatus. It's good to get back into shape.<br><br>Switched to a low cholesterol diet. Google's cafes make this pretty easy to do.<br><br>Watched my kids grow!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20110912_A_script_to_upload_files_to_Picasa_Web_Albums</guid><title>A script to upload files to Picasa Web Albums</title><description></description><link>https://jackpal.github.io/posts/blogger/20110912_A_script_to_upload_files_to_Picasa_Web_Albums</link><pubDate>Mon, 12 Sep 2011 04:10:00 -0700</pubDate><content:encoded><![CDATA[<h1>A script to upload files to Picasa Web Albums</h1><p>Today I backed up all my family pictures and videos to Picasa Web Albums.<br><br>For several months I have been thinking of ways to backup my pictures to somewhere outside my house. I wanted something simple, scalable and inexpensive.<br><br>When I read that <a href="http://picasa.google.com/support/bin/http://picasa.google.com/support/bin/answer.py?answer=1224181">Google+ users can store unlimited pictures sized &lt;= 2048 x 2048 and videos &lt;= 15 minutes long</a>, I decided to try using Google+ to back up my media.<br><br>Full disclosure: I work for Google, which probably predisposes me to like and use Google technologies.<br><br>Unfortunately I had my pictures in so many folders that it wasn't very convenient to use either <a href="http://picasa.google.com/">Picasa</a> or <a href="http://picasa.google.com/mac_tools.html">Picasa Web Albums Uploader</a> to upload them.<br><br>Luckily, I'm a programmer, and Picasa Web Albums has a public API for uploading images. Over the course of an afternoon, I wrote a Python script to upload my pictures and videos from my home computer to my Picasa Web Album account. I put it up on GitHub: <a href="https://github.com/jackpal/picasawebuploader">picasawebuploader</a><br><br>Good things:<br><br> <em> The <a href="http://code.google.com/apis/gdata/">Google Data Protocol</a> is easy to use. </em> Python's built-in libraries made file and directory traversal easy. * OSX's built-in "sips" image processing utility made it easy to scale images.</p><p>Bad things:</p><ul><li>The documentation for the Google Data Protocol is not well organized or comprehensive.<ul><li>It's undocumented how to upload videos. Luckily I found a <a href="http://nathanvangheem.com/news/moving-to-picasa-update">Flicker-to-Picasa-Web</a> script that showed me how.</li></ul></li></ul><p>To do:</p><ul><li>Use multiple threads to upload images in parallel.<ul><li>Prompt for password if not supplied on command line.</li></ul></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20110820_What_am_I_up_to_</guid><title>What am I up to?</title><description></description><link>https://jackpal.github.io/posts/blogger/20110820_What_am_I_up_to_</link><pubDate>Sat, 20 Aug 2011 17:23:00 -0700</pubDate><content:encoded><![CDATA[<h1>What am I up to?</h1><p>I'm mostly posting on google+ these days, sorry!<br><br></p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20101220_Asynchronous_directory_tree_walk_in_nodejs</guid><title>Asynchronous directory tree walk in node.js</title><description></description><link>https://jackpal.github.io/posts/blogger/20101220_Asynchronous_directory_tree_walk_in_nodejs</link><pubDate>Mon, 20 Dec 2010 15:08:00 -0800</pubDate><content:encoded><![CDATA[<h1>Asynchronous directory tree walk in node.js</h1><p>I wrote an asynchronous directory tree walker in <a href="http://nodejs.org/">node.js</a>. Note the use of Continuation Passing Style in the fileCb callback. That allows the callback to perform its own asynchronous operations before continuing the directory walk.<br><br>(This code is provided under the <a href="http://www.apache.org/licenses/LICENSE-2.0.html">Apache Licence 2.0</a>.)<br><br><br><br><br><br><br> // asynchronous tree walk<br> // root - root path<br> // fileCb - callback function (file, next) called for each file<br> // -- the callback must call next(falsey) to continue the iteration,<br> // or next(truthy) to abort the iteration.<br> // doneCb - callback function (err) called when iteration is finished<br> // or an error occurs.<br> //<br> // example:<br> //<br> // forAllFiles('~/',<br> // function (file, next) { sys.log(file); next(); },<br> // function (err) { sys.log("done: " + err); });<br><br><br><br> function forAllFiles(root, fileCb, doneCb) {<br> fs.readdir(root, function processDir(err, files) {<br> if (err) {<br> fileCb(err);<br> } else {<br> if (files.length &gt; 0) {<br> var file = root + '/' + files.shift();<br> fs.stat(file, function processStat(err, stat) {<br> if (err) {<br> doneCb(err);<br> } else {<br> if (stat.isFile()) {<br> fileCb(file, function(err) {<br> if (err) {<br> doneCb(err);<br> } else {<br> processDir(false, files);<br> }<br> });<br> } else {<br> forAllFiles(file, fileCb, function(err) {<br> if (err) {<br> doneCb(err);<br> } else {<br> processDir(false, files);<br> }<br> });<br> }<br> }<br> });<br> } else {<br> doneCb(false);<br> }<br> }<br> });<br> }<br><br><br></p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20101112_Getting_Old_Educational_Software_to_Run_on_OSX_106</guid><title>Getting Old Educational Software to Run on OSX 10.6</title><description></description><link>https://jackpal.github.io/posts/blogger/20101112_Getting_Old_Educational_Software_to_Run_on_OSX_106</link><pubDate>Fri, 12 Nov 2010 23:25:00 -0800</pubDate><content:encoded><![CDATA[<h1>Getting Old Educational Software to Run on OSX 10.6</h1><p>My kids' favorite piece of educational software is "<a href="http://www.google.com/search?q=Clifford+thinking+adventures">Clifford The Big Red Dog Thinking Adventures</a>" by Scholastic. We received it as a hand-me-down from their cousins. The CD was designed for Windows 95-98 and pre-OSX Macintosh. Unfortunately, it does not run on OS X 10.6. (I think it fails to run because it uses the PowerPC instruction set and Apple dropped support for emulating that instruction set in 10.6.)<br><br><br><br>After some trial and error, I found the most reliable way to run Clifford on my Mac was:</p><ol><li>Install <a href="http://www.vmware.com/products/fusion/">VMWare Fusion</a>.<ol start="2"><li>Install <a href="http://www.ubuntu.com/desktop/get-ubuntu/download">Ubuntu 10.10 32-bit</a> in a Virtual Machine.</li><li>Install the VMWare Additions to make Ubuntu work better in the VM.</li><li><a href="http://www.multimediaboom.com/how-to-upgarde-to-latest-wine-1-3-5/">Install Wine on Ubuntu 10.10</a>. (Wine provides partial Windows API emulation for Linux.)</li><li>Configure the audio for Wine. (I accepted the defaults.)</li><li>Insert the Clifford CD and manually run the installer.</li></ol></li></ol><p>The result is that the Clifford game runs full screen with smooth animation and audio, even on my lowly first-generation Intel Mac Mini.</p><p>You may scoff at all these steps, but (a) it's cheap, and (b) it's less work than installing and maintaining a Windows PC or VM just to play this one game.</p><p>(It's too bad there isn't a Flash, HTML5, Android or iOS version of this game, it's really quite well done.)</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20100906_Eulogy_for_a_PC</guid><title>Eulogy for a PC</title><description></description><link>https://jackpal.github.io/posts/blogger/20100906_Eulogy_for_a_PC</link><pubDate>Mon, 6 Sep 2010 02:42:00 -0700</pubDate><content:encoded><![CDATA[<h1>Eulogy for a PC</h1><p>This Labor Day weekend I decommissioned my tower PC.<br><br>If memory serves, I bought it in the summer of 2002, in one last burst of PC hobby hacking before the birth of my first child. It's served me and my growing family well over the years, first as my main machine, later as a media server.<br><br>But the world has changed, and it doesn't make much sense to keep it running any more. It's been turned off for the last year while I traveled to Taiwan. In that time I've learned to live without it.<br><br>The specific reasons for decommissioning it now are:<br><br> <em> It needs a new CMOS battery. </em> It needs a year's worth of Vista service packs and security updates. <em> I don't use the media center feature any more. </em> After a year without a Windows machine I don't want to maintain one any more. * It's too noisy and uses too much energy to leave on as a server.</p><p><strong>The decommissioning process</strong><br><br>I booted it, and combed through the directories. I carefully copied off all the photos, code projects, email and documents that had accumulated over the years. Lots of good memories!<br><br><strong>GMail Import</strong><br><br>I discovered some old Outlook Express message archives. I wrote a Python script to import them into GMail. I didn't like any of the complicated recipes I found on the web, so I did it the easy way: I wrote a toy POP3 server in Python that served the ".eml" messages from the archive directory. Once the toy POP3 server was running, GMail was happy to import all the email messages from my server.<br><br><strong>Erasing the disks with Parted Magic</strong><br><br>Once I was sure I had copied all my data off the machine it was time to erase the disks. I erased the disks using the <a href="https://ata.wiki.kernel.org/index.php/ATA_Secure_Erase">ATA Secure Erase</a> command. I did this using a small Linux distro, <a href="http://partedmagic.com/">Parted Magic</a>. I downloaded the distribution ISO file and burned my own CD. Once the CD was burned, I just rebooted the PC and it loaded Parted Magic from the CD.<br><br>Parted Magic has a menu item, "Erase Disk". It lets you choose the disk and the erase method. The last method listed is the one I used. The other methods work too, but they don't use the ATA Secure Erase command.<br><br>It took quite a while to erase the disks. Each disk took about two hours to erase. (They took 200 GB per hour, to be precise.) Unfortunately, due to the limitations of my ATA drivers, I had to erase them one at a time.<br><br>While I think the ATA Secure Erase command is the fastest and most reliable way to erase modern hard disks, there is another way: Instead of having the drive erase itself, you can copy data over every sector of the drive. The advantage of this technique is that it also works with older drives. If you choose to go this route, one of the easiest way to do it is to use <a href="http://www.dban.org/">Darik's Boot and Nuke</a> utility. This is a Linux distro that does nothing besides erasing all the hard disks of the computer you boot it on. You just boot the CD, then type "autonuke" to erase every disk connected to your computer.<br><br><strong>Disposing of the computer</strong><br><br>It's still a viable computer, so I will probably donate it to a local charity. The charity has a rule that the computer you donate must be less than 5 years old. I think while some parts of the computer are older than that, most of the parts are young enough to qualify.<br><br><strong>Reflections on the desktop PC platform</strong><br><br>Being able to upgrade the PC over the years is a big advantage of the traditional desktop tower form factor. Here's how I upgraded it over the years:<br><br>Initial specs (2002)<br><br> <em> Windows XP </em> ASUS P4S533 motherboard <em> Pentium 4 at 1.8 GHz </em> ATI 9700 GPU <em> Dell 2001 monitor (1600 x 1200) </em> 256 MB RAM <em> 20 GB PATA HD </em> Generic case</p><p>Final specs (2010)<br><br> <em> Windows Vista Ultimate </em> ASUS P4S533 motherboard <em> Pentium 4 at 1.8 GHz </em> ATI 9700 GPU <em> Dell 2001 monitor (1600 x 1200) </em> 1.5 GB RAM <em> 400 GB 7200 RPM PATA HD </em> 300 GB 7200 RPM PATA HD <em> ATI TV Theater analog capture card </em> Linksys Gigabit Ethernet PCI card * Antec Sonata quiet case</p><p>I think these specs show the problems endemic to the desktop PC market. Although I didn't know it at the time, the PC platform had already plateaued. In eight years of use I wasn't motivated to upgrade the CPU, motherboard, monitor, or GPU. If I hadn't been a Microsoft employee during part of this time I wouldn't have upgraded the OS either.<br><br>What killed the PC for me wasn't the hardware wearing out, it was mission change. Like most people I now use the web rather than the local PC for most of my computer activity. Maintaining the local PC is pure overhead, and I've found it's easier to maintain a Mac than a PC.<br><br>It was nostalgic to turn on the PC again and poke through the Vista UI. It brought back some good memories. (And I discovered some cute pictures of my kids that I'd forgotten about.)<br><br>Thank you trusty PC. You served me and my family well!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20100829_An_update_on_my_car_stereo</guid><title>An update on my car stereo</title><description></description><link>https://jackpal.github.io/posts/blogger/20100829_An_update_on_my_car_stereo</link><pubDate>Sun, 29 Aug 2010 15:47:00 -0700</pubDate><content:encoded><![CDATA[<h1>An update on my car stereo</h1><p>It's been a year since [I bought my fancy car stereo](http://grammerjack.blogspot.com/2009/07/too-many-words-about-car- stereos.html). I wanted to mention that I've ended up not using most of the fancy features.<br><br> <em> The built-in MP3 player had issues with my 1000-song / 100 album / 4 GB music collection: </em> It took a long time to scan the USB storage each time the radio turned on. <em> It was difficult to navigate the album and song lists. </em> Chinese characters were not supported. <em> It took a long time to "continue" a paused item, especially a long item like a podcast. </em> The bluetooth pairing only worked with one phone at a time, which was awkward in a two-driver family.</p><p>Here's how I use it now:</p><ul><li>I connect my phone using both the radio's USB (so the phone is being charged) and mini stereo plugs.<ul><li>I use the phone's built-in music player.</li><li>I have the radio set to AUX to play the music from the stereo input plug.</li></ul></li></ul><p>It's a little bit cluttered, because of the two cables, but it gets the job done. The phone's music player UI is so much better than the radio's UI.</p><p>In effect I have reduced the car stereo to serving as a volume control, an amplifier, and a USB charger.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20100725_What_I_did_on_my_Winter_Vacation</guid><title>What I did on my Winter Vacation</title><description></description><link>https://jackpal.github.io/posts/blogger/20100725_What_I_did_on_my_Winter_Vacation</link><pubDate>Sun, 25 Jul 2010 21:00:00 -0700</pubDate><content:encoded><![CDATA[<h1>What I did on my Winter Vacation</h1><p>I just returned to the US after eight months living in Taiwan. The trip was great fun for me and my family. But more than that, it was a very productive time for me to learn new programming technologies.<br><br><br><br>Why was my trip so productive?</p><p>I think some of the reasons were:</p><ul><li>I was away from my home computer set up (including video game consoles and a large TV). All I had was a Mac Mini (for the family to use), a MacBook Pro (for work) and a Nexus One phone.<ul><li>I commuted by bus rather than car. While my commute time was longer, it was much more productive. Instead of having to concentrate on driving, I had 40 minutes a day of free time to think, web surf, and even code.</li><li>I didn't follow local politics, and USA politics were made less interesting by distance and time zone. I stopped visiting political web sites and obsessing over current events.</li><li>The timezone difference between Taipei and the US ment that email became a once-a-day event, rather than a continuous stream of interruptions.</li><li>It's more time-efficient to live as a guest in a city than as a home owner in the suburbs. For example, my mother-in-law cooked our meals, and I didn't have nearly as many household chores as I do in America.</li><li>Location-based internet blocks ment that some of my favorite time-wasting web sites (Pandora, Hulu) were unavailable.</li><li>Having to explain and defend my technology opinions to my Google Taipei coworkers. "Go is a cool language" I would say. "Oh yeah? Why?" they would reply. I would struggle to explain, and usually both of us would end up more enlightened.</li></ul></li></ul><p>Beyond that, I think being in a new environment, and removed from my home, helped shake me loose from my mental ruts. I was learning how to live in a new physical environment, and that transfered over to how I used the web as well.</p><p>What did I do?</p><ul><li>I visited <a href="http://news.ycombinator.com/">Hacker News</a> frequently. It is a very good source of news on the startup business and new web technologies. Hacker News was where I first learned about Node.js and CoffeeScript, two of my current interests.<ul><li>I entered the <a href="http://csclub.uwaterloo.ca/contest/">Google AI Challenge</a>, a month long Game AI programming contest. I didn't place very high, but I had fun competing.</li><li>I gave two talks on the Go programming language. One at the Google Taiwan office, the other at the Open Source Developer Conference Taiwan OSDC.tw. Having to give a talk about a programming language helps increase one's understanding of that language.</li><li>An afternoon spent hanging out with JavaScript Mahatma Douglas Crockford. I worked with Douglas ages ago when we both worked at Atari. It was great to catch up with him and his work. (He was in town to give a speech at the OSDC conference.)</li><li>I joined GitHub, and started using it to host my new open source projects.<ul><li>I wrote Taipei-Torrent, a Bit Torrent client written in "Go".</li><li>I started summerTorrent, a Bit Torrent client written in JavaScript, based on node.js</li></ul></li><li>node.js - an interesting server-side JavaScript environment.</li><li>CoffeeScript - a JavaScript preprocessor that looks like a promising language.</li><li>PhoneGap - a cross-platform mobile JavaScript / HTML5 UI framework. I wrote a word scramble game using this framework.</li><li>DD-WRT routers. I bought four new DLink 300 routers (which are dirt cheap), installed DD-WRT on them, and used them to upgrade my Taiwan relatives' computer network.</li><li>My nephew bought a PS3, so I finally had a chance to see Little Big Planet and Flower, two games I had long wanted to know more about. I also got to see a lot of Guitar Hero being played. Unfortunately I didn't get a chance to actually play any of these games -- someone else always had a higher claim on the TV.</li></ul></li></ul><p>Keeping the Taipei Experience Alive</p><p>I'm back in the US, and am already starting to slip back into my old ways. Here are some ways I'm trying to keep my productivity up:<br><br> <em> Cool side projects. </em> I'm going to continue to work on side projects to learn new things. I want to do something serious with CoffeeScript and Node.js. <em> iPad. I'm getting one in a few weeks, and looking to see if its a useful paradigm. </em> Get rid of distractions. <em> I'm selling off (or just closeting) distractions like my older computers and my media center. </em> I edited my /etc/hosts file to block access to all my top time-wasting web sites. Hopefully I won't just replace these with a new generation of web sites. <em> Working at home. My work office here in the US is just too noisy for me to concentrate in. I'm going to start spending as much time as possible working from a quiet room at home. </em> Regular exercise. I got a lot of walking done in Taiwan. I'm going to take up running again. (Easy to do now, we'll see how it goes when the weather gets rough.) * I may even get a pair of "Gorilla Shoes" for barefoot running.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20100618_ICFP_2010_contest_is_a_bust_for_me</guid><title>ICFP 2010 contest is a bust for me</title><description></description><link>https://jackpal.github.io/posts/blogger/20100618_ICFP_2010_contest_is_a_bust_for_me</link><pubDate>Fri, 18 Jun 2010 12:54:00 -0700</pubDate><content:encoded><![CDATA[<h1>ICFP 2010 contest is a bust for me</h1><p><a href="http://icfpcontest.org/2010/">The ICFP 2010 contest rules</a> have been posted, and I am quite disappointed by this year's contest.</p><p>This year's contest is difficult to describe. It's too clever by half, and it depends too much on time, and too much on repeated interaction with the organizer's servers.</p><p>The conceit is that you're designing "car engines", and "fuel for car engines". A car engine is a directed graph with certain properties, and "fuel" is a directed graph with other properties that generates a set of coefficients that are fed to the engine.</p><p>Layered on top of that is an encoding puzzle (you have to figure out how the engine and fuel directed graphs are encoded for submission to the IFCP servers.)</p><p>Layered on top of that is an economy where you are encouraged to submit your own car engines and write optimal fuels for other people's car engines. There are benefits for finding better fuels for existing car designs. (You aren't provided the details of the other car designs.)</p><p>Layered on top of that is that the instructions are not written very clearly. I had to read them multiple times to start to even begin to understand what was going on.</p><p>And finally, the contest registration / submission web site is returning 503 (Service Temporarily Unavailable) errors, either because it hasn't been turned on yet, or perhaps because hundreds of teams are trying to use it at once.</p><p>I suspect this contest is going to be difficult for teams with limited Internet connectivity. I also suspect the contest servers are going to be very busy later in the contest as people start hitting them with automated tools repeatedly in order to start decoding engines.</p><p>I salute the contest organizers for trying to get contestants to interact with each other during the contest, and for coming up with an original idea.</p><p>I fault them for designing a "write your program in <em>our</em> language, not yours" puzzle. I want to enjoy programming in the language of my choice, not design graphs and finite state automata for creating fuel coefficients and engines.</p><p>I am going to punt this year -- the contest just doesn't sound very fun.</p><p>I hope next year's topic is more to my taste!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20100508_Writing_an_Android_application_in_JavaScript_and_HTML5</guid><title>Writing an Android application in JavaScript and HTML5</title><description></description><link>https://jackpal.github.io/posts/blogger/20100508_Writing_an_Android_application_in_JavaScript_and_HTML5</link><pubDate>Sat, 8 May 2010 02:56:00 -0700</pubDate><content:encoded><![CDATA[<h1>Writing an Android application in JavaScript and HTML5</h1><p><a href="http://1.bp.blogspot.com/_kmzTWylBF0o/S-TW75jjnJI/AAAAAAAADkk/zPPiAQ27QsY/s1600/game.jpg"><img src="http://1.bp.blogspot.com/_kmzTWylBF0o/S-TW75jjnJI/AAAAAAAADkk/zPPiAQ27QsY/s400/game.jpg"/></a> Happy Mother's Day everyone! This year I wrote an Android app for my wife for Mother's Day. How geeky is that?</p><p>The reason I wrote it is that my wife's favorite Android application, Word Mix Lite, recently added annoying banner ads. While the sensible thing to do might have been to switch to another app, or perhaps upgrade to the paid version of Word Mix, I thought it might be interesting to see if I could write my own replacement.</p><p>And as long as I was writing the app, I though I'd try writing it using JavaScript. Normally Android applications are written in Java, but it's also possible to write them in JavaScript, by using a shell application such as [PhoneGap](http://phonegap.pbworks.com/Getting-Started-with- PhoneGap-(Android)).</p><p>Why use JavaScript instead of Java? Well, hack value mostly. On the plus side it's a fun to write! Another potential plus is that it is theoretically possible to run the same PhoneGap application on both Android and Apple.</p><p>The drawback is that PhoneGap is not very popular yet, especially among Android developers, and so there is relatively little documentation. I ran into problems related to touch events and click events that I still haven't completely solved.</p><p>It took about three days to write the application. The first day was spent:</p><ul><li>Finding <a href="http://wordlist.sourceforge.net/12dicts-readme.html">a public domain word list</a>.<ul><li>Filtering the word list to just 3-to-6 character words.</li><li>Build a "trie" to make it fast to look up anagrams.</li><li>Output the trie as a JSON data structure.</li></ul></li></ul><p>The second day was spent writing the core of the word jumble game.</p><ul><li>This was all done on a desktop, using Chrome's built-in Javascript IDE.</li></ul><p>The third day was spent:</p><ul><li>Porting to PhoneGap.<ul><li>Debugging Android-specific issues.</li><li>Tuning the gameplay for the phone.</li></ul></li></ul><p>The project went pretty well.</p><ul><li>JavaScript is a very easy language to work in.<ul><li>CSS styling was fairly easy to learn.</li><li>Targeting a single browser made it relatively easy to use the DOM.</li><li>The Chrome JavaScript debugger was very helpful.</li><li>The web has a wealth of information on JavaScript and HTML / CSS programming information.</li></ul></li></ul><p>In the end there were unfortunately a few button-event UI glitches I couldn't solve in time for Mother's Day. When I get some spare time I'd like to revisit this project and see if I could use the <a href="http://www.jqtouch.com/">JQTouch</a> library to solve my UI glitches. I'd also like to make an open source release of a reskinned (non-Mother's Day themed) version of this app. And then who knows? Maybe I'll release it for the other phones that PhoneGap supports as well. :-)</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20100306_Google_AI_Challenge_2010</guid><title>Google AI Challenge 2010</title><description></description><link>https://jackpal.github.io/posts/blogger/20100306_Google_AI_Challenge_2010</link><pubDate>Sat, 6 Mar 2010 20:17:00 -0800</pubDate><content:encoded><![CDATA[<h1>Google AI Challenge 2010</h1><p><a href="http://csclub.uwaterloo.ca/contest/profile.php?user_id=1515">Team Blue Iris</a> (that's me!) placed 77th out of 708 in the <a href="http://csclub.uwaterloo.ca/contest/">Google AI Challenge 2010</a> contest. The contest was to design an AI for a Tron lightcycle game.</p><p>My entry used the standard min/max approach, similar to many other entries. I guess that's why it performed similarly to so many other entries. :-) I didn't have any time to investigate better algorithms, due to other obligations.</p><p>In addition to my own entry (which was in C++), I also created starter packs for JavaScript and Google's Go language. These starter packs enabled people to enter the contest using JavaScript or Go. In the end, <a href="http://csclub.uwaterloo.ca/contest/language_profile.php?lang=Go">6 people entered using Go</a>, and <a href="http://csclub.uwaterloo.ca/contest/language_profile.php?lang=JavaScript">4 people entered using JavaScript</a>. I'm pleased to have helped people compete using these languages.</p><p>I initially wanted to use JavaScript and/or Go myself, but the strict time limit of the contest strongly favored the fastest language, and that made me choose a C++ implementation. Practically speaking, there wasn't much advantage to using another language. The problem didn't require any complicated data structures, closures, or dynamic memory allocation. And the submitted entries were run on a single-hardware-thread virtual machine, which meant that there wasn't a performance benefit for using threads.</p><p>This contest was interesting because it went on for a long time (about a month) and because the contestants freely shared algorithm advice during the contest. This lead to steadily improving opponents. My program peaked at about 20th place early in the contest, but because I didn't improve it thereafter, its rank gradually declined over the rest of the contest.</p><p><a href="http://a1k0n.net/blah/archives/2010/03/index.html">The contest winner's post- mortem</a> reveals that he won by diligent trial-and-error in creating a superior evaluation function. Good job a1k0n!</p><p>Congratulations to the contest organizers for running an interesting contest very well. I look forward to seeing new contests from the University of Waterloo Computer Club in the future.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20100123_Looking_at_the_original_BitTorrent_client</guid><title>Looking at the original BitTorrent client</title><description></description><link>https://jackpal.github.io/posts/blogger/20100123_Looking_at_the_original_BitTorrent_client</link><pubDate>Sat, 23 Jan 2010 13:27:00 -0800</pubDate><content:encoded><![CDATA[<h1>Looking at the original BitTorrent client</h1><p>I wanted to learn more about how the original BitTorrent client implemented "choking", so I downloaded the source to the original Python-based BitTorrent client from <a href="http://sourceforge.net/projects/bittorrent/">SourceForge</a>.</p><p>I was impressed, as ever, by the brevity and clarity of Python. The original BitTorrent client sources are very easy to read. (Especially now that I understand the problem domain pretty well.) The code has a nice OO design, with a clear separation of responsibilities.</p><p>I was also impressed by the extensive use of unit tests. About half the code in the BitTorrent source is unit tests of the different classes, to make sure that the program behaves correctly. This is a really good idea when developing a peer-to-peer application. The synthetic tests let you test things like your end-of-torrent logic immediately, rather than by having to find an active torrent swarm and wait for a real-world torrent to complete.</p><p>When I get a chance I'm going to refactor the Taipei-Torrent code into smaller classes and add unit tests like the original BitTorrent client implementation has.</p><p>And come to think of it, why didn't I check out the original BitTorrent client code sooner? It would have saved me some time and I'd probably have a better result. D'Oh! Oh well, live and learn!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20100123_Some_details_on_Xbox_Project_Natal</guid><title>Some details on Xbox Project Natal</title><description></description><link>https://jackpal.github.io/posts/blogger/20100123_Some_details_on_Xbox_Project_Natal</link><pubDate>Sat, 23 Jan 2010 02:17:00 -0800</pubDate><content:encoded><![CDATA[<h1>Some details on Xbox Project Natal</h1><p>From Scientific American: [Binary Body Double: Microsoft Reveals the Science Behind Project Natal](http://www.scientificamerican.com/article.cfm?id =microsoft-project-natal)</p><p>Short summary: They used machine-learning algorithms and lots of training data to come up with an algorithm that converts moving images into moving joint skeletons.</p><p>Given the huge variation in human body shapes and clothing, it will be interesting to see how well this performs in practice.</p><p>I bet people will have a lot of fun aiming the Natal camera at random moving object to see what happens. I can already imagine the split-screen YouTube videos we'll see of Natal recognizing pets, prerecorded videos of people, puppets and marionettes.</p><p>Oh, and of course, people will point Natal back at the TV screen and see if the video game character can control itself.</p><p>Great fun!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20100122_800_lines_of_code_for_a_bencode_serializer_!</guid><title>800 lines of code for a bencode serializer?!</title><description></description><link>https://jackpal.github.io/posts/blogger/20100122_800_lines_of_code_for_a_bencode_serializer_!</link><pubDate>Fri, 22 Jan 2010 10:55:00 -0800</pubDate><content:encoded><![CDATA[<h1>800 lines of code for a bencode serializer?!</h1><blockquote><p>Wow, my Taipei-Torrent post made it to Hacker News andreddit.com/r/programming. I'm thrilled!</p></blockquote><p>One comment on Hacker News was "800 lines for a bencode serializer?! It only took me 50 lines of Smalltalk!" That was a good comment! I replied:</p><blockquote><p>A go bencode serialization library could be smaller if it just serializedthe bencode data to and from a generic dictionary container. I think anothergo BitTorrent client, gobit, takes this approach.</p></blockquote><p>&gt;</p><blockquote><p>But it's convenient to be able to serialize arbitrary application types.That makes the bencode library larger because of the need to use go'sreflection APIs to analyze and access the application types. Go's reflectionAPIs are pretty verbose, which is why the line count is so high.</p></blockquote><p>&gt;</p><blockquote><p>To make things even more complicated, the BitTorrent protocol has a funny"compute-the-sha1-of-the-info-dictionary" requirement that forces BitTorrentclients to parse that particular part of the BitTorrent protocol using ageneric parser.</p></blockquote><p>&gt;</p><blockquote><p>So in the end, the go bencode serializer supports both a generic dictionaryparser and an application type parser, which makes it even larger.</p></blockquote><p>In general, Taipei-Torrent was not written to minimize lines-of-code. (If anything, I was trying to maximize functionality per unit of coding time.) One example of not minimizing lines-of-code is that I used a verbose error handling idiom:</p><blockquote><p>a, err := f()</p></blockquote><p>&gt;</p><blockquote><p>if err != nil {</p></blockquote><p>&gt;</p><blockquote><p>return</p></blockquote><p>&gt;</p><blockquote><p>}</p></blockquote><p>There are alternative ways to handle errors in go. Some of the alternatives take fewer lines of code in some situations. The above idiom is my preference because it works correctly in all cases. But it has the drawback of adding 3 lines of code to every function call that might return an error.</p><p>The go authors are considering adding exceptions to the go language. If they do so it will probably dramatically improve the line count of Taipei-Torrent.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20100120_A_Taipei-Torrent_postmortem:_Writing_a_BitTorrent_client_in_Go</guid><title>A Taipei-Torrent postmortem: Writing a BitTorrent client in Go</title><description></description><link>https://jackpal.github.io/posts/blogger/20100120_A_Taipei-Torrent_postmortem:_Writing_a_BitTorrent_client_in_Go</link><pubDate>Wed, 20 Jan 2010 07:34:00 -0800</pubDate><content:encoded><![CDATA[<h1>A Taipei-Torrent postmortem: Writing a BitTorrent client in Go</h1><p><em>This is a BitTorrent client. There are many like it, but this one is mine.</em></p><p><em>-- the BitTorrent Implementer's Creed</em></p><p>For fun I've started writing a command-line BitTorrent client in Google's go programming language. The program, [Taipei-Torrent](http://github.com/jackpal /Taipei-Torrent) , is about 70% done. It can successfully download a torrent, but there are still lots of edge cases to implement.</p><p>Go routines and channels are a good base for writing multithreaded network code. My design uses goroutines as follows:</p><ul><li>a single main goroutine contains most of the BitTorrent client logic.<ul><li>each BitTorrent peer is serviced by two goroutines: one to read data from the peer, the other to write data to the peer.</li><li>a goroutine is used to communicate with the tracker</li><li>some "time.Tick" goroutines are used to wake the main goroutine up periodically to perform housekeeping duties.</li></ul></li></ul><p>All the complicated data structures are owned by the main goroutine. The other goroutines just perform potentially blocking network I/O using channels, network connections, and []byte slices. For example, here's a slightly simplified version of the goroutine that handles writing messages to a peer:</p><p>func (p *peerState) peerWriter(errorChan chan peerMessage,</p><p>header []byte) {</p><p>_, err := p.conn.Write(header)</p><p>if err != nil {</p><p>goto exit</p><p>}</p><p>for msg := range p.writeChan {</p><p>err = writeNBOUint32(p.conn, uint32(len(msg)))</p><p>if err != nil {</p><p>goto exit</p><p>}</p><p>_, err = p.conn.Write(msg)</p><p>if err != nil {</p><p>goto exit</p><p>}</p><p>}</p><p>exit:</p><p>errorChan <\- peerMessage{p, nil}

}

Good things about the Go language and standard packages for this project:

  * Even without IDE support it is easy to refactor go code. This ease-of-refactoring makes it pleasant to develop a program incrementally.
  * Goroutines and channels make networking code easy to write.
  * The log.Stderr() function makes debugging-by-printf fairly painless.
  * Go maps serve as pretty good one-size-fits-all collection classes.
  * I received very fast responses from the go authors to my bug reports.
  * The standard go packages are reliable and easy to use. I used the xml, io, http, and net packages pretty extensively in this project. I also used the source of the json package as a base for the bencode package.
  * gofmt -w is a great way to keep my code formatted.
  * Named return values, that are initialized to zero, are very pleasant to use.
  * The code writing process was very smooth and stress free. I rarely had to stop and think about how to achieve what I wanted to do next. And I could often add the next feature with relatively little typing. The feeling was similar to how it feels when I write Python code, only with fewer type errors. :-)
  * With the exception of using the reflect package I never felt like I was fighting the language or the compiler.

Minor Problems:

  * It was a little tedious to write if err != nil {return} after every function call in order to handle errors.
  * The standard go http package is immature. It is missing some features required for real-world scenarios, especially in the client-side classes. In my case I needed to expose an internal func and modify the way a second internal func worked in order to implement a client for the UPnP protocol. The good news is that the http package is open source, and it was possible to copy and fork the http package to create my own version.

What wasted my time:

  * Several hours wasted debugging why deserializing into a copy of a variable (rather than a pointer to the original variable) had no effect on the value of the original variable. I notice that I often make mistakes like this in go, because go hides the difference between a pointer and a value more than C does. And there're confusing differences in behavior between a struct (which you can pass by either value or reference) and an interface (which has reference semantics on its contents even though you pass the interface by value). When you are reading and reasoning about go code you must mentally keep track of whether a given type is a struct type or an interface type in order to know how it behaves.
  * Several hours wasted figuring out how to send and receive multicast UDP messages. This may be an OSX-specific bug, and it may already be fixed. I found the Wireshark packet sniffer very helpful in debugging this problem.
  * Several hours wasted with crashes and hangs related to running out of OS threads on OSX. This was due to my code instantiating time.Tick objects too frequently. (Each live time.Tick object consumes a hardware thread.)
  * Many hours spent trying to understand and use the reflect package. It is powerful, but subtle and mostly undocumented. Even now, some things remain a mystery to me, such as how to convert a []interface{} to an interface{} using reflection.

Project statistics:

  * Line count: Main program: 1500 lines, http package patches: 50 lines, UPnP support: 300 lines, bencode serialization package: 800 lines. Tests for bencode serialization: 300 lines
  * Executable size: 1.5 MB. Why so large? One reason is that go doesn't use shared libraries, so everything is linked into one executable. Even so, 1.5 MB seems pretty large. Maybe go's linker doesn't strip unused code.
  * Development time: ~8 days so far, probably 11 days total.
  * The source is available under a BSD-style license at: <http://github.com/jackpal/Taipei-Torrent>

Edits since first post:

  * Added error reporting to code example.
  * Added a link to the source code.
  * Give more details about the line count. I had mistakenly included some test code in the lines-of-code for the main program.
  * Add a statistic about program size.

</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20100118_Objects_vs_the_L2_Cache</guid><title>Objects vs. the L2 Cache</title><description></description><link>https://jackpal.github.io/posts/blogger/20100118_Objects_vs_the_L2_Cache</link><pubDate>Mon, 18 Jan 2010 06:18:00 -0800</pubDate><content:encoded><![CDATA[<h1>Objects vs. the L2 Cache</h1><p>An excellent little performance optimization presentation that shows how important memory layout is for today's processors:</p><http://research.scee.net/files/presentations/gcapaustralia09/Pitfalls_of_Object_Oriented_Programming_GCAP_09.pdf>

The beginning of the talk makes the observation that since C++ was started in
1979 the cost of accessing uncached main memory has ballooned from 1 cycle to
400 cycles.

The bulk of the presentation shows the optimization of a graphics hierarchy
library, where switching from a traditional OO design to a structure-of-arrays
design makes the code run 3 times faster. (Because of better cache access
patterns.)

]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20091218_Tom_Forsyth_(Larrabee_Dev)_speaking_at_Stanford</guid><title>Tom Forsyth (Larrabee Dev) speaking at Stanford</title><description></description><link>https://jackpal.github.io/posts/blogger/20091218_Tom_Forsyth_(Larrabee_Dev)_speaking_at_Stanford</link><pubDate>Fri, 18 Dec 2009 06:33:00 -0800</pubDate><content:encoded><![CDATA[<h1>Tom Forsyth (Larrabee Dev) speaking at Stanford</h1><p>I just noticed Tom Forsyth, aka tomf, is speaking at the <a href="http://www.stanford.edu/class/ee380/">Stanford EE CS Colloquium</a> on January 6, 2010. The video will hopefully be posted on the web afterwards.</p><p>The topic is "To be announced", but is very likely to be Larrabee related.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20091126_3D_toolchain_musings</guid><title>3D toolchain musings</title><description></description><link>https://jackpal.github.io/posts/blogger/20091126_3D_toolchain_musings</link><pubDate>Thu, 26 Nov 2009 23:09:00 -0800</pubDate><content:encoded><![CDATA[<h1>3D toolchain musings</h1><p>I'm writing a skinning sample for a future Android SDK. This has prompted me to construct a toolchain to get skinned animated models into Android applications.</p><p>I'm really only just getting started, but so far I'm thinking along these lines:</p><p>Wings 3D -&gt; Blender 2.5 -&gt; FBX ASCII -&gt; ad-hoc tool -&gt; ad-hoc binary file -&gt; ad-hoc loader.</p><p>For what it's worth, right now Blender 2.5 doesn't support FBX export, so I have to do Collada -&gt; FBX Converter -&gt; FBX. But Blender 2.5 support should be ready fairly soon.</p><p>You may wonder why I'm considering using the proprietary and undocumented FBX standard rather than the open source Collada standard. I'm doing it for the same reason so many other tool chains (e.g. Unity, XNA) do, namely that FBX is a simpler format that just seems to work more reliably when exchanging data between DCC applications.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20091126_Blender_25_alpha_0_is_looking_pretty_good</guid><title>Blender 2.5 alpha 0 is looking pretty good</title><description></description><link>https://jackpal.github.io/posts/blogger/20091126_Blender_25_alpha_0_is_looking_pretty_good</link><pubDate>Thu, 26 Nov 2009 23:01:00 -0800</pubDate><content:encoded><![CDATA[<h1>Blender 2.5 alpha 0 is looking pretty good</h1><p>The open-source <a href="http://www.blender.org/">Blender 3D</a> DCC tool has long suffered from an ugly, non-standard, hard-to-learn UI. I'm very happy to see that the latest release, which just entered alpha status, has a much improved UI. It's not quite Modo quality, but it's starting to get into the same league as commercial DCC tools.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20091125_Two_very_good_talks_on_ECMAScript_4,_5,_and_6</guid><title>Two very good talks on ECMAScript 4, 5, and 6</title><description></description><link>https://jackpal.github.io/posts/blogger/20091125_Two_very_good_talks_on_ECMAScript_4,_5,_and_6</link><pubDate>Wed, 25 Nov 2009 08:33:00 -0800</pubDate><content:encoded><![CDATA[<h1>Two very good talks on ECMAScript 4, 5, and 6</h1><p>Yahoo continues to be a source of excellent information on recent and future versions of JavaScript / ECMAScript. Here are two very good talks from November 2009 about the evolution of JavaScript from 2000 until now:</p><p>[Doug Crockford on ECMAScript 4 /5](http://developer.yahoo.com/yui/theater/video.php?v=crockford- yuiconf2009-state)</p><p>[Brendan Eich on ECMAScript 4 / 5 and Harmony](http://developer.yahoo.com/yui/theater/video.php?v=eich- yuiconf2009-harmony)</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20091125_Prince_of_Persia_Developer's_blog</guid><title>Prince of Persia Developer's blog</title><description></description><link>https://jackpal.github.io/posts/blogger/20091125_Prince_of_Persia_Developer's_blog</link><pubDate>Wed, 25 Nov 2009 03:20:00 -0800</pubDate><content:encoded><![CDATA[<h1>Prince of Persia Developer's blog</h1><p>In the late 1980's Jordan Mechner single-handedly designed and programmed the original Apple II version of <a href="http://en.wikipedia.org/wiki/Prince_of_Persia_\(1989_video_game\">Prince of Persia</a>) and several other groundbreaking games. He published his <a href="http://jordanmechner.com/old-journals/">development journals</a> and [technical design documents](http://jordanmechner.com/wp- content/uploads/1989/10/popsource009.pdf) on his web site. The journals touch on:</p><ul><li>The development of the stop-motion animation techniques used so effectively in PoP<ul><li>The tension in Jordan's life between his two callings: game development and feature film scriptwriting / directing.</li><li>The difficulties involved in developing and selling a new game idea.</li><li>A view into the late 80's / early 90's pre-web game development business.</li></ul></li></ul><p>Although many games are now written by large teams of people, in the end, a lot of the business, artistic, and technical issues Jordan writes about remain relevant. I highly recommend these journals for anyone interested in an inside view of game development. (Or anyone interested in trying to break into Hollywood. :-) )</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20091111_A_Multi-threaded_Go_Raytracer</guid><title>A Multi-threaded Go Raytracer</title><description></description><link>https://jackpal.github.io/posts/blogger/20091111_A_Multi-threaded_Go_Raytracer</link><pubDate>Wed, 11 Nov 2009 03:44:00 -0800</pubDate><content:encoded><![CDATA[<h1>A Multi-threaded Go Raytracer</h1><p>[![](http://2.bp.blogspot.com/<em>kmzTWylBF0o/SvpD41F6d9I/AAAAAAAAC08/nwRcMOKe- qI/s400/trace.png)](http://2.bp.blogspot.com/</em>kmzTWylBF0o/SvpD41F6d9I/AAAAAAAAC08 /nwRcMOKe-qI/s1600-h/trace.png)</p><p>Above is the output of the raytracer. Below is a diagnostic mode showing which goroutines raytraced which section of the screen. Each goroutine has its own color to outline the pixels it traces:</p><p>[](http://2.bp.blogspot.com/<em>kmzTWylBF0o/SvpD41F6d9I/AAAAAAAAC08/nwRcMOKe- qI/s1600-h/trace.png) [![](http://3.bp.blogspot.com/</em>kmzTWylBF0o/SvpD4rEwtUI/AAAAAAAAC00/YcQUJ7d- Nwc/s400/cells.png)](http://3.bp.blogspot.com/_kmzTWylBF0o/SvpD4rEwtUI/AAAAAAAAC00 /YcQUJ7d-Nwc/s1600-h/cells.png)</p><p>I wrote a simple multi-threaded ray tracer in Google's new "go" language. It's an adaptation of <a href="http://www.ffconsultancy.com/languages/ray_tracer/comparison.html">Flying Frog Consultancy's Raytracer</a>.</p><p>It runs single-threaded about 1/2 the speed of a comparable C++ version. I guess the C++ version benefits from a more optimizing compiler and the ability to inline small functions.</p><p>Compared to ordinary C/C++, the Go version was easier to multithread.</p><p>On my dual-core Macbook Pro I get an 1.80x speedup when running with GOMAXPROCS &gt; 1:</p><p>$ GOMAXPROCS=1 time ./gotrace</p><p><strong>1.52</strong> real 1.50 user 0.01 sys</p><p>$ GOMAXPROCS=2 time ./gotrace</p><p><strong>0.82</strong> real 1.50 user 0.01 sys</p><p>$ GOMAXPROCS=3 time ./gotrace</p><p>0 <strong>.81</strong> real 1.50 user 0.01 sys</p><p>On an eight-core, 16 Hyperthread HP Z600 running Ubuntu 9.10, (with the source code changed to use 16 goroutines instead of the default 8 goroutines) I get a 5.8x speedup:</p><p>$ GOMAXPROCS=1 time ./gotrace</p><p>1.05user 0.01system 0:01.06elapsed 99%CPU (0avgtext+0avgdata 0maxresident)k</p><p>0inputs+1544outputs (0major+2128minor)pagefaults 0swaps</p><p>$ GOMAXPROCS=16 time ./gotrace</p><p>1.32user 0.00system 0:00.18elapsed 702%CPU (0avgtext+0avgdata 0maxresident)k</p><p>0inputs+1544outputs (0major+2190minor)pagefaults 0swaps</p><p>Source code <a href="http://jack.palevich.googlepages.com/gotracer.zip">gotracer.zip</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20091107_How_about_that_new_Verizon_Droid_</guid><title>How about that new Verizon Droid?</title><description></description><link>https://jackpal.github.io/posts/blogger/20091107_How_about_that_new_Verizon_Droid_</link><pubDate>Sat, 7 Nov 2009 19:37:00 -0800</pubDate><content:encoded><![CDATA[<h1>How about that new Verizon Droid?</h1><p>I've been working part time on the "Droid" project for the last year, and it finally shipped today. I wrote some of the graphics libraries.</p><p>At first I was skeptical of the industrial design. The early prototypes looked very much like a 1970's American car dashboard. But Motorola really improved the industrial design in subsequent versions. I like the high-grip rubber on the battery cover. It makes the phone very comfortable to hold.</p><p>The phone hardware is very fast, and the high resolution screen is beautiful. I think people will enjoy owning and using this phone.</p><p>My favorite feature is the turn-by-turn navigation software. My second favorite feature is the "Droooid" default notification sound. Oh, and the camera flashlight is very nice too!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20091107_Wired_article_about_Demand_Media's_automated_How_To_videos</guid><title>Wired article about Demand Media's automated How To videos</title><description></description><link>https://jackpal.github.io/posts/blogger/20091107_Wired_article_about_Demand_Media's_automated_How_To_videos</link><pubDate>Sat, 7 Nov 2009 19:23:00 -0800</pubDate><content:encoded><![CDATA[<h1>Wired article about Demand Media's automated How To videos</h1><p>Man, the web really does change everything!</p><p>The company "<a href="http://www.wired.com/magazine/2009/10/ff_demandmedia/all/1">Demand Media</a>" has developed a Google-like business model for creating how-to videos:</p><ol><li>Use data mining to figure out what people are searching for.<ol start="2"><li>Use semantic database to figure out what their search queries mean. (e.g. "how to draw a gun" vs. "how to draw a flower".)</li><li>Find out how much advertisers are willing to pay for an ad that appears next to the video.</li><li>Look at how much content already exists to answer the question.</li><li>Use 1-4 to calculate the expected lifetime value of the how-to video.</li><li>Automate the process of matching freelance writers, videographers, editors, and fact checkers to create the video as inexpensively as possible. (In the $30 per video range.)</li><li>Host the resulting videos on Youtube (and other video sites) and monetize with ad keywords.</li></ol></li></ol><p>They say that the algorithm produces lifetime values about 5 times higher than human editors do.</p><p>These guys have basically automated the "How to" video market. Amazing! I wonder if they will move up the video food chain into music videos, TV shows or movies? It might work for low budget children's programming.</p><p>Or even for casual games. Hmm.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20091020_Ubuntu_910_gets_a_clue!</guid><title>Ubuntu 9.10 gets a clue!</title><description></description><link>https://jackpal.github.io/posts/blogger/20091020_Ubuntu_910_gets_a_clue!</link><pubDate>Tue, 20 Oct 2009 18:57:00 -0700</pubDate><content:encoded><![CDATA[<h1>Ubuntu 9.10 gets a clue!</h1><p>I was pleasantly surprised to see that the latest version of Ubuntu, 9.10 b1, comes with a nice selection of desktop backgrounds. This makes a huge difference in how beginners perceive the product, at very little cost to Ubuntu. The new dark-brown default color scheme is also an improvement over the older schemes.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20091019_I_published_my_first_Android_app</guid><title>I published my first Android app</title><description></description><link>https://jackpal.github.io/posts/blogger/20091019_I_published_my_first_Android_app</link><pubDate>Mon, 19 Oct 2009 00:30:00 -0700</pubDate><content:encoded><![CDATA[<h1>I published my first Android app</h1><p>Now that the Android Native Development Kit has been released, I was finally able to publish the sources and binary to my <a href="http://code.google.com/p/androidterm/">Android Terminal Emulator</a>. It's a fairly plain Digital Equipment Corporation VT-100 terminal emulator, with some features from newer terminals (like colors.)</p><p>This is my first application in the Android Market. There are at least 10 other terminal emulators in the market; we'll see how this one is received.</p><p>A bit of history: This was my first Android application. I wrote it for the original "Sooner" Android devices, and have kept it updated for the successive generations of devices. It requires native code because there's no public Android Java APIs for dealing with PTYs.</p><p>A bit of ancient history: I wrote two terminal emulators for the Atari 800 back in the day: Chameleon, in 6502 assembly, and a version of Kermit in the excellent "Action!" programming language. Kermit was one of my first "open source" programs. If you poke around on the web you can still find it <a href="http://atariwiki.strotmann.de/xwiki/bin/view/Code/ACTIONKermit">here and there</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20091002_GLES_Quake_-_a_port_of_Quake_to_the_Android_platform</guid><title>GLES Quake - a port of Quake to the Android platform</title><description></description><link>https://jackpal.github.io/posts/blogger/20091002_GLES_Quake_-_a_port_of_Quake_to_the_Android_platform</link><pubDate>Fri, 2 Oct 2009 02:48:00 -0700</pubDate><content:encoded><![CDATA[<h1>GLES Quake - a port of Quake to the Android platform</h1><p>I've just published the source code to <a href="http://code.google.com/p/glesquake">a port of Quake to the Android platform</a>. This is something I did a while ago as a internal test application.</p><p>It's not very useful as a game, because there hasn't been any attempt to optimize the controls for the mobile phone. It's also awkward to install because the end user has to supply the Quake data files on their own.</p><p>Still, I thought people might enjoy seeing a full-sized example of how to write a native code video game for the Android platform. So there it is, in all its retro glory.</p><p>(Porting Quake II or Quake III is left as an exercise for the reader. :-) What's different about this particular port of Quake? Converted the original application into a DLL Android applications are written in Java, but they are allowed to call native languge DLLs, and the native language DLLs are allowed to call a limited selection of OS APIs, which include OpenGL ES and Linux File I/O. I was able to make the game work by using Java for:</p><ul><li>The Android activity life-cycle<ul><li>Event input</li><li>View system integration</li><li>EGL initialization</li><li>Running the game in its own rendering loop, separate from the UI thread</li></ul></li></ul><p>And then I use C++ for the rest. The interface between Java and C is pretty simple. There are calls for:</p><ul><li>initialize<ul><li>step - which does a game step, and draws a new frame.</li><li>handle an input event (by setting variables that are read during the "step" call.)</li><li>quit</li></ul></li></ul><p>The Java-to-C API is a little hacky. At the time I developed this game I didn't know very much about how to use JNI, so I didn't implement any C-to- Java calls, preferring to pass status back in return values. For example the "step" function returns a trinary value indicating:</p><ol><li>That the game wants raw PC keyboard events, because it is in normal gameplay mode.<ol start="2"><li>That it wants ASCII character events, because it is in menu / console mode.</li><li>That the user has chosen to Quit.</li></ol></li></ol><p>This might better have been handled by providing a series of Java methods that the C code could call back. (But using the return value was easier. :-)) Similarly, the "step" function takes arguments that give the current screen size. This is used to tell the game when the screen size has changed. It would be cleaner if this was communicated by a separate API call. Converted the Quake code from C to C++ I did this early in development, because I'm more comfortable writing in C++ than in C. I like the ability to use classes occasionally. The game remains 99% pure C, since I didn't rewrite very much of it. Also, as part of the general cleanup I fixed all gcc warnings. This was fairly easy to do, with the exception of aliasing warnings related to the "Quake C" interpreter FFI. Converted the graphics from OpenGL to OpenGL ES This was necessary to run on the Android platform. I did a straightforward port. The most difficult part of the port was implementing texture conversion routines that replicated OpenGL functionality not present in OpenGL ES. (Converting RGB textures to RGBA textures, synthesizing MIP-maps and so forth.) Implemented a Texture Manager The original glQuake game allocated textures as needed, never releasing old textures. It relied upon the OpenGL driver to manage the texture memory, which in turn relied on the Operating System's virtual memory to store all the textures. But Android does not have enough RAM to store all the game's textures at once, and the Android OS does not implement a swap system to offload RAM to the Flash or SD Card. I worked around this by implementing my own ad-hoc swap system. I wrote a texture manager that uses a memory mapped file (backed by a file on the SD Card) to store the textures, and maintained a limited size LRU cache of active textures in the OpenGL ES context.</p><p>Faking a PC Keyboard Quake expects to talk to a PC keyboard as its primary input device. It handles raw key-down and key-up events, and handles the shift keys itself. This was a problem for Android because mobile phone devices have a much smaller keyboard. So a character like '[' might be unshifted on a PC keyboard, but is shifted on the Android keyboard. I solved this by translating Android keys into PC keys, and by rewriting the config.cfg file to use a different set of default keys to play the game. But my solution is not perfect, because it is essentially hard-coded to a particular Android device. (The T-Mobile G1). As Android devices proliferate there are likely to be new Android devices with alternate keyboard layouts, and they will not necessarily be able to control the game effectively using a G1-optimized control scheme. A better approach would be to redesign the game control scheme to avoid needing keyboard input. A Few Words about Debugging I did the initial bring-up of Android Quake on a Macintosh, using XCode and a special build of Android called "the simulator", which runs a limited version of the entire Android system as a native Mac OS application. This was helpful because I was able to use the XCode visual debugger to debug the game. Once the game was limping along, I switched to debugging using "printf"-style log-based debugging and the emulator, and once T-Mobile G1 hardware became available I switched to using real hardware. Using printf-style debugging was awkward, but sufficient for my needs. It would be very nice to have a source-level native code debugger that worked with Eclipse. Note that the simulator and emulator use a software OpenGL ES implementation, which is slightly different than the hardware OpenGL ES implementation available on real Android devices. This required extra debugging and coding. It seems that every time Android Quake is ported to a new OpenGL ES implementation it exposes bugs in both the game's use of OpenGL ES and the device's OpenGL ES implementation. Oh, and I sure wish I had a Microsoft PIX-style graphics debugger! It would have been very helpful during those head-scratching "why is the screen black" debugging sessions.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090923_IDF_2009_Larrabee_demo</guid><title>IDF 2009 Larrabee demo</title><description></description><link>https://jackpal.github.io/posts/blogger/20090923_IDF_2009_Larrabee_demo</link><pubDate>Wed, 23 Sep 2009 13:24:00 -0700</pubDate><content:encoded><![CDATA[<h1>IDF 2009 Larrabee demo</h1><p>Intel <a href="http://www.semiaccurate.com/2009/09/22/larrabee-breaks-cover-last/">showed their new Larrabee GPU publicly for the first time</a> at their annual developer conference. They showed [Larrabee running a ray tracer that was rendering QuakeWars geometry](http://www.youtube.com/watch?v=b5TGA- IE85o). The enthusiast scene (e.g. <a href="http://forum.beyond3d.com/showthread.php?t=55232">beyond3d</a>) was not impressed by this demo, because, frankly, it wasn't very impressive at an emotional level. The scene was static, no people in it, just waves and a few very small helicopters. It's strange that they didn't even move the camera, which is something that a ray tracing engine should easily be able to to. The camera angle they chose was effective for showing dynamic reflections, but keeping the camera locked down meant a much less interesting demo. For the same amount of effort they could have come up with a much more visually and emotionally interesting demo. For example, a cascade of brightly colored chrome balls tumbling down a staircase, which would show off both physics and ray tracing. That they didn't use this early opportunity to sell Larrabee indicates that they don't know how to market add-on GPUs to consumers. Which makes sense, since it has been many years since they've needed to do this. Their current demos are all targeted to (a) test out Larrabee features, and (b) educate developers as to the potential strengths of Larrabee. They are similar to Microsoft DirectX samples. But I think Intal also needs to develop showy "<a href="http://www.youtube.com/watch?v=4QCNS7BRFrc">AMD/ATI Ruby</a>" style demos to win the hearts of enthusiasts. [Groo at semiaccurate.com](http://www.semiaccurate.com/2009/09/22/larrabee-breaks- cover-last/) suggests that the IDF demo was shown on early, barely functional Larrabee silicon. If true, that could help explain why the demo was so limited. But by this time in the GPU's lifecycle there should be more marketing -- even if totally pre-rendered -- showing what the GPU will do. So far the bland <a href="http://www.youtube.com/watch?v=o7dGRewFmS4">GDC2009 meteor demo</a> is the only thing we've seen. I think Larrabee needs more sizzle, like this <a href="http://www.youtube.com/watch?v=jIyu4Aozwbw">early Sony Playstation 2 demo reel</a>. (Sony also had some great interactive tech demos of things like feathers and pollen particles, but I haven't been able to find online videos in my limited searching.) Intel's current marketing approach seems to indicate that they are not serious about competing for the enthusiast add-on GPU market. Perhaps they are just waiting until it's closer to the time Larrabee is available for market, but my guess is that they just don't understand how to play the game. It would be a shame if Larrabee is a technical success but a sales failure due to poor marketing execution.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090914_ICFP_2009_contest_final_scores</guid><title>ICFP 2009 contest final scores</title><description></description><link>https://jackpal.github.io/posts/blogger/20090914_ICFP_2009_contest_final_scores</link><pubDate>Mon, 14 Sep 2009 14:44:00 -0700</pubDate><content:encoded><![CDATA[<h1>ICFP 2009 contest final scores</h1><p>Final scores are out, and my team Blue Iris scored <a href="http://icfpcontest.org/scoreboard.php">80 out of 328</a> in this year's ICFP contest. Not as good as last year, ah well. :-) Next year: More sleep!</p><p>And here's a video of <a href="http://www.vimeo.com/6613815">the contest results presentation from ICFP</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090908_Brick_Break_-_a_Javascript_Breakout_clone</guid><title>Brick Break - a Javascript Breakout clone</title><description></description><link>https://jackpal.github.io/posts/blogger/20090908_Brick_Break_-_a_Javascript_Breakout_clone</link><pubDate>Tue, 8 Sep 2009 03:58:00 -0700</pubDate><content:encoded><![CDATA[<h1>Brick Break - a Javascript Breakout clone</h1><p><a href="http://jack.palevich.googlepages.com/brickbreak.html"><img src="http://2.bp.blogspot.com/_kmzTWylBF0o/SqXWsqLQScI/AAAAAAAACwU/05M9MVvNEHk/s400/brickbreak.png"/></a><br>This weekend I wrote a Javascript clone of the old Atari "Breakout" game. Thanks to the "Canvas" tag it was very easy to write, but I did run into a few problems:<br><br>Javascript math is always floating point, so I had to use the "Math.floor" function to convert the results of a division to an integer. This was in the brick collision detection logic, where I am converting the ball's (x,y) coordinates to the bricks that the ball might be hitting.<br><br>I was evaluating document.getElementById too early in the document lifecycle, before the corresponding elements existed. This took me a long time to diagnose -- I ended up just moving the getElementById calls to their run-time use, rather than trying to cache the results.<br><br>[Jack's Brick Break Breakout clone](http://jacks- hacks.appspot.com/brickbreak/brickbreak.html)</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090905_ICFP_2009_paper_on_Haskell_in_the_Real_World</guid><title>ICFP 2009 paper on Haskell in the Real World</title><description></description><link>https://jackpal.github.io/posts/blogger/20090905_ICFP_2009_paper_on_Haskell_in_the_Real_World</link><pubDate>Sat, 5 Sep 2009 17:05:00 -0700</pubDate><content:encoded><![CDATA[<h1>ICFP 2009 paper on Haskell in the Real World</h1><p>Here's a good paper on using Haskell to write a commercial application. The authors are practical commercial programmers who tried Haskell to see if it was a more effective language than Ruby: <a href="http://portal.acm.org/ft_gateway.cfm?id=1596578&type=pdf&coll=portal&dl=ACM&CFID=505049525&CFTOKEN=505049525">Experience Report: Haskell in the “Real World” Writing a Commercial Application in a Lazy Functional Language</a> Of special interest is the "Problems and Disadvantages" section. It seems that space leaks which are a continuing source of trouble in the authors' application. Reading this paper reminds me of [Tenerife Skunkworks Haskell vs Erlang Reloaded](http://web.archive.org/web/20070701221306/wagerlabs.com/2006/01/01 /haskell-vs-erlang-reloaded). In that experiment a developer found that Erlang was much better than Haskell for real-time programming.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090904_Back_to_gnome</guid><title>Back to gnome</title><description></description><link>https://jackpal.github.io/posts/blogger/20090904_Back_to_gnome</link><pubDate>Fri, 4 Sep 2009 03:04:00 -0700</pubDate><content:encoded><![CDATA[<h1>Back to gnome</h1><p>Well, 8 hours using wmii was enough for me. Too many apps didn't quite work right. So I'm back to plain-old-boring-but-familiar Gnome.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090903_Technology_Trends_I'm_Keeping_an_Eye_On</guid><title>Technology Trends I'm Keeping an Eye On</title><description></description><link>https://jackpal.github.io/posts/blogger/20090903_Technology_Trends_I'm_Keeping_an_Eye_On</link><pubDate>Thu, 3 Sep 2009 02:31:00 -0700</pubDate><content:encoded><![CDATA[<h1>Technology Trends I'm Keeping an Eye On</h1><p>In no particular order, here's what I've been studying lately:</p><ul><li>Javascript. I've avoided this language over the years because of its low speed and shoddy reputation. But the language implementations seem to be getting faster and the available libraries seem to be getting more interesting. I've just watched all of <a href="http://search.yahoo.com/search?vs=developer.yahoo.com&vs=yuiblog.com&p=Crockford">Doug Crockford's YUI</a> lectures on JavaScript, and I'm thinking about trying to use the language in some toy projects.<ul><li><a href="http://linux.die.net/man/1/git-gui">git gui</a> - this git command, available in recent builds of git, make Git changes pretty easy to author.</li><li><a href="http://www.amazon.com/Undercover-Economist-Exposing-Poor-Decent/dp/0195189779">The Undercover Economist</a> - this is a great book about economic theory. It's pretty easy to read while shaving, or waiting for compiles. Lots of good anecdotes and tools for modeling the behavior of consumers and firms. I took 3 economics classes in college, and they didn't teach me as much practical information as I've learned from reading this book.</li><li><a href="http://news.ycombinator.com/">Hacker News</a> - this link voting site has replaced <a href="http://alterslash.org/">alterslash</a> and <a href="http://reddit.com/r/programming">reddit programming</a> as my daily comp-sci news site. I like the emphasis on start-up news.</li><li><a href="http://wmii.suckless.org/">wmii</a> - yet another tiling window manager. I tried a bunch of tiling window managers, and this one seemed to "click" with me. I found that I could customize it easily, and it mostly "just worked" the way I wanted it to. We'll see if I stick with it or go back to Gnome. [Follow-up. I went back to Gnome (and then to OSX). Oh well.]</li><li><a href="http://www.google.com/chrome">Chrome</a> - now that the Linux and OSX versions have Flash support, Chrome has become my default web browser. I like its clean UI.</li></ul></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090903_Dual_XHD7714_Road_Trip_Report</guid><title>Dual XHD7714 Road Trip Report</title><description></description><link>https://jackpal.github.io/posts/blogger/20090903_Dual_XHD7714_Road_Trip_Report</link><pubDate>Thu, 3 Sep 2009 02:12:00 -0700</pubDate><content:encoded><![CDATA[<h1>Dual XHD7714 Road Trip Report</h1><p>After a month of using the [Dual XHD7714](http://grammerjack.blogspot.com/2009/07/too-many-words-about-car- stereos.html), during which my family and I took a 4000 mile road trip, I have to say it's a pretty nice system. We used it almost exclusively as an MP3 player, rather than an HD Radio or a CD player. I loaded 800 songs from our home music collection onto an 8GB memory stick. It was great introducing my kids to some new music. By the end of the trip their favorite songs were <em>Shock the Monkey</em> and <em>The Magical Mr. Mistoffelees</em>.</p><p>Some problems specific to the Dual XHD7714:</p><p>Bluetooth issues:</p><ul><li>Bluetooth headset mode only syncs with one phone at a time. This seems to be a common limitation of low-end bluetooth car stereos, but it's quite frustrating for two-driver families like mine.<ul><li>Bluetooth audio streaming mode doesn't sound very good on this radio. However, I didn't experiment with this very much, so it may have been source-material related.</li></ul></li></ul><p>USB MP3 player issues:</p><ul><li>It takes about 5 seconds per GB to index USB stick music each time it starts up.<ul><li>It only recognizes US-ASCII characters. If any non-ASCII characters are present in the album or song name the entire name is replaced with the string "Not supported". We had a lot of Chinese-language tracks that displayed that way, making them very difficult to navigate.</li><li>It can't fast-forward or rewind through MP3s.</li><li>When you turn on the radio, it does remember where in the current MP3 it is playing, <em>but</em> it takes a long time to resume playing an MP3 in the middle. So it's awkward listening to long podcasts.</li></ul></li></ul><p>Still, even with all these flaws, I'm quite happy with the radio. We really enjoyed being able to conveniently listen to so many different songs during our trip.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090723_Nehalem_machines_are_very_fast</guid><title>Nehalem machines are very fast</title><description></description><link>https://jackpal.github.io/posts/blogger/20090723_Nehalem_machines_are_very_fast</link><pubDate>Thu, 23 Jul 2009 17:56:00 -0700</pubDate><content:encoded><![CDATA[<h1>Nehalem machines are very fast</h1><p>I've just had a chance to use a Nehalem HP Z600 workstation with 2 Xeon E5520 CPUs. The machine has 8 cores, 16 hardware threads, and an absurd 12 GB of RAM.</p><p>It's very fast. It's about 2.5 times as fast (when building the Android sources) as the previously fastest machine I'd used, which was an HP xw6600 with a single Xeon E5420 CPU.</p><p>The machine's relatively small, no larger than an ordinary ATX tower. One way that HP kept the case small is by making the motherboard an odd shape: it is "C" shaped, with a cutout that leaves room for the DVD drive.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090718_Too_Many_Words_about_Car_Stereos</guid><title>Too Many Words about Car Stereos</title><description></description><link>https://jackpal.github.io/posts/blogger/20090718_Too_Many_Words_about_Car_Stereos</link><pubDate>Sat, 18 Jul 2009 14:09:00 -0700</pubDate><content:encoded><![CDATA[<h1>Too Many Words about Car Stereos</h1><p>The other day my wife said to me, "Jack, we're going on a road trip soon. Is there any way we could hook up our MP3 player to the car stereo, so that the kids could listen to their favorite songs during the trip?" Twenty hours of web research and $250 later we've got a new car stereo. It's a <a href="http://www.dualav.com/mobileaudio/xhd7714.php">Dual XHD7714</a> from <a href="http://www.crutchfield.com/">Crutchfield</a>. I'm getting it installed by Best Buy tomorrow. Let's hope their AV installers do a good job! First, why did I get a new stereo at all? Well, all I wanted to do was hook up an MP3 player. But there was no easy way to do that. My 2005 minivan came with a factory installed stereo that didn't have an auxiliary input. There are cheap FM transmitter systems that work with any radio, but they look clunky and the sound quality is supposed to be poor. A lot of web searching turned up some aftermarket accessories that allow hooking up either an audio input jack ($75 + $50 installation = $125) or an MP3 player and/or iPod ($125 + $50 = $175.) But the for just a little more money I was able to get a a whole new radio with lot of additional features. Why this particular model? It was well reviewed and relatively inexpensive. The features I was interested in were:</p><ul><li>MP3 player / USB memory stick player.<ul><li>Hands-free bluetooth calling with a built-in microphone.</li><li>Streaming audio from a bluetooth phone.</li><li>Charging USB devices.</li><li>HD radio.</li><li>Good fast text UI for navigating a MP3 player.</li><li>Play MP3s stored on CDs.</li><li>Wireless remote control for "back seat DJs"</li></ul></li></ul><p>General thoughts on the car stereo market</p><ul><li>Crutchfield is a good place to research and buy car stereos. For research purposes they have a wide selection, and they have very good information, especially in the form of user reviews. For buying they offer free shipping and more importantly a free installation and wiring kit. They also seem to offer very good telephone help for do-it-yourself installers.<ul><li>The add-on car stereo market is in long-term decline. I think that in the next few years the car stereo will become little more than a mobile phone docking station. People will keep their music collection on their phone, or stream it from the internet.</li><li>Car stereo makers are not going down without a fight. They are experimenting with iPhone-inspired full-screen touch-screen UIs and built-in <a href="http://www.wired.com/gadgetlab/2008/12/blaupunkt-and-m/">internet radios</a>. While very creative, I don't think people will buy them. They will just use their phones instead.</li><li>Many people want to connect their iPods to their car stereo. In the short term Apple is making this difficult by changing their communication protocols with every generation of iPod. In the long term iPods are going to be replaced by iPhones, which will probably be forced to support bluetooth stereo streaming.</li></ul></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090707_Using_a_Mac_keyboard_with_Ubuntu_Linux</guid><title>Using a Mac keyboard with Ubuntu Linux</title><description></description><link>https://jackpal.github.io/posts/blogger/20090707_Using_a_Mac_keyboard_with_Ubuntu_Linux</link><pubDate>Tue, 7 Jul 2009 18:31:00 -0700</pubDate><content:encoded><![CDATA[<h1>Using a Mac keyboard with Ubuntu Linux</h1><p>I frequently switch between Mac and Linux, and it's been troublesome to remember to type Command-whatever on the Mac, but Control-whatever on Linux. (For copy-and paste, for example.)</p><p>I did a quick web search and found out that it's easy to <a href="http://ubuntuforums.org/archive/index.php/t-975229.html">make Ubuntu Linux recognize the Command keys as an extra set of control keys</a>:</p><p>Choose menu: System : Preferences : Keyboard</p><p>Select the Layouts tab</p><p>Choose "Layout Options"</p><p>Open the "Alt / Win Key Behaviour" tab</p><p>Check the "Control is mapped to the Win-keys" checkbox.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090628_ICFP_2009_contest_blog_-_Team_Blue_Iris</guid><title>ICFP 2009 contest blog - Team Blue Iris</title><description></description><link>https://jackpal.github.io/posts/blogger/20090628_ICFP_2009_contest_blog_-_Team_Blue_Iris</link><pubDate>Sun, 28 Jun 2009 18:41:00 -0700</pubDate><content:encoded><![CDATA[<h1>ICFP 2009 contest blog - Team Blue Iris</h1><p>I just threw in the towel on the <a href="http://icfpcontest.org/">ICFP 2009 Programming Contest</a>. The problem this year was a set of 4 sub- problems related to orbital mechanics, plus a virtual machine spec. The virtual machine was used to enable the problems to be specified exactly, without worrying about differences in the order of math operations. Implementing the virtual machine was easy and fun. Unfortunately, actually solving the final sub-problem required learning too much math and physics. I was able to solve problems 1 and 2, and make an entry for the lightning round. And I brute-forced a solution for problem 3. But now, 56 hours into the contest, I am giving up on problem 4. I can see the general outline of how to solve it, but it would take sharper tools than I have now. For example, I'd like a way of solving Lambert's equations, but I'm having trouble deriving the code on my own, and the best example I've found while searching the web is a [30-year-old NASA Space Shuttle Fortran program](http://www.google.com/url?sa=t&amp;source=web&amp;ct=res&amp;cd=1&amp;url=http%3A%2F%2Fntrs.nasa.gov%2Farchive%2Fnasa%2Fcasi.ntrs.nasa.gov%2F19790079987<em>1979079987.pdf&amp;ei=PjFHSqXdKoumMYCuibgC&amp;usg=AFQjCNHuISp5Jo</em>Yt8zra20RmTRqlnlhHQ&amp;sig2 =rV_Rm4DYdppoeV-KyqObXA). Also, I'm pretty tired, and this is affecting my judgment. I don't think it's worth going on at this point. Some fun things I did during the contest:</p><ul><li>Learned <a href="http://www.braeunig.us/space/orbmech.htm">Orbital Mechanics</a>, the study of how bodies move in space.<ul><li>Learned what a <a href="http://en.wikipedia.org/wiki/Hohmann_transfer_orbit">Hohmann Transfer Orbit</a> is and why to use it.</li><li>Learned what Lambert's Theorem is, and how to apply it to missile guidance.</li><li>Wrote a Python program that did efficient calculations by generating a C program, compiling it, and then running it and talking to it via a pipe.</li><li>Read a ton of Wikipedia articles, Google Books books and old NASA tech reports on orbit planning and course corrections.</li><li>Learned how old-school Q-system guided missiles work. Very clever use of ground-based computers to compute coefficient matrices that were fed into simple on-board analog computers for the duration of the flight.</li></ul></li></ul><p>Highlights of the contest:</p><ul><li>Hanging out on IRC with 20 other contestants, trying to get the simulator to work.<ul><li>Getting problems 1 and 2 to work.</li><li>Giving up on problem 3, then thinking of a brute-force way of solving it while in the parking lot, about to drive home. (Too bad I wasn't further inspired to solve problem 4.)</li><li>Seeing the pretty pictures of the satellite orbits for problem 4.</li></ul></li></ul><p>Low-lights of the contest:</p><ul><li>Wasting an hour or so due to bugs in the specification<ul><li>Wasting an hour writing a Tkinter alternative to turtle graphics, then not being able to get a Tkinter window to show up, then realizing that Tkinter graphics are so limited that there's no feature benefit over using the already-working turtle graphics.</li><li>The buggy scoring in problem 1 encourages people to program-to-the-scorer rather than solve the stated problem. I could probably increase my position in the standings by 10 places by hacking an "optimal" solution to problem 1 that uses all of the available fuel. But it seems like a waste of time.</li><li>Having to give up on problem 4.</li></ul></li></ul><p>My advice to (future) contest organizers:</p><ul><li>Consider avoiding problems that require deep domain expertise. There's only so much orbital mechanics and numerical methods one can learn in 72 hours.<ul><li>Do whatever it takes to ensure that your VM machine spec is correct. In this case, just asking someone to spend a couple of hours implementing the spec would have exposed the show-stopping problems that everyone encountered.</li></ul></li></ul><p>Advice to myself for future contests:</p><ul><li>Pace yourself on day two, to avoid burning out on day 3.<ul><li>Be sure you understand the scoring system. For example problem 4 had partial credit, so a solution for problem 3 might have worked on problem 4.</li><li>Scheduling work and family life to enable a free weekend for the contest worked out very well.</li><li>Do more planning, and keep an eye on how the work is progressing, to avoid spending too much time on unnecessary work. "What's the simplest thing that could possibly work", and "you aint going to need it" are both good mottoes for this kind of contest.</li><li>Take a little time to refactor the code as you go along, to avoid slowing down due to barnacles. (Example, passing the problem number all over the place because it was one of the inputs to the simulation, rather than special-casing it and setting it once in the VM.)</li></ul></li></ul><p>Analysis of programming languages I used in the contest I used Python and C. I actually completed the lightning round in pure Python. Benefits of Python</p><ul><li>Rapid development due to no compilation time, clean sparse syntax, well designed libraries, plenty of documentation and help available on-line.<ul><li>Turtle graphics made it dead simple to display satellite orbits</li><li>The "struct" package made it dead simple to import and export binary data.</li><li>The "subprocess" package made it easy to start and control other programs.</li><li>Python 3.1's exact printout of floating point values made it easier to tell what the math was doing. (Other projects ran into problems with almost-zero values printing as zero.)</li></ul></li></ul><p>Drawbacks of Python</p><ul><li>Slow. I had to switch the simulation to C to have it run fast enough for problems 3 and 4<ul><li>Global Interpreter Lock (GIL) - meant I couldn't use multiple calculation threads written in Python in one process. (And my machine's got 8 hardware threads. :-) )</li><li>Lack of static type checking is frustrating when program run times are long: I had a half-hour period wasted debugging simple errors that only occurred after 2 minutes of simulation run-time that a static type checker would have caught immediately. To be fair, I could also have caught them with unit testing.</li></ul></li></ul><p>Benefits of C</p><ul><li>Very simple to write code.<ul><li>Runs really fast. :-)</li></ul></li></ul><p>Why My VM's Cool I wanted to explain how my VM implementation worked, because I think it probably ran faster than most other VMs. I wrote a Python-based VM as a reference. Then I wrote a VM generator that would read a VM spec and generate hard-coded C to implement that specific spec. I used a "comparer" VM to compare the output of the two VMs to make sure that there were no bugs in the generated C version. The hard-coded C VM was really hard coded to each problem. All the VM instruction interpretation overhead was removed. In addition, because the VM didn't have any indirection, the "mem" array was replaced by hundreds of individual local variables. This allowed the C compiler to do a very good job of optimizing the code, because it could easily tell there was no aliasing. I included a simple interactive shell in each generated hard-coded C program. The console let you set inputs, run "n" simulation steps, and read the outputs. This made it easy for me to control the simulation from Python. It also made it easy to hand-test the C simulation. One feature I meant to add, but ran out of time/energy for, was to save and restore the state of the simulation. This would have been very helpful in solving problem 4. How I solved the problems Problem 1: Wrote Python VM. Implemented Hohmann transfers as described in <a href="http://en.wikipedia.org/wiki/Hohmann_transfer_orbit">a Wikipedia article</a>. Problem 2: Calculated the correct time to start the Hohmann transfer analytically. (I read about how to do this in a textbook I found through Google books.) Added simple brute-force docking code to match orbits exactly. No fancy "S" curves for me. (And wasted about an hour wondering why I didn't score, because early versions of the contest problem spec didn't say you had to turn off your engine for 900 seconds. I finally figured this out by disassembling the VM to see why the score wasn't being set properly.) Problem 3: Used my fast VM to compute a table of where the satellites would be over time, then wrote a set of nested for loops that tried various Hohmann transfers at various times looking for a solution. The precomputed tables meant I could just look up where the target satellite would be for any time in the future, rather than having to do complex elliptical math. Problem 4: Only got as far as simulating and visualizing this one (boy the orbits are pretty!) Too tired to continue. I was planning on using a variation of the brute-force approach that solved problem 3, with save-and-restore of the simulator state, because I would have to recompute the table of locations for my rocket each time its orbit changed. Conclusions Upon reflection, I think that this particular contest, especially problems 3 and 4, is best suited to a C/C++ solution. This is due to the heavy reliance on numerical methods to calculate the optimal trajectories. I liked that there were multiple versions of each problem. It made it easier to tell if we were making progress, and also allowed whole-program-level parallelization to make use of muticore machines to solve the problems in parallel. While I expect the ultimate contest winners will code in a mutable- state static-type-checked compiled language like C/C++, I predict Haskell will do fairly well in the contest, due to its speed and the ease with which it handles math. However, the winners will probably have a good grasp of orbital mechanics, and it seems that someone who knows the math is more likely to be using C-like-languages. Well that's it, now I'm looking forward to next year! P.S. Here's a Wiki with other team writeups: <a href="http://wiki.freaks-unidos.net/icfp/2009/">FUN Team ICFP 2009 Writeup / Wiki</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090615_Dandy_in_JavaScript</guid><title>Dandy in JavaScript</title><description></description><link>https://jackpal.github.io/posts/blogger/20090615_Dandy_in_JavaScript</link><pubDate>Mon, 15 Jun 2009 14:17:00 -0700</pubDate><content:encoded><![CDATA[<h1>Dandy in JavaScript</h1><p><a href="http://jack.palevich.googlepages.com/dandy.html"><img src="http://3.bp.blogspot.com/_kmzTWylBF0o/SjZZNrKguYI/AAAAAAAACaw/LxWK6Qoj5Y0/s400/Picture+1.png"/></a><br><br>This weekend I wrote a JavaScript version of my old Atari 800 game Dandy.<br><br>Check it out: <a href="http://jacks-hacks.appspot.com/dandy/dandy.html">Web Dandy</a><br><br>It was my first JavaScript application. It was about as easy as writing the Python version. I have only tested it in two browsers so far (Firefox 3.0 and Chrome), and only on one platform OSX. I have already run into differences between the two browsers: Firefox 3.0 for OSX seems to double-post keydown events.<br><br>No sound or multiplayer yet. Oh, and I use the CANVAS tag, so I think older browsers (like IE 7) won't work.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090601_Living_La_Vida_Linux_at_Work</guid><title>Living La Vida Linux at Work</title><description></description><link>https://jackpal.github.io/posts/blogger/20090601_Living_La_Vida_Linux_at_Work</link><pubDate>Mon, 1 Jun 2009 03:56:00 -0700</pubDate><content:encoded><![CDATA[<h1>Living La Vida Linux at Work</h1><p>Android system-level development can be done on either Linux or OSX. For the past few years I've been using OSX, but recently I've switched over to using Linux. Why? Mostly for the higher performance. The full Android system build takes about 30% less time under Ubuntu 8.04 LTS than it does on OSX 10.5 on the same hardware. Not to mention that it's much cheaper to buy a generic PC workstation than the equivalent Mac Pro. I have had some early troubles: It took me a while to get used to typing the "Ctrl" key instead of the "Command" key, and the ugly Linux fonts bothered me for a few days. But since I'm mostly using the exact same programs on Linux as I was on OSX (FireFox, Eclipse, Android), after a few days everything clicked, and I think that I'm just as productive as I was before. And the faster builds and file system stuff (like grep) are wonderful. It helped a lot to install the Blubuntu theme and some nice wallpaper to get away from the awful Ubuntu brown/orange color scheme. Oh, and I'm using Chromium for Linux, which works pretty well, except that it doesn't support Flash. I still fire up Firefox occasionally to watch Flash videos.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090601_See,_this_is_why_we_can't_have_nice_things_(Ubuntu_904_Intel_Drivers)</guid><title>See, this is why we can't have nice things (Ubuntu 9.04 Intel Drivers)</title><description></description><link>https://jackpal.github.io/posts/blogger/20090601_See,_this_is_why_we_can't_have_nice_things_(Ubuntu_904_Intel_Drivers)</link><pubDate>Mon, 1 Jun 2009 03:43:00 -0700</pubDate><content:encoded><![CDATA[<h1>See, this is why we can't have nice things (Ubuntu 9.04 Intel Drivers)</h1><p>A few years ago I tried Ubuntu and predicted it would become a serious challenger to Windows, in about 18 months. Well, it's about 18 months later, was I right? Not exactly. Ubuntu seems to have stood still, if not actually gone backwards. In particular, the newer releases have much worse sound and video performance on my hardware (Intel CPU/GPU Mac Minis) than earlier releases. The sound driver issue is because Linux, in its typical decentralized fashion, is trying to figure out how to provide a standard audio subsystem, and has two or three competing standards that are duking it out. Since they all suck it seems odd that people defend them so much. Just pick one already. The video driver issue is because Intel decided to take several years to rewrite their Linux video driver stack, and Ubuntu decided to ship the new broken drivers rather than continue to use the old unbroken drivers. Very very lame on both Intel and especially Ubuntu's part. And Phoronix's performance tests show that the performance of Ubuntu has gone downhill slightly over the last few releases. (With no offsetting user-visible feature improvements.) So we see the problem's larger than just sound and video drivers. It's almost as if the Linux community doesn't <em>want</em> to be successful. Microsoft must be laughing all the way to the bank on this one.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090502_Chromium_on_Linux</guid><title>Chromium on Linux</title><description></description><link>https://jackpal.github.io/posts/blogger/20090502_Chromium_on_Linux</link><pubDate>Sat, 2 May 2009 17:45:00 -0700</pubDate><content:encoded><![CDATA[<h1>Chromium on Linux</h1><p>I've been trying out the daily builds of Chromium on Linux. (Chromium is the open-source version of Google's Chrome browser. Chrome is available on Windows, but</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090502_The_diNovo_Edge_is_a_nice_keyboard_for_HTPC</guid><title>The diNovo Edge is a nice keyboard for HTPC</title><description></description><link>https://jackpal.github.io/posts/blogger/20090502_The_diNovo_Edge_is_a_nice_keyboard_for_HTPC</link><pubDate>Sat, 2 May 2009 14:21:00 -0700</pubDate><content:encoded><![CDATA[<h1>The diNovo Edge is a nice keyboard for HTPC</h1><p>I just bought a <a href="http://www.logitech.com/index.cfm/keyboards/keyboard/devices/4741&cl=us,en">Logitech diNovo Edge Mac Edition</a> keyboard for my Mac Mini HTPC. I bought the diNovo instead of the Apple Bluetooth keyboard because:</p><ol><li>Built-in trackpad.<ol start="2"><li>Built in volume control slider.</li><li>Dedicated media transport controls.</li><li>Nifty dock / recharger stand.</li></ol></li></ol><p>It's my first Bluetooth device. So far I think Bluetooth works a lot better than IR, because you don't have to point it at an IR receiver. The diNovo does have some flaws:</p><ul><li>No key backlighting, which makes it hard to use in the dark.<ul><li>The mouse buttons below the trackpad are mushy and hinged at the outer edges, making them hard to press. (Happily tapping works and there is a separete left-mouse-button on the left edge of the keyboard. So for typical Mac usage you don't need to use the mushy buttons.)</li><li>A skim of the Logitech support forums indicates that the function keys are not as programmable as some people wish. I don't use function keys that much so this hasn't been an issue for me yet.</li></ul></li></ul><p>My TV is a 40" LCD, and I sit about 15 feet away from it. At this distance the 1920 x 1280 desktop is just too high resolution for my eyes, so I reduced my screen resolution to 1366 x 720. That seems to work well for now. Apparently I need to get a bigger TV :-) Using a keyboard/trackpad instead of a button- based remote control is nice. I like being able to use all the ordinary apps that I already know how to use, rather than have to learn a new set of apps and UI commands. I also like not having to switch input devices depending upon what I'm trying to do. (For example if I want to use a web browser to look up some fact about a video that I just watched, it just works.) The diNovo is very smartly designed, so that it's easy to use the mouse while holding the keyboard in two hands. Of course I'm a right hander. A left hander might have a different opinion, as the trackpad is located where it can be used easily with the right hand, but not the left hand. What about Linux? I have been able to use the same keyboard with both Mac and Kubuntu 9.04. With Kubuntu there were some issues around the initial pairing: You need a working keyboard and mouse in order to pair a new Bluetooth device. You even need to reboot once, and answer one final dialog box using a working keyboard / mouse, before the new device pairing is complete. A second issue for HTPC use is that the Mac Mini video driver on Kubuntu does not have the flexability to slightly lower the resolution of the screen. I blame Intel for this, as they are in the middle of converting to a new driver model and their current drivers are pretty bare bones. One final issue for dual booting Mac systems is that it seems to take a while for the keyboard to reconnect after a restart. This is an issue if you have reFit installed and you're trying to send keystrokes to reFit during the reboot. I found I had to press multiple keys multiple times until reFit started recognizing keys, after which the keyboard acted normally.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090330_Larrabee_Instruction_Set_Talks</guid><title>Larrabee Instruction Set Talks</title><description></description><link>https://jackpal.github.io/posts/blogger/20090330_Larrabee_Instruction_Set_Talks</link><pubDate>Mon, 30 Mar 2009 09:53:00 -0700</pubDate><content:encoded><![CDATA[<h1>Larrabee Instruction Set Talks</h1><p>###</p><p>Here's the first public version of the slides from Tom Forsyth and Michael Abrash's GDC 2009 talks on Larrabee's instruction set, by way of Japanese magazine PC Watch, as seen on Beyond 3D's Forums. (You have to manually click on each of the little thumbnails of each slide.):</p><http://pc.watch.impress.co.jp/docs/2009/0330/kaigai498.htm> Hopefully Intel
(or GDC) will release a better version of these slide decks sometime soon.
Say, was it just me, or was blogging really light about GDC this year? In past
years I was a lot more technical writeups than I saw this year. I wonder if
blogging is down in general? Is everyone on Facebook and Twitter now? I can't
imagine Twitter being very useful for reporting technical information. Here's
Michael Abrash's Doctor Dobbs Journal article on the Larrabee instruction set.
<http://www.ddj.com/hpc-high-performance-computing/216402188> Here's the
[Intel GDC 2009](http://software.intel.com/en-us/articles/intel-at-gdc/)
Larrabee talks: [**Rasterization on Larrabee: A First Look at the Larrabee New
Instructions (LRBni) in Action**](http://software.intel.com/file/15542)
[**SIMD Programming on Larrabee: A Second Look at the Larrabee New
Instructions (LRBni) in Action**](http://software.intel.com/file/15545)

]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090327_Using_XBMC_on_Mac_Mini_using_both_OSX_and_Linux</guid><title>Using XBMC on Mac Mini using both OSX and Linux</title><description></description><link>https://jackpal.github.io/posts/blogger/20090327_Using_XBMC_on_Mac_Mini_using_both_OSX_and_Linux</link><pubDate>Fri, 27 Mar 2009 15:23:00 -0700</pubDate><content:encoded><![CDATA[<h1>Using XBMC on Mac Mini using both OSX and Linux</h1><p>The Xbox Media Center (XBMC) is a nifty open-source application for watching videos. It was originally designed for use on modified Xbox video game consoles, but has more recently become popular for Intel-based Home Theater Personal Computers. It has been ported to Windows, Mac, and Linux. It has no PVR features, instead it concentrates on displaying streaming and downloaded videos. Its big advantage over using the Xbox 360's similar application is that it handles a much wider variety of streaming video sources and downloaded video codecs. I've been running <a href="http://www.plexapp.com/">Plex</a>, an OSX- specific version of the Xbox Media Center, on my Mac Mini for several months now. Overall it's a good product, but I had some issues for my application. I wanted Plex to serve as a consumer electronic device that my mother-in-law (who doesn't use computers and can't read English) could use by herself to watch videos. The system I put together didn't work very well for her. The problems we ran in to were: 1) The integration with the 6-button Apple Remote Control into the Plex/XBMC UI leaves a lot to be desired. The XBMC UI was designed to be used with a full-featured remote, and the Apple Remote mapping is just too hard to use. My mother-in-law would end up in the weeds of some obscure corner of the Plex UI, without knowing how she had gotten there or how to get back. The Plex software contributed to this problem by having a very sluggish interface to the Apple Remote, that frequently missed clicks. When you couple this with the overloading of "short" and "long" presses to try and give the Apple Remote more logical buttons, it became quite difficult (even for me) to reliably drive the UI. Even a task as simple as backing out of a playing video was difficult to do reliably. 2) OSX (and Plex) have trouble running in consumer-electronics mode, without a keyboard or mouse. OSX and Plex both liked to bring up modal dialogs to report errors or software updates. I was always having to drag out a keyboard and mouse to dismiss these dialogs. Now, a sensible person would work around these issues by buying a Bluetooth keyboard and mouse, and software like "<a href="http://www.iospirit.com/index.php?mode=view&obj_type=infogroup&obj_id=24&sid=9214373G9cd3975527aa3499">Remote Buddy</a>" that enables the use of a full-featured remote. A somewhat more ambitious person might have rescripted the Plex UI to work better with the Apple Remote, or even dug into the sources to try and fix the sluggish event problem. But I'm restless, and wanted an excuse to try out Linux on the Mac Mini anyway. So this week I decided to see if the Linux version of XBMC worked any better. Installing Linux XBMC Installing Linux is alot like the old pre-Windows 95 days of DOS. I spent a lot of time trying different things and fiddling with hardware issues. Here's what finally worked for me:</p><ul><li>Installed <a href="http://refit.sourceforge.net/">rEFIt</a> to allowing easy dual-booting between Mac and Linux<ul><li>Installed <a href="http://releases.ubuntu.com/8.10/">Ubuntu 8.10 32-bit</a> version.</li><li><a href="http://xbmc.org/wiki/?title=HOW-TO_compile_XBMC_for_Linux_from_source_code">Compiled XBMC from the tip-of-tree svn sources</a>.</li><li>Installed the LIRC infrared remote control driver (apt-get install lirc) and used an old USB-based Windows Media Center remote control that I already had.</li></ul></li></ul><p>So far (one day) this has worked well. The full-functioned remote control make a big difference in usability. Some issues I ran into Ubuntu 9.04 beta problems with OpenGL accelleration for the Mac Mini The Ubuntu 9.04 beta Intel 945 OpenGL driver does not hardware accelerate as many features of OpenGL as in older versions of Ubuntu. XBMC's user interface runs very slowly. This is not XBMC-specific. Try using apt-get to install the "amoeba" OpenGL demo. It runs smoothly on Ubuntu 8.10, but is a 2-frame-per-second slide-show on Ubuntu 9.04 beta. I hope this regression gets fixed in future versions of Ubuntu 9.04, as it otherwise looks like a good system. The prebuilt "PPA" XBMC binaries will crash on Ubuntu 8.10 when pausing video I had to build XBMC from the subversion sources in order to fix a bug where pausing a video would immediately cause XBMC to crash. (I used a build from Thursday March 26th. I'm sorry but this is the first time I've used subversion, so I don't know how to figure out which revision number I'm synced to.) This is a bug that's been reported several times in the XBMC forums. It seems to be solved by compiling from source, without making any other changes. I'm suspicious that this may be due to some subtle difference between the libraries that you install to compile and the libraries that are installed when you install the prebuilt binary. (But that's just a guess. The real reason may be something completely different.) Well, after all this the system seems to work pretty well for my application. Too bad my mother-in-law's finished her visit with us and gone back home. At least now I've got plenty of time to work out the bugs before her next visit. [Revision notes] 3/27/09 - Updated for Ubuntu 9.04 beta.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090325_Intel_describes_Larrabee_instruction_set</guid><title>Intel describes Larrabee instruction set</title><description></description><link>https://jackpal.github.io/posts/blogger/20090325_Intel_describes_Larrabee_instruction_set</link><pubDate>Wed, 25 Mar 2009 21:37:00 -0700</pubDate><content:encoded><![CDATA[<h1>Intel describes Larrabee instruction set</h1><p>Perhaps in preparation for Friday's GDC talks by Michael Abrash and Tom Forsyth, Intel has described the Larrabee instruction set: [Prototype Primitives Guide](http://software.intel.com/en-us/articles/prototype- primitives-guide/) Intel includes a C source file that implements their new instruction set, so people can play around with the instructions before Larrabee ships. The instruction set looks alot like a typical GPU shader instruction set. Lots of "log" and "rsqrt" type instructions. But there are also some interesting variations on MADD, such as <strong>MADD233_{PI,PS}, which</strong> I assume help shave cycles off of inner loops. The compress and expand instructions also look very useful. I look forward to reading code examples from Abrash and Forsyth in the near future!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090306_Listening_to_my_home_music_at_work_with_SqueezeCenter_and_Softsqueeze</guid><title>Listening to my home music at work with SqueezeCenter and Softsqueeze</title><description></description><link>https://jackpal.github.io/posts/blogger/20090306_Listening_to_my_home_music_at_work_with_SqueezeCenter_and_Softsqueeze</link><pubDate>Fri, 6 Mar 2009 18:50:00 -0800</pubDate><content:encoded><![CDATA[<h1>Listening to my home music at work with SqueezeCenter and Softsqueeze</h1><p>For some time I've wanted to listen to my home music collection on my computer at work. I tried a bunch of different approaches, and finally came up with one that works pretty well:</p><ul><li>I run the free <a href="http://www.slimdevices.com/pi_features.html">SqueezeCenter</a> program on my home machine to serve music.<ul><li>I run the free <a href="http://softsqueeze.sourceforge.net/">Softsqueeze</a> program on my work machine to listen to the music.</li><li>To keep the whole world from listening to my music, <a href="http://softsqueeze.sourceforge.net/ssh.html">I set up an SSH tunnel</a>.</li></ul></li></ul><p>The resulting system works pretty well. In case you're wondering, the SqueezeCenter program's main use is to serve music to the Squeezebox brand of internet radios. The ability to use it with a regular computer, without purchasing a Squeezebox internet radio, is a nice gesture on the part of the Logitec company that makes and sells Squeezebox internet radios.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090217_Future_GPUorg_for_cryptic_Larrabee_news</guid><title>Future GPU.org for cryptic Larrabee news</title><description></description><link>https://jackpal.github.io/posts/blogger/20090217_Future_GPUorg_for_cryptic_Larrabee_news</link><pubDate>Tue, 17 Feb 2009 05:25:00 -0800</pubDate><content:encoded><![CDATA[<h1>Future GPU.org for cryptic Larrabee news</h1><p>Phil Taylor, a long-time Microsoft graphics and gaming evangelist is now working for Intel on graphics tools evangelism. He started a blog, called <a href="http://www.futuregpu.org/">Future GPU</a>, where he drops hints and links about Larrabee development. He also tells Microsoft war stories for people in the mood for inside-baseball information about Microsoft's DirectX and game groups. Back when I was working at WebTV and just learning about the 3D graphics world, Phil was nice enough to give me and a few of my WebTV co- workers tickets to the super-desirable GDC DirectX party. These parties were intended for external developers, so it was very hard for non-DirectX Microsofties to attend. Thanks Phil!!! :-) From reading Phil's blog it sounds like <a href="https://www.cmpevents.com/GD09/a.asp?option=C&V=11&SessID=9262">Intel's developing a set of graphics debugging tools that they're going to announce at GDC</a>. Could it be PIX-for-Larrabee? I found Phil's site through a "<a href="http://www.google.com/alerts">Google Alert</a>" that I set up for Larrabee news. It does a weekly search for Larrabee news. The web's so big and sparsely connected that I'm finding that I've never heard of any of the web sites that the Alert is dredging up. Most of the sites mentioned in the Google Alert are not worth visiting, but a few (like Phil's site) are very interesting indeed.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090215_My_Next-Gen_Console_Predictions</guid><title>My Next-Gen Console Predictions</title><description></description><link>https://jackpal.github.io/posts/blogger/20090215_My_Next-Gen_Console_Predictions</link><pubDate>Sun, 15 Feb 2009 16:55:00 -0800</pubDate><content:encoded><![CDATA[<h1>My Next-Gen Console Predictions</h1><p>The recent Larrabee-in-PS4 rumor has</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090127_ATI_releases_the_full_details_for_their_R600_R700_GPUs</guid><title>ATI releases the full details for their R600/R700 GPUs</title><description></description><link>https://jackpal.github.io/posts/blogger/20090127_ATI_releases_the_full_details_for_their_R600_R700_GPUs</link><pubDate>Tue, 27 Jan 2009 13:23:00 -0800</pubDate><content:encoded><![CDATA[<h1>ATI releases the full details for their R600/R700 GPUs</h1><p>http://article.gmane.org/gmane.comp.freedesktop.xorg.drivers.radeonhd/5808 This is very familiar documentation to me, because these GPUs are b</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20090108__Pixar_Quality_Graphics__is_720_Gflops</guid><title>"Pixar Quality Graphics" is 720 Gflops</title><description></description><link>https://jackpal.github.io/posts/blogger/20090108__Pixar_Quality_Graphics__is_720_Gflops</link><pubDate>Thu, 8 Jan 2009 04:32:00 -0800</pubDate><content:encoded><![CDATA[<h1>"Pixar Quality Graphics" is 720 Gflops</h1><p>For at least 10 years GPU vendors have been talking about "Pixar Quality" graphics. But what does that mean? Well, according to this lecture on <a href="http://graphics.stanford.edu/courses/cs448a-01-fall/lectures/lecture16/walk002.html">The Design of Renderman</a>, the original goals for the REYES architecture were</p><ul><li>3000 x 1667 pixels (5 MP)<ul><li>80M Micropolygons (each 1/4th of a pixel in size, depth complexity of 4)</li><li>16 samples per pixel</li><li>150K geometric primitives</li><li>300 shading flops per micropolygon</li><li>6 textures per primitive</li><li>100 1MB textures</li></ul></li></ul><p>That's a shading rate of 80M <em> 300 </em> 30 Hz = 720 Gflops. (They were probably more concerned about 24 Hz, but for games 30Hz is better.) In comparison I think the peak shader flops of high-end 2008-era video cards are in the 1 TFlop range. (Xbox 360 Xenos is 240 Gflops, PS3 is a bit less.). Now, GPU vendors typically quote multiply-accumulate flops, because that doubles the number of flops. So it's more realistic to say that 2008-era video cards are in the 500 Gflop range. So we really are entering the era of "Pixar Quality" graphics.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20081231_Tech_Talk_on_Wii_security_model_(and_breaking_it)</guid><title>Tech Talk on Wii security model (and breaking it)</title><description></description><link>https://jackpal.github.io/posts/blogger/20081231_Tech_Talk_on_Wii_security_model_(and_breaking_it)</link><pubDate>Wed, 31 Dec 2008 14:33:00 -0800</pubDate><content:encoded><![CDATA[<h1>Tech Talk on Wii security model (and breaking it)</h1><p>A very thorough talk describing the Nintendo Wii game console security model and the bugs and weaknesses that allowed the Wii to be compromised: <a href="http://events.ccc.de/congress/2008/Fahrplan/events/2799.en.html">Console Hacking 2008: Wii Fail</a> In a nutshell, security is provided by an embedded ARM CPU that sits between the CPU and the IO devices, and handles all the IO. The two main flaws were (a) A bug in the code that compared security keys, such that it was possible to forge security keys, and (b) secret break-once-run-everywere information was stored un-encrypted in RAM, where it could be extracted using hardware modifications. There's a nice table at the end of the presentation showing a number of recent consumer devices, what their security model was, and how long it took to break them. The PS3 is the only console that's currently unbroken. The PS3's security model seems similar to the Xbox 360, but somewhat weaker. But it remains unbroken. This seems to due to the existence of an official PS3 Linux port, which means most Linux kernel hackers are not motivated to hack the PS3 security. (Only the ones who want full access to the GPU from Linux are motivated, and only to the extent that they can access the GPU.)</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20081226_Larrabee_papers_from_SIGGRAPH_Asia_2008</guid><title>Larrabee papers from SIGGRAPH Asia 2008</title><description></description><link>https://jackpal.github.io/posts/blogger/20081226_Larrabee_papers_from_SIGGRAPH_Asia_2008</link><pubDate>Fri, 26 Dec 2008 02:51:00 -0800</pubDate><content:encoded><![CDATA[<h1>Larrabee papers from SIGGRAPH Asia 2008</h1><p>...as seen on the <a href="http://forum.beyond3d.com/showthread.php?p=1251413#post1251413">Beyond3D GPGPU forum</a>, here are the presentations from the recent (December 12th 2008) "Beyond Programmable Shading" course: <a href="http://sa08.idav.ucdavis.edu/">SIGGRAPH Asia 2008: Parallel Computing for Graphics: Beyond Programmable Shading</a> There are good presentations from both GPU vendors and academics. My favorite presentations are the Intel ones on Larrabee, just because I'm so interested in that architecture: <a href="http://sa08.idav.ucdavis.edu/foley-programming-larrabee.pdf">Parallel Programming on Larrabee</a> - describes the Larrabee fiber/task programming model. <a href="http://sa08.idav.ucdavis.edu/foley-nextgen.pdf">Next-Generation Graphics on Larrabee</a> - how Larrabee's standard renderer is structured, and how it can be extended / modified. IBM / Sony missed a bet by not presenting here. That's too bad, because Cell sits between the ATI / NVIDIA parts and Larrabee in terms of programmability. And Cell's been available for long enough that there should be a number of interesting results to report. Note to self: consider buying a PS3 and learning Cell programming, just to get ready for Larrabee. Heh, yeah, that's the ticket. Being able to play PS3-specific games like Little Big Planet and Flower would be just a coincidental bonus.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20081208_Fun_with_Git</guid><title>Fun with Git</title><description></description><link>https://jackpal.github.io/posts/blogger/20081208_Fun_with_Git</link><pubDate>Mon, 8 Dec 2008 18:35:00 -0800</pubDate><content:encoded><![CDATA[<h1>Fun with Git</h1><p>This weekend I reorganize my home source code projects. I have a number of machines, and over the years each one had accumulated several small source- code projects. (Python scripts, toy games, things like that.) I wanted to put these projects under source code control. I also wanted to make sure they were backed-up. Most of these little projects are not ready to be published, so I didn't want to use one of the many web-based systems for source-code management. After some research, I decided to use replicated git repositories. I created a remote git repository on an Internet-facing machine, and then created local git repositories on each of my development machines. Now I can use git push and git pull to keep the repositories synchronized. I use git's built-in ssh transport, so the only thing I had to do on the Internet-facing- machine was make sure that the git executables were in the non-interactive- ssh-shell's path. (Which I did by adding them in my .bashrc file.) Git's ability to work off-line came in handy this Sunday, as I was attending an elementary-school chess tournament with my son. Our local public schools don't have open WiFi, so there was no Internet connectivity. But I was able to happily work away using my local git, and later easily push my changes back to the shared repository.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20081119_Microsoft_New_Xbox_Experience_Avatars</guid><title>Microsoft New Xbox Experience Avatars</title><description></description><link>https://jackpal.github.io/posts/blogger/20081119_Microsoft_New_Xbox_Experience_Avatars</link><pubDate>Wed, 19 Nov 2008 18:17:00 -0800</pubDate><content:encoded><![CDATA[<h1>Microsoft New Xbox Experience Avatars</h1><p>[![](http://avatar.xboxlive.com/avatar/Grammerjack/avatar- body.png)](http://avatar.xboxlive.com/avatar/Grammerjack/avatar-body.png) I just tried creating an avatar on Microsoft's new Xbox dashboard. As you can see (at least when the Microsoft server isn't being hammered) on the left, they provide a URL for displaying your current Avatar on a web page. The character creation system is not too bad. In some ways it's more flexible than Nintendo's Mii (for example more hair styles and clothing), but in other ways it's more limited (less control over facial feature placement). My avatar looks better on the Xbox than it does here -- they should consider sharpening the image. For example, the T-shirt my avatar is wearing has a thin-lined Xbox symbol. I think they do a good job of avoiding the Uncanny Valley effect. I look forward to seeing how avatars end up being used in the Xbox world. In othe Xbox-related news I'm enjoying playing Banjo Kazooie Nuts &amp; Bolts with my son. All we have right now is the demo, but it's great fun for anyone who likes building things. It's replaced Cloning Clyde as my son's favorite Xbox game.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20081119_Internals_of_the_Azul_Systems_Multi-core_Java_processor</guid><title>Internals of the Azul Systems Multi-core Java processor</title><description></description><link>https://jackpal.github.io/posts/blogger/20081119_Internals_of_the_Azul_Systems_Multi-core_Java_processor</link><pubDate>Wed, 19 Nov 2008 13:24:00 -0800</pubDate><content:encoded><![CDATA[<h1>Internals of the Azul Systems Multi-core Java processor</h1><p>I'm a big fan of CPU architectures. Here's a conversation between David Moon formerly of Symbolics Lisp Machines and Cliff Click Jr. of Azule Systems. They discuss details of both the Lisp Machine architecture and Azule's massively multi-core Java machine. <http://blogs.azulsystems.com/cliff/2008/11/a-brief-
conversation-with-david-moon.html> The claim (from both Symbolics and Azule)
is that adding just a few instructions to an ordinary RISC instruction set can
make GC much faster. With so much code being run in Java these days I wonder
if we'll see similar types of instructions added to mainstream architectures.

</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20081020_Can_a_comic_strip_make_you_more_productive_</guid><title>Can a comic strip make you more productive?</title><description></description><link>https://jackpal.github.io/posts/blogger/20081020_Can_a_comic_strip_make_you_more_productive_</link><pubDate>Mon, 20 Oct 2008 07:54:00 -0700</pubDate><content:encoded><![CDATA[<h1>Can a comic strip make you more productive?</h1><p>This one can: <a href="http://xkcd.com/386/">XKCD: Someone is Wrong on the Internet</a> --- this comic's punchline has saved me at least an hour of a week since it came out. That's more than I've saved by learning Python. :-)</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20081011_Congative_dissonance</guid><title>Congative dissonance</title><description></description><link>https://jackpal.github.io/posts/blogger/20081011_Congative_dissonance</link><pubDate>Sat, 11 Oct 2008 14:52:00 -0700</pubDate><content:encoded><![CDATA[<h1>Congative dissonance</h1><p>So, I like read</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20080930_Next_gen_video_console_speculation_suggests_we_aim_low</guid><title>Next gen video console speculation suggests we aim low</title><description></description><link>https://jackpal.github.io/posts/blogger/20080930_Next_gen_video_console_speculation_suggests_we_aim_low</link><pubDate>Tue, 30 Sep 2008 17:01:00 -0700</pubDate><content:encoded><![CDATA[<h1>Next gen video console speculation suggests we aim low</h1><p>The next generation of video game consoles should start in 2011. (Give or take a year). It takes about three years to develop a video game console, so work should be ramping up at all three video game manufacturers. Nintendo's best course-of-action is pretty clear: Do a slightly souped-up Wii. Perhaps with lots of SD-RAM for downloadable games. Probably with low-end HD resolution graphics. Definately with an improved controller (for example with the recent gyroscope slice built in.) Sony and Microsoft have to decide whether to aim high or copy Nintendo. Today a strong rumor has it that Sony is polling developers to see what they think of a PlayStation 4 that is similar to a cost-reduced PlayStation 3 (same Cell, cheaper RAM, cheap launch price.)</p><http://forum.beyond3d.com/showthread.php?t=50037> That makes sense as Sony
has had problems this generation due to the high launch cost of the PS3. The
drawback of this scheme is that it does nothing to make the PS4 easy to
program. In the last few weeks we've seen other rumors that Microsoft's being
courted by Intel to put the Larrabee GPU in the next gen Xbox. I think that if
Sony aims low, it's likely that Microsoft will be foreced to aim low too,
which would make a Larrabee GPU unlikely. That makes me sad -- in my dreams,
I'd love to see an Xbox 4 that used a quad-core x86 CPU and a 16-core Larrabee
GPU. Well, the great thing is that we'll know for sure, in about 3 years. :-)

]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20080924_Woot!_I'm_19th_place_in_the_ICFP_2008_Programming_Contest</guid><title>Woot! I'm 19th place in the ICFP 2008 Programming Contest</title><description></description><link>https://jackpal.github.io/posts/blogger/20080924_Woot!_I'm_19th_place_in_the_ICFP_2008_Programming_Contest</link><pubDate>Wed, 24 Sep 2008 14:46:00 -0700</pubDate><content:encoded><![CDATA[<h1>Woot! I'm 19th place in the ICFP 2008 Programming Contest</h1><p>Team Blue Iris (that's me and my kids!) took 19th place, the top finish for a Python-based entry! Check out the <a href="http://video.google.com/videoplay?docid=-4697764813432201693">ICFP Programming Contest 2008 Video</a>. The winning team list is given at 41:45.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20080919_Will_Smart_Phones_replace_PCs_</guid><title>Will Smart Phones replace PCs?</title><description></description><link>https://jackpal.github.io/posts/blogger/20080919_Will_Smart_Phones_replace_PCs_</link><pubDate>Fri, 19 Sep 2008 14:01:00 -0700</pubDate><content:encoded><![CDATA[<h1>Will Smart Phones replace PCs?</h1><p>That's the question <a href="http://www.realworldtech.com/forums/index.cfm?action=detail&id=93355&threadid=93355&roomid=2">Dean Kent asks over at Real World Tech</a>'s forums. I replied briefly there, but thought it would make a good blog post as well.</p><p>I'm an Android developer, so I'm probably biased, but I think most people in the developed world will have a smart phone eventually, just as most people already have access to a PC and Internet connectivity.</p><p>I think the ratio of phone / PC use will vary greatly depending upon the person's lifestyle. If you're a city-dwelling 20-something student you're going to be using your mobile phone a lot more than a 60-something suburban grandpa.</p><p>This isn't because the grandpa's old fashioned, it's because the two people live in different environments and have different patterns of work and play.</p><p>Will people stop using PCs? Of course not. At least, not most people. There are huge advantages to having a large screen and a decent keyboard and mouse. But I think people will start to think of their phone and their PC as two views on the same thing -- the Internet. And that will shape what apps they use on both the phone and the PC. And this switching will be a strong force towards having people move their data into the Internet cloud, so that they can access their data from whatever device they're using. This tendency will be strongest with small-sized data that originates in the cloud (like email), but will probably extend to other forms of data over time.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20080919_Peter_Moore_on_Xbox</guid><title>Peter Moore on Xbox</title><description></description><link>https://jackpal.github.io/posts/blogger/20080919_Peter_Moore_on_Xbox</link><pubDate>Fri, 19 Sep 2008 13:55:00 -0700</pubDate><content:encoded><![CDATA[<h1>Peter Moore on Xbox</h1><p><a href="http://www.guardian.co.uk/technology/gamesblog/2008/sep/11/playstation.microsoft1?gusrc=rss&feed=technology">Peter Moore on Xbox</a> I always liked Peter Moore, and I was sorry when he left Xbox for EA. He's given a very good interview on his time at Sega and Microsoft. (He ran the Xbox game group at Microsoft before moving on to Electronic Arts.) Lots of insight into the Xbox part of the game industry. Here he is talking about Rare:</p><blockquote><p>...and you know, Microsoft, we'd had a tough time getting Rare back –Perfect Dark Zero was a launch title and didn't do as well as Perfect Dark…but we were trying all kinds of classic Rare stuff and unfortunately I thinkthe industry had past Rare by – it's a strong statement but what they weregood at, new consumers didn't care about anymore, and it was tough becausethey were trying very hard - Chris and Tim Stamper were still there – to tryand recreate the glory years of Rare, which is the reason Microsoft paid a lotof money for them and I spent a lot of time getting on a train to Twycross tomeet them. Great people. But their skillsets were from a different time and adifferent place and were not applicable in today's market.</p></blockquote>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20080916_Pro_tip:_Try_writing_it_yourself</guid><title>Pro tip: Try writing it yourself</title><description></description><link>https://jackpal.github.io/posts/blogger/20080916_Pro_tip:_Try_writing_it_yourself</link><pubDate>Tue, 16 Sep 2008 14:28:00 -0700</pubDate><content:encoded><![CDATA[<h1>Pro tip: Try writing it yourself</h1><p>Sometimes I need to get a feature into the project I'm working on, but the developer who owns the feature is too busy to implement it. A trick that seems to help unblock things is if I hack up an implementation of the feature myself and work with the owner to refine it. This is only possible if you have an engineering culture that allows it, but luckily both Google and Microsoft cultures allow this, at least at certain times in the product lifecycle when the tree isn't frozen. By implementing the feature myself, I'm (a) reducing risk, as we can see the feature sort of works, (b) making it much easier for the overworked feature owner to help me, as they only have to say "change these 3 things and you're good to go", rather than having to take the time to educate me on how to implement the feature, (c) getting a chance to implement the feature exactly the way I want it to work. Now, I can think of a lot of situations where this approach won't work: at the end of the schedule where no new features are allowed, in projects where the developer is so overloaded that they can't spare any cycles to review the code at all, or in projects where people guard the areas they work on. But I've been surprised how well it works. And it's getting easier to do, as distributed version control systems become more common, and people become more comfortable working with multiple branches and patches.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://jackpal.github.io/posts/blogger/20080916_How_source_control_shapes_development</guid><title>How source control shapes development</title><description></description><link>https://jackpal.github.io/posts/blogger/20080916_How_source_control_shapes_development</link><pubDate>Tue, 16 Sep 2008 13:53:00 -0700</pubDate><content:encoded><![CDATA[<h1>How source control shapes development</h1><p><em>"Amateurs discuss languages... Professional programmers study<a href="http://en.wikipedia.org/wiki/Logistics "Logistics"">logistics</a>."</em></p><p>I've been programming for 33 years. I've been working on system software for 20 years. What do you think the biggest change has been? OO Garbage-collected languages? Powerful PCs with high-res monitors and mice? The Internet? Email?</p><p>No, we had all that stuff, at least at research labs where my friends and I worked. Search engines? We didn't need 'em -- there were only about 10 places to look for anything, and only a few people doing work in any particular area. You just wrote 'm e</p><p>Daily builds? Had 'em.</p><p>I'd have to say that source code control</p>]]></content:encoded></item></channel></rss>